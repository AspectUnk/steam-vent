// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `c_peer2peer_netmessages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CP2P_TextMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CP2P_TextMessage {
    // message fields
    // @@protoc_insertion_point(field:CP2P_TextMessage.text)
    pub text: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CP2P_TextMessage.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CP2P_TextMessage {
    fn default() -> &'a CP2P_TextMessage {
        <CP2P_TextMessage as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CP2P_TextMessage {
    pub fn new() -> CP2P_TextMessage {
        ::std::default::Default::default()
    }

    // optional bytes text = 1;

    pub fn text(&self) -> &[u8] {
        match self.text.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::vec::Vec<u8>) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::vec::Vec<u8> {
        self.text.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CP2P_TextMessage {
    const NAME: &'static str = "CP2P_TextMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.text.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.text.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CP2P_TextMessage {
        CP2P_TextMessage::new()
    }

    fn clear(&mut self) {
        self.text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CP2P_TextMessage {
        static instance: CP2P_TextMessage = CP2P_TextMessage {
            text: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSteam_Voice_Encoding)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteam_Voice_Encoding {
    // message fields
    // @@protoc_insertion_point(field:CSteam_Voice_Encoding.voice_data)
    pub voice_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteam_Voice_Encoding.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteam_Voice_Encoding {
    fn default() -> &'a CSteam_Voice_Encoding {
        <CSteam_Voice_Encoding as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSteam_Voice_Encoding {
    pub fn new() -> CSteam_Voice_Encoding {
        ::std::default::Default::default()
    }

    // optional bytes voice_data = 1;

    pub fn voice_data(&self) -> &[u8] {
        match self.voice_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_voice_data(&mut self) {
        self.voice_data = ::std::option::Option::None;
    }

    pub fn has_voice_data(&self) -> bool {
        self.voice_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voice_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.voice_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voice_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.voice_data.is_none() {
            self.voice_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.voice_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_voice_data(&mut self) -> ::std::vec::Vec<u8> {
        self.voice_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSteam_Voice_Encoding {
    const NAME: &'static str = "CSteam_Voice_Encoding";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.voice_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.voice_data.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.voice_data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteam_Voice_Encoding {
        CSteam_Voice_Encoding::new()
    }

    fn clear(&mut self) {
        self.voice_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteam_Voice_Encoding {
        static instance: CSteam_Voice_Encoding = CSteam_Voice_Encoding {
            voice_data: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CP2P_Voice)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CP2P_Voice {
    // message fields
    // @@protoc_insertion_point(field:CP2P_Voice.audio)
    pub audio: ::steam_vent_proto_common::protobuf::MessageField<super::netmessages::CMsgVoiceAudio>,
    // @@protoc_insertion_point(field:CP2P_Voice.broadcast_group)
    pub broadcast_group: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CP2P_Voice.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CP2P_Voice {
    fn default() -> &'a CP2P_Voice {
        <CP2P_Voice as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CP2P_Voice {
    pub fn new() -> CP2P_Voice {
        ::std::default::Default::default()
    }

    // optional uint32 broadcast_group = 2;

    pub fn broadcast_group(&self) -> u32 {
        self.broadcast_group.unwrap_or(0)
    }

    pub fn clear_broadcast_group(&mut self) {
        self.broadcast_group = ::std::option::Option::None;
    }

    pub fn has_broadcast_group(&self) -> bool {
        self.broadcast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_group(&mut self, v: u32) {
        self.broadcast_group = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CP2P_Voice {
    const NAME: &'static str = "CP2P_Voice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.audio)?;
                },
                16 => {
                    self.broadcast_group = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audio.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.broadcast_group {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.audio.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.broadcast_group {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CP2P_Voice {
        CP2P_Voice::new()
    }

    fn clear(&mut self) {
        self.audio.clear();
        self.broadcast_group = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CP2P_Voice {
        static instance: CP2P_Voice = CP2P_Voice {
            audio: ::steam_vent_proto_common::protobuf::MessageField::none(),
            broadcast_group: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CP2P_Voice`
pub mod cp2p_voice {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CP2P_Voice.Handler_Flags)
    pub enum Handler_Flags {
        // @@protoc_insertion_point(enum_value:CP2P_Voice.Handler_Flags.Played_Audio)
        Played_Audio = 1,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Handler_Flags {
        const NAME: &'static str = "Handler_Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Handler_Flags> {
            match value {
                1 => ::std::option::Option::Some(Handler_Flags::Played_Audio),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Handler_Flags> {
            match str {
                "Played_Audio" => ::std::option::Option::Some(Handler_Flags::Played_Audio),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Handler_Flags] = &[
            Handler_Flags::Played_Audio,
        ];
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Handler_Flags {
        fn default() -> Self {
            Handler_Flags::Played_Audio
        }
    }

}

// @@protoc_insertion_point(message:CP2P_Ping)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CP2P_Ping {
    // message fields
    // @@protoc_insertion_point(field:CP2P_Ping.send_time)
    pub send_time: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CP2P_Ping.is_reply)
    pub is_reply: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CP2P_Ping.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CP2P_Ping {
    fn default() -> &'a CP2P_Ping {
        <CP2P_Ping as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CP2P_Ping {
    pub fn new() -> CP2P_Ping {
        ::std::default::Default::default()
    }

    // required uint64 send_time = 1;

    pub fn send_time(&self) -> u64 {
        self.send_time.unwrap_or(0)
    }

    pub fn clear_send_time(&mut self) {
        self.send_time = ::std::option::Option::None;
    }

    pub fn has_send_time(&self) -> bool {
        self.send_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_time(&mut self, v: u64) {
        self.send_time = ::std::option::Option::Some(v);
    }

    // required bool is_reply = 2;

    pub fn is_reply(&self) -> bool {
        self.is_reply.unwrap_or(false)
    }

    pub fn clear_is_reply(&mut self) {
        self.is_reply = ::std::option::Option::None;
    }

    pub fn has_is_reply(&self) -> bool {
        self.is_reply.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_reply(&mut self, v: bool) {
        self.is_reply = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CP2P_Ping {
    const NAME: &'static str = "CP2P_Ping";

    fn is_initialized(&self) -> bool {
        if self.send_time.is_none() {
            return false;
        }
        if self.is_reply.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.send_time = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.is_reply = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.send_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.is_reply {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.send_time {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.is_reply {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CP2P_Ping {
        CP2P_Ping::new()
    }

    fn clear(&mut self) {
        self.send_time = ::std::option::Option::None;
        self.is_reply = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CP2P_Ping {
        static instance: CP2P_Ping = CP2P_Ping {
            send_time: ::std::option::Option::None,
            is_reply: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CP2P_VRAvatarPosition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CP2P_VRAvatarPosition {
    // message fields
    // @@protoc_insertion_point(field:CP2P_VRAvatarPosition.body_parts)
    pub body_parts: ::std::vec::Vec<cp2p_vravatar_position::COrientation>,
    // @@protoc_insertion_point(field:CP2P_VRAvatarPosition.hat_id)
    pub hat_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CP2P_VRAvatarPosition.scene_id)
    pub scene_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CP2P_VRAvatarPosition.world_scale)
    pub world_scale: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CP2P_VRAvatarPosition.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CP2P_VRAvatarPosition {
    fn default() -> &'a CP2P_VRAvatarPosition {
        <CP2P_VRAvatarPosition as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CP2P_VRAvatarPosition {
    pub fn new() -> CP2P_VRAvatarPosition {
        ::std::default::Default::default()
    }

    // optional int32 hat_id = 2;

    pub fn hat_id(&self) -> i32 {
        self.hat_id.unwrap_or(0)
    }

    pub fn clear_hat_id(&mut self) {
        self.hat_id = ::std::option::Option::None;
    }

    pub fn has_hat_id(&self) -> bool {
        self.hat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hat_id(&mut self, v: i32) {
        self.hat_id = ::std::option::Option::Some(v);
    }

    // optional int32 scene_id = 3;

    pub fn scene_id(&self) -> i32 {
        self.scene_id.unwrap_or(0)
    }

    pub fn clear_scene_id(&mut self) {
        self.scene_id = ::std::option::Option::None;
    }

    pub fn has_scene_id(&self) -> bool {
        self.scene_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scene_id(&mut self, v: i32) {
        self.scene_id = ::std::option::Option::Some(v);
    }

    // optional int32 world_scale = 4;

    pub fn world_scale(&self) -> i32 {
        self.world_scale.unwrap_or(0)
    }

    pub fn clear_world_scale(&mut self) {
        self.world_scale = ::std::option::Option::None;
    }

    pub fn has_world_scale(&self) -> bool {
        self.world_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_world_scale(&mut self, v: i32) {
        self.world_scale = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CP2P_VRAvatarPosition {
    const NAME: &'static str = "CP2P_VRAvatarPosition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body_parts.push(is.read_message()?);
                },
                16 => {
                    self.hat_id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.scene_id = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.world_scale = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.body_parts {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.hat_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.scene_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.world_scale {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.body_parts {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.hat_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.scene_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.world_scale {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CP2P_VRAvatarPosition {
        CP2P_VRAvatarPosition::new()
    }

    fn clear(&mut self) {
        self.body_parts.clear();
        self.hat_id = ::std::option::Option::None;
        self.scene_id = ::std::option::Option::None;
        self.world_scale = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CP2P_VRAvatarPosition {
        static instance: CP2P_VRAvatarPosition = CP2P_VRAvatarPosition {
            body_parts: ::std::vec::Vec::new(),
            hat_id: ::std::option::Option::None,
            scene_id: ::std::option::Option::None,
            world_scale: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CP2P_VRAvatarPosition`
pub mod cp2p_vravatar_position {
    // @@protoc_insertion_point(message:CP2P_VRAvatarPosition.COrientation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct COrientation {
        // message fields
        // @@protoc_insertion_point(field:CP2P_VRAvatarPosition.COrientation.pos)
        pub pos: ::steam_vent_proto_common::protobuf::MessageField<super::super::networkbasetypes::CMsgVector>,
        // @@protoc_insertion_point(field:CP2P_VRAvatarPosition.COrientation.ang)
        pub ang: ::steam_vent_proto_common::protobuf::MessageField<super::super::networkbasetypes::CMsgQAngle>,
        // special fields
        // @@protoc_insertion_point(special_field:CP2P_VRAvatarPosition.COrientation.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a COrientation {
        fn default() -> &'a COrientation {
            <COrientation as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl COrientation {
        pub fn new() -> COrientation {
            ::std::default::Default::default()
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for COrientation {
        const NAME: &'static str = "COrientation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.ang)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.pos.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.ang.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.pos.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.ang.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> COrientation {
            COrientation::new()
        }

        fn clear(&mut self) {
            self.pos.clear();
            self.ang.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static COrientation {
            static instance: COrientation = COrientation {
                pos: ::steam_vent_proto_common::protobuf::MessageField::none(),
                ang: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CP2P_WatchSynchronization)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CP2P_WatchSynchronization {
    // message fields
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.demo_tick)
    pub demo_tick: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.paused)
    pub paused: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.tv_listen_voice_indices)
    pub tv_listen_voice_indices: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.dota_spectator_mode)
    pub dota_spectator_mode: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.dota_spectator_watching_broadcaster)
    pub dota_spectator_watching_broadcaster: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.dota_spectator_hero_index)
    pub dota_spectator_hero_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.dota_spectator_autospeed)
    pub dota_spectator_autospeed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CP2P_WatchSynchronization.dota_replay_speed)
    pub dota_replay_speed: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CP2P_WatchSynchronization.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CP2P_WatchSynchronization {
    fn default() -> &'a CP2P_WatchSynchronization {
        <CP2P_WatchSynchronization as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CP2P_WatchSynchronization {
    pub fn new() -> CP2P_WatchSynchronization {
        ::std::default::Default::default()
    }

    // optional int32 demo_tick = 1;

    pub fn demo_tick(&self) -> i32 {
        self.demo_tick.unwrap_or(0)
    }

    pub fn clear_demo_tick(&mut self) {
        self.demo_tick = ::std::option::Option::None;
    }

    pub fn has_demo_tick(&self) -> bool {
        self.demo_tick.is_some()
    }

    // Param is passed by value, moved
    pub fn set_demo_tick(&mut self, v: i32) {
        self.demo_tick = ::std::option::Option::Some(v);
    }

    // optional bool paused = 2;

    pub fn paused(&self) -> bool {
        self.paused.unwrap_or(false)
    }

    pub fn clear_paused(&mut self) {
        self.paused = ::std::option::Option::None;
    }

    pub fn has_paused(&self) -> bool {
        self.paused.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paused(&mut self, v: bool) {
        self.paused = ::std::option::Option::Some(v);
    }

    // optional uint64 tv_listen_voice_indices = 3;

    pub fn tv_listen_voice_indices(&self) -> u64 {
        self.tv_listen_voice_indices.unwrap_or(0)
    }

    pub fn clear_tv_listen_voice_indices(&mut self) {
        self.tv_listen_voice_indices = ::std::option::Option::None;
    }

    pub fn has_tv_listen_voice_indices(&self) -> bool {
        self.tv_listen_voice_indices.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tv_listen_voice_indices(&mut self, v: u64) {
        self.tv_listen_voice_indices = ::std::option::Option::Some(v);
    }

    // optional int32 dota_spectator_mode = 4;

    pub fn dota_spectator_mode(&self) -> i32 {
        self.dota_spectator_mode.unwrap_or(0)
    }

    pub fn clear_dota_spectator_mode(&mut self) {
        self.dota_spectator_mode = ::std::option::Option::None;
    }

    pub fn has_dota_spectator_mode(&self) -> bool {
        self.dota_spectator_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dota_spectator_mode(&mut self, v: i32) {
        self.dota_spectator_mode = ::std::option::Option::Some(v);
    }

    // optional bool dota_spectator_watching_broadcaster = 5;

    pub fn dota_spectator_watching_broadcaster(&self) -> bool {
        self.dota_spectator_watching_broadcaster.unwrap_or(false)
    }

    pub fn clear_dota_spectator_watching_broadcaster(&mut self) {
        self.dota_spectator_watching_broadcaster = ::std::option::Option::None;
    }

    pub fn has_dota_spectator_watching_broadcaster(&self) -> bool {
        self.dota_spectator_watching_broadcaster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dota_spectator_watching_broadcaster(&mut self, v: bool) {
        self.dota_spectator_watching_broadcaster = ::std::option::Option::Some(v);
    }

    // optional int32 dota_spectator_hero_index = 6;

    pub fn dota_spectator_hero_index(&self) -> i32 {
        self.dota_spectator_hero_index.unwrap_or(0)
    }

    pub fn clear_dota_spectator_hero_index(&mut self) {
        self.dota_spectator_hero_index = ::std::option::Option::None;
    }

    pub fn has_dota_spectator_hero_index(&self) -> bool {
        self.dota_spectator_hero_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dota_spectator_hero_index(&mut self, v: i32) {
        self.dota_spectator_hero_index = ::std::option::Option::Some(v);
    }

    // optional int32 dota_spectator_autospeed = 7;

    pub fn dota_spectator_autospeed(&self) -> i32 {
        self.dota_spectator_autospeed.unwrap_or(0)
    }

    pub fn clear_dota_spectator_autospeed(&mut self) {
        self.dota_spectator_autospeed = ::std::option::Option::None;
    }

    pub fn has_dota_spectator_autospeed(&self) -> bool {
        self.dota_spectator_autospeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dota_spectator_autospeed(&mut self, v: i32) {
        self.dota_spectator_autospeed = ::std::option::Option::Some(v);
    }

    // optional int32 dota_replay_speed = 8;

    pub fn dota_replay_speed(&self) -> i32 {
        self.dota_replay_speed.unwrap_or(0)
    }

    pub fn clear_dota_replay_speed(&mut self) {
        self.dota_replay_speed = ::std::option::Option::None;
    }

    pub fn has_dota_replay_speed(&self) -> bool {
        self.dota_replay_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dota_replay_speed(&mut self, v: i32) {
        self.dota_replay_speed = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CP2P_WatchSynchronization {
    const NAME: &'static str = "CP2P_WatchSynchronization";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.demo_tick = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.paused = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.tv_listen_voice_indices = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.dota_spectator_mode = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.dota_spectator_watching_broadcaster = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.dota_spectator_hero_index = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.dota_spectator_autospeed = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.dota_replay_speed = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.demo_tick {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.paused {
            my_size += 1 + 1;
        }
        if let Some(v) = self.tv_listen_voice_indices {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.dota_spectator_mode {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.dota_spectator_watching_broadcaster {
            my_size += 1 + 1;
        }
        if let Some(v) = self.dota_spectator_hero_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.dota_spectator_autospeed {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.dota_replay_speed {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(8, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.demo_tick {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.paused {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.tv_listen_voice_indices {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.dota_spectator_mode {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.dota_spectator_watching_broadcaster {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.dota_spectator_hero_index {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.dota_spectator_autospeed {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.dota_replay_speed {
            os.write_int32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CP2P_WatchSynchronization {
        CP2P_WatchSynchronization::new()
    }

    fn clear(&mut self) {
        self.demo_tick = ::std::option::Option::None;
        self.paused = ::std::option::Option::None;
        self.tv_listen_voice_indices = ::std::option::Option::None;
        self.dota_spectator_mode = ::std::option::Option::None;
        self.dota_spectator_watching_broadcaster = ::std::option::Option::None;
        self.dota_spectator_hero_index = ::std::option::Option::None;
        self.dota_spectator_autospeed = ::std::option::Option::None;
        self.dota_replay_speed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CP2P_WatchSynchronization {
        static instance: CP2P_WatchSynchronization = CP2P_WatchSynchronization {
            demo_tick: ::std::option::Option::None,
            paused: ::std::option::Option::None,
            tv_listen_voice_indices: ::std::option::Option::None,
            dota_spectator_mode: ::std::option::Option::None,
            dota_spectator_watching_broadcaster: ::std::option::Option::None,
            dota_spectator_hero_index: ::std::option::Option::None,
            dota_spectator_autospeed: ::std::option::Option::None,
            dota_replay_speed: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:P2P_Messages)
pub enum P2P_Messages {
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_TextMessage)
    p2p_TextMessage = 256,
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_Voice)
    p2p_Voice = 257,
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_Ping)
    p2p_Ping = 258,
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_VRAvatarPosition)
    p2p_VRAvatarPosition = 259,
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_WatchSynchronization)
    p2p_WatchSynchronization = 260,
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_FightingGame_GameData)
    p2p_FightingGame_GameData = 261,
    // @@protoc_insertion_point(enum_value:P2P_Messages.p2p_FightingGame_Connection)
    p2p_FightingGame_Connection = 262,
}

impl ::steam_vent_proto_common::protobuf::Enum for P2P_Messages {
    const NAME: &'static str = "P2P_Messages";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<P2P_Messages> {
        match value {
            256 => ::std::option::Option::Some(P2P_Messages::p2p_TextMessage),
            257 => ::std::option::Option::Some(P2P_Messages::p2p_Voice),
            258 => ::std::option::Option::Some(P2P_Messages::p2p_Ping),
            259 => ::std::option::Option::Some(P2P_Messages::p2p_VRAvatarPosition),
            260 => ::std::option::Option::Some(P2P_Messages::p2p_WatchSynchronization),
            261 => ::std::option::Option::Some(P2P_Messages::p2p_FightingGame_GameData),
            262 => ::std::option::Option::Some(P2P_Messages::p2p_FightingGame_Connection),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<P2P_Messages> {
        match str {
            "p2p_TextMessage" => ::std::option::Option::Some(P2P_Messages::p2p_TextMessage),
            "p2p_Voice" => ::std::option::Option::Some(P2P_Messages::p2p_Voice),
            "p2p_Ping" => ::std::option::Option::Some(P2P_Messages::p2p_Ping),
            "p2p_VRAvatarPosition" => ::std::option::Option::Some(P2P_Messages::p2p_VRAvatarPosition),
            "p2p_WatchSynchronization" => ::std::option::Option::Some(P2P_Messages::p2p_WatchSynchronization),
            "p2p_FightingGame_GameData" => ::std::option::Option::Some(P2P_Messages::p2p_FightingGame_GameData),
            "p2p_FightingGame_Connection" => ::std::option::Option::Some(P2P_Messages::p2p_FightingGame_Connection),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [P2P_Messages] = &[
        P2P_Messages::p2p_TextMessage,
        P2P_Messages::p2p_Voice,
        P2P_Messages::p2p_Ping,
        P2P_Messages::p2p_VRAvatarPosition,
        P2P_Messages::p2p_WatchSynchronization,
        P2P_Messages::p2p_FightingGame_GameData,
        P2P_Messages::p2p_FightingGame_Connection,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for P2P_Messages {
    fn default() -> Self {
        P2P_Messages::p2p_TextMessage
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::netmessages::*;
#[allow(unused_imports)]
use crate::networkbasetypes::*;
impl ::steam_vent_proto_common::RpcMessage for CP2P_TextMessage {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CSteam_Voice_Encoding {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CP2P_Voice {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CP2P_Ping {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CP2P_VRAvatarPosition {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CP2P_WatchSynchronization {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
