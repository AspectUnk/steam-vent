// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_usercmd.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CDota2UserCmdPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDota2UserCmdPB {
    // message fields
    // @@protoc_insertion_point(field:CDota2UserCmdPB.base)
    pub base: ::steam_vent_proto_common::protobuf::MessageField<super::usercmd::CBaseUserCmdPB>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.spectator_query_unit_entindex)
    pub spectator_query_unit_entindex: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.crosshairtrace)
    pub crosshairtrace: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.cameraposition_x)
    pub cameraposition_x: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.cameraposition_y)
    pub cameraposition_y: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.clickbehavior)
    pub clickbehavior: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.statspanel)
    pub statspanel: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.shoppanel)
    pub shoppanel: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.stats_dropdown)
    pub stats_dropdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDota2UserCmdPB.stats_dropdown_sort)
    pub stats_dropdown_sort: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDota2UserCmdPB.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDota2UserCmdPB {
    fn default() -> &'a CDota2UserCmdPB {
        <CDota2UserCmdPB as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CDota2UserCmdPB {
    pub fn new() -> CDota2UserCmdPB {
        ::std::default::Default::default()
    }

    // optional int32 spectator_query_unit_entindex = 2;

    pub fn spectator_query_unit_entindex(&self) -> i32 {
        self.spectator_query_unit_entindex.unwrap_or(0)
    }

    pub fn clear_spectator_query_unit_entindex(&mut self) {
        self.spectator_query_unit_entindex = ::std::option::Option::None;
    }

    pub fn has_spectator_query_unit_entindex(&self) -> bool {
        self.spectator_query_unit_entindex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spectator_query_unit_entindex(&mut self, v: i32) {
        self.spectator_query_unit_entindex = ::std::option::Option::Some(v);
    }

    // optional int32 cameraposition_x = 4;

    pub fn cameraposition_x(&self) -> i32 {
        self.cameraposition_x.unwrap_or(0)
    }

    pub fn clear_cameraposition_x(&mut self) {
        self.cameraposition_x = ::std::option::Option::None;
    }

    pub fn has_cameraposition_x(&self) -> bool {
        self.cameraposition_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cameraposition_x(&mut self, v: i32) {
        self.cameraposition_x = ::std::option::Option::Some(v);
    }

    // optional int32 cameraposition_y = 5;

    pub fn cameraposition_y(&self) -> i32 {
        self.cameraposition_y.unwrap_or(0)
    }

    pub fn clear_cameraposition_y(&mut self) {
        self.cameraposition_y = ::std::option::Option::None;
    }

    pub fn has_cameraposition_y(&self) -> bool {
        self.cameraposition_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cameraposition_y(&mut self, v: i32) {
        self.cameraposition_y = ::std::option::Option::Some(v);
    }

    // optional uint32 clickbehavior = 6;

    pub fn clickbehavior(&self) -> u32 {
        self.clickbehavior.unwrap_or(0)
    }

    pub fn clear_clickbehavior(&mut self) {
        self.clickbehavior = ::std::option::Option::None;
    }

    pub fn has_clickbehavior(&self) -> bool {
        self.clickbehavior.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clickbehavior(&mut self, v: u32) {
        self.clickbehavior = ::std::option::Option::Some(v);
    }

    // optional uint32 statspanel = 7;

    pub fn statspanel(&self) -> u32 {
        self.statspanel.unwrap_or(0)
    }

    pub fn clear_statspanel(&mut self) {
        self.statspanel = ::std::option::Option::None;
    }

    pub fn has_statspanel(&self) -> bool {
        self.statspanel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statspanel(&mut self, v: u32) {
        self.statspanel = ::std::option::Option::Some(v);
    }

    // optional uint32 shoppanel = 8;

    pub fn shoppanel(&self) -> u32 {
        self.shoppanel.unwrap_or(0)
    }

    pub fn clear_shoppanel(&mut self) {
        self.shoppanel = ::std::option::Option::None;
    }

    pub fn has_shoppanel(&self) -> bool {
        self.shoppanel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shoppanel(&mut self, v: u32) {
        self.shoppanel = ::std::option::Option::Some(v);
    }

    // optional uint32 stats_dropdown = 9;

    pub fn stats_dropdown(&self) -> u32 {
        self.stats_dropdown.unwrap_or(0)
    }

    pub fn clear_stats_dropdown(&mut self) {
        self.stats_dropdown = ::std::option::Option::None;
    }

    pub fn has_stats_dropdown(&self) -> bool {
        self.stats_dropdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_dropdown(&mut self, v: u32) {
        self.stats_dropdown = ::std::option::Option::Some(v);
    }

    // optional uint32 stats_dropdown_sort = 10;

    pub fn stats_dropdown_sort(&self) -> u32 {
        self.stats_dropdown_sort.unwrap_or(0)
    }

    pub fn clear_stats_dropdown_sort(&mut self) {
        self.stats_dropdown_sort = ::std::option::Option::None;
    }

    pub fn has_stats_dropdown_sort(&self) -> bool {
        self.stats_dropdown_sort.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_dropdown_sort(&mut self, v: u32) {
        self.stats_dropdown_sort = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CDota2UserCmdPB {
    const NAME: &'static str = "CDota2UserCmdPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.base)?;
                },
                16 => {
                    self.spectator_query_unit_entindex = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.crosshairtrace)?;
                },
                32 => {
                    self.cameraposition_x = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.cameraposition_y = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.clickbehavior = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.statspanel = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.shoppanel = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.stats_dropdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.stats_dropdown_sort = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spectator_query_unit_entindex {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.crosshairtrace.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cameraposition_x {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.cameraposition_y {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.clickbehavior {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.statspanel {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.shoppanel {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.stats_dropdown {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.stats_dropdown_sort {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.base.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spectator_query_unit_entindex {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.crosshairtrace.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.cameraposition_x {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.cameraposition_y {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.clickbehavior {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.statspanel {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.shoppanel {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.stats_dropdown {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.stats_dropdown_sort {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDota2UserCmdPB {
        CDota2UserCmdPB::new()
    }

    fn clear(&mut self) {
        self.base.clear();
        self.spectator_query_unit_entindex = ::std::option::Option::None;
        self.crosshairtrace.clear();
        self.cameraposition_x = ::std::option::Option::None;
        self.cameraposition_y = ::std::option::Option::None;
        self.clickbehavior = ::std::option::Option::None;
        self.statspanel = ::std::option::Option::None;
        self.shoppanel = ::std::option::Option::None;
        self.stats_dropdown = ::std::option::Option::None;
        self.stats_dropdown_sort = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDota2UserCmdPB {
        static instance: CDota2UserCmdPB = CDota2UserCmdPB {
            base: ::steam_vent_proto_common::protobuf::MessageField::none(),
            spectator_query_unit_entindex: ::std::option::Option::None,
            crosshairtrace: ::steam_vent_proto_common::protobuf::MessageField::none(),
            cameraposition_x: ::std::option::Option::None,
            cameraposition_y: ::std::option::Option::None,
            clickbehavior: ::std::option::Option::None,
            statspanel: ::std::option::Option::None,
            shoppanel: ::std::option::Option::None,
            stats_dropdown: ::std::option::Option::None,
            stats_dropdown_sort: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::networkbasetypes::*;
#[allow(unused_imports)]
use crate::usercmd::*;
impl ::steam_vent_proto_common::RpcMessage for CDota2UserCmdPB {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
