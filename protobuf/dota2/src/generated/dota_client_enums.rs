// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_client_enums.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETournamentTemplate)
pub enum ETournamentTemplate {
    // @@protoc_insertion_point(enum_value:ETournamentTemplate.k_ETournamentTemplate_None)
    k_ETournamentTemplate_None = 0,
    // @@protoc_insertion_point(enum_value:ETournamentTemplate.k_ETournamentTemplate_AutomatedWin3)
    k_ETournamentTemplate_AutomatedWin3 = 1,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETournamentTemplate {
    const NAME: &'static str = "ETournamentTemplate";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentTemplate> {
        match value {
            0 => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_None),
            1 => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentTemplate> {
        match str {
            "k_ETournamentTemplate_None" => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_None),
            "k_ETournamentTemplate_AutomatedWin3" => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentTemplate] = &[
        ETournamentTemplate::k_ETournamentTemplate_None,
        ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3,
    ];
}

impl ::std::default::Default for ETournamentTemplate {
    fn default() -> Self {
        ETournamentTemplate::k_ETournamentTemplate_None
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETournamentGameState)
pub enum ETournamentGameState {
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_Unknown)
    k_ETournamentGameState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_Canceled)
    k_ETournamentGameState_Canceled = 1,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_Scheduled)
    k_ETournamentGameState_Scheduled = 2,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_Active)
    k_ETournamentGameState_Active = 3,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_RadVictory)
    k_ETournamentGameState_RadVictory = 20,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_DireVictory)
    k_ETournamentGameState_DireVictory = 21,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_RadVictoryByForfeit)
    k_ETournamentGameState_RadVictoryByForfeit = 22,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_DireVictoryByForfeit)
    k_ETournamentGameState_DireVictoryByForfeit = 23,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_ServerFailure)
    k_ETournamentGameState_ServerFailure = 40,
    // @@protoc_insertion_point(enum_value:ETournamentGameState.k_ETournamentGameState_NotNeeded)
    k_ETournamentGameState_NotNeeded = 41,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETournamentGameState {
    const NAME: &'static str = "ETournamentGameState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentGameState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Unknown),
            1 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Canceled),
            2 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Scheduled),
            3 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Active),
            20 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictory),
            21 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictory),
            22 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit),
            23 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit),
            40 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_ServerFailure),
            41 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_NotNeeded),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentGameState> {
        match str {
            "k_ETournamentGameState_Unknown" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Unknown),
            "k_ETournamentGameState_Canceled" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Canceled),
            "k_ETournamentGameState_Scheduled" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Scheduled),
            "k_ETournamentGameState_Active" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Active),
            "k_ETournamentGameState_RadVictory" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictory),
            "k_ETournamentGameState_DireVictory" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictory),
            "k_ETournamentGameState_RadVictoryByForfeit" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit),
            "k_ETournamentGameState_DireVictoryByForfeit" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit),
            "k_ETournamentGameState_ServerFailure" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_ServerFailure),
            "k_ETournamentGameState_NotNeeded" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_NotNeeded),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentGameState] = &[
        ETournamentGameState::k_ETournamentGameState_Unknown,
        ETournamentGameState::k_ETournamentGameState_Canceled,
        ETournamentGameState::k_ETournamentGameState_Scheduled,
        ETournamentGameState::k_ETournamentGameState_Active,
        ETournamentGameState::k_ETournamentGameState_RadVictory,
        ETournamentGameState::k_ETournamentGameState_DireVictory,
        ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit,
        ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit,
        ETournamentGameState::k_ETournamentGameState_ServerFailure,
        ETournamentGameState::k_ETournamentGameState_NotNeeded,
    ];
}

impl ::std::default::Default for ETournamentGameState {
    fn default() -> Self {
        ETournamentGameState::k_ETournamentGameState_Unknown
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETournamentTeamState)
pub enum ETournamentTeamState {
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Unknown)
    k_ETournamentTeamState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Node1)
    k_ETournamentTeamState_Node1 = 1,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_NodeMax)
    k_ETournamentTeamState_NodeMax = 1024,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Eliminated)
    k_ETournamentTeamState_Eliminated = 14003,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Forfeited)
    k_ETournamentTeamState_Forfeited = 14004,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished1st)
    k_ETournamentTeamState_Finished1st = 15001,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished2nd)
    k_ETournamentTeamState_Finished2nd = 15002,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished3rd)
    k_ETournamentTeamState_Finished3rd = 15003,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished4th)
    k_ETournamentTeamState_Finished4th = 15004,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished5th)
    k_ETournamentTeamState_Finished5th = 15005,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished6th)
    k_ETournamentTeamState_Finished6th = 15006,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished7th)
    k_ETournamentTeamState_Finished7th = 15007,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished8th)
    k_ETournamentTeamState_Finished8th = 15008,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished9th)
    k_ETournamentTeamState_Finished9th = 15009,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished10th)
    k_ETournamentTeamState_Finished10th = 15010,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished11th)
    k_ETournamentTeamState_Finished11th = 15011,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished12th)
    k_ETournamentTeamState_Finished12th = 15012,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished13th)
    k_ETournamentTeamState_Finished13th = 15013,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished14th)
    k_ETournamentTeamState_Finished14th = 15014,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished15th)
    k_ETournamentTeamState_Finished15th = 15015,
    // @@protoc_insertion_point(enum_value:ETournamentTeamState.k_ETournamentTeamState_Finished16th)
    k_ETournamentTeamState_Finished16th = 15016,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETournamentTeamState {
    const NAME: &'static str = "ETournamentTeamState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentTeamState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Unknown),
            1 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Node1),
            1024 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_NodeMax),
            14003 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Eliminated),
            14004 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Forfeited),
            15001 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished1st),
            15002 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished2nd),
            15003 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished3rd),
            15004 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished4th),
            15005 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished5th),
            15006 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished6th),
            15007 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished7th),
            15008 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished8th),
            15009 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished9th),
            15010 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished10th),
            15011 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished11th),
            15012 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished12th),
            15013 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished13th),
            15014 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished14th),
            15015 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished15th),
            15016 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished16th),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentTeamState> {
        match str {
            "k_ETournamentTeamState_Unknown" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Unknown),
            "k_ETournamentTeamState_Node1" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Node1),
            "k_ETournamentTeamState_NodeMax" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_NodeMax),
            "k_ETournamentTeamState_Eliminated" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Eliminated),
            "k_ETournamentTeamState_Forfeited" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Forfeited),
            "k_ETournamentTeamState_Finished1st" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished1st),
            "k_ETournamentTeamState_Finished2nd" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished2nd),
            "k_ETournamentTeamState_Finished3rd" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished3rd),
            "k_ETournamentTeamState_Finished4th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished4th),
            "k_ETournamentTeamState_Finished5th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished5th),
            "k_ETournamentTeamState_Finished6th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished6th),
            "k_ETournamentTeamState_Finished7th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished7th),
            "k_ETournamentTeamState_Finished8th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished8th),
            "k_ETournamentTeamState_Finished9th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished9th),
            "k_ETournamentTeamState_Finished10th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished10th),
            "k_ETournamentTeamState_Finished11th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished11th),
            "k_ETournamentTeamState_Finished12th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished12th),
            "k_ETournamentTeamState_Finished13th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished13th),
            "k_ETournamentTeamState_Finished14th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished14th),
            "k_ETournamentTeamState_Finished15th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished15th),
            "k_ETournamentTeamState_Finished16th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished16th),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentTeamState] = &[
        ETournamentTeamState::k_ETournamentTeamState_Unknown,
        ETournamentTeamState::k_ETournamentTeamState_Node1,
        ETournamentTeamState::k_ETournamentTeamState_NodeMax,
        ETournamentTeamState::k_ETournamentTeamState_Eliminated,
        ETournamentTeamState::k_ETournamentTeamState_Forfeited,
        ETournamentTeamState::k_ETournamentTeamState_Finished1st,
        ETournamentTeamState::k_ETournamentTeamState_Finished2nd,
        ETournamentTeamState::k_ETournamentTeamState_Finished3rd,
        ETournamentTeamState::k_ETournamentTeamState_Finished4th,
        ETournamentTeamState::k_ETournamentTeamState_Finished5th,
        ETournamentTeamState::k_ETournamentTeamState_Finished6th,
        ETournamentTeamState::k_ETournamentTeamState_Finished7th,
        ETournamentTeamState::k_ETournamentTeamState_Finished8th,
        ETournamentTeamState::k_ETournamentTeamState_Finished9th,
        ETournamentTeamState::k_ETournamentTeamState_Finished10th,
        ETournamentTeamState::k_ETournamentTeamState_Finished11th,
        ETournamentTeamState::k_ETournamentTeamState_Finished12th,
        ETournamentTeamState::k_ETournamentTeamState_Finished13th,
        ETournamentTeamState::k_ETournamentTeamState_Finished14th,
        ETournamentTeamState::k_ETournamentTeamState_Finished15th,
        ETournamentTeamState::k_ETournamentTeamState_Finished16th,
    ];
}

impl ::std::default::Default for ETournamentTeamState {
    fn default() -> Self {
        ETournamentTeamState::k_ETournamentTeamState_Unknown
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETournamentState)
pub enum ETournamentState {
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_Unknown)
    k_ETournamentState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_CanceledByAdmin)
    k_ETournamentState_CanceledByAdmin = 1,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_Completed)
    k_ETournamentState_Completed = 2,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_Merged)
    k_ETournamentState_Merged = 3,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_ServerFailure)
    k_ETournamentState_ServerFailure = 4,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_TeamAbandoned)
    k_ETournamentState_TeamAbandoned = 5,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_TeamTimeoutForfeit)
    k_ETournamentState_TeamTimeoutForfeit = 6,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_TeamTimeoutRefund)
    k_ETournamentState_TeamTimeoutRefund = 7,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_ServerFailureGrantedVictory)
    k_ETournamentState_ServerFailureGrantedVictory = 8,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_TeamTimeoutGrantedVictory)
    k_ETournamentState_TeamTimeoutGrantedVictory = 9,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_InProgress)
    k_ETournamentState_InProgress = 100,
    // @@protoc_insertion_point(enum_value:ETournamentState.k_ETournamentState_WaitingToMerge)
    k_ETournamentState_WaitingToMerge = 101,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETournamentState {
    const NAME: &'static str = "ETournamentState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Unknown),
            1 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_CanceledByAdmin),
            2 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Completed),
            3 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Merged),
            4 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailure),
            5 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamAbandoned),
            6 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutForfeit),
            7 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutRefund),
            8 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailureGrantedVictory),
            9 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory),
            100 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_InProgress),
            101 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_WaitingToMerge),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentState> {
        match str {
            "k_ETournamentState_Unknown" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Unknown),
            "k_ETournamentState_CanceledByAdmin" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_CanceledByAdmin),
            "k_ETournamentState_Completed" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Completed),
            "k_ETournamentState_Merged" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Merged),
            "k_ETournamentState_ServerFailure" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailure),
            "k_ETournamentState_TeamAbandoned" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamAbandoned),
            "k_ETournamentState_TeamTimeoutForfeit" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutForfeit),
            "k_ETournamentState_TeamTimeoutRefund" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutRefund),
            "k_ETournamentState_ServerFailureGrantedVictory" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailureGrantedVictory),
            "k_ETournamentState_TeamTimeoutGrantedVictory" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory),
            "k_ETournamentState_InProgress" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_InProgress),
            "k_ETournamentState_WaitingToMerge" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_WaitingToMerge),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentState] = &[
        ETournamentState::k_ETournamentState_Unknown,
        ETournamentState::k_ETournamentState_CanceledByAdmin,
        ETournamentState::k_ETournamentState_Completed,
        ETournamentState::k_ETournamentState_Merged,
        ETournamentState::k_ETournamentState_ServerFailure,
        ETournamentState::k_ETournamentState_TeamAbandoned,
        ETournamentState::k_ETournamentState_TeamTimeoutForfeit,
        ETournamentState::k_ETournamentState_TeamTimeoutRefund,
        ETournamentState::k_ETournamentState_ServerFailureGrantedVictory,
        ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory,
        ETournamentState::k_ETournamentState_InProgress,
        ETournamentState::k_ETournamentState_WaitingToMerge,
    ];
}

impl ::std::default::Default for ETournamentState {
    fn default() -> Self {
        ETournamentState::k_ETournamentState_Unknown
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETournamentNodeState)
pub enum ETournamentNodeState {
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_Unknown)
    k_ETournamentNodeState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_Canceled)
    k_ETournamentNodeState_Canceled = 1,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_TeamsNotYetAssigned)
    k_ETournamentNodeState_TeamsNotYetAssigned = 2,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_InBetweenGames)
    k_ETournamentNodeState_InBetweenGames = 3,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_GameInProgress)
    k_ETournamentNodeState_GameInProgress = 4,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_A_Won)
    k_ETournamentNodeState_A_Won = 5,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_B_Won)
    k_ETournamentNodeState_B_Won = 6,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_A_WonByForfeit)
    k_ETournamentNodeState_A_WonByForfeit = 7,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_B_WonByForfeit)
    k_ETournamentNodeState_B_WonByForfeit = 8,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_A_Bye)
    k_ETournamentNodeState_A_Bye = 9,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_A_Abandoned)
    k_ETournamentNodeState_A_Abandoned = 10,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_ServerFailure)
    k_ETournamentNodeState_ServerFailure = 11,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_A_TimeoutForfeit)
    k_ETournamentNodeState_A_TimeoutForfeit = 12,
    // @@protoc_insertion_point(enum_value:ETournamentNodeState.k_ETournamentNodeState_A_TimeoutRefund)
    k_ETournamentNodeState_A_TimeoutRefund = 13,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETournamentNodeState {
    const NAME: &'static str = "ETournamentNodeState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentNodeState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Unknown),
            1 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Canceled),
            2 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned),
            3 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_InBetweenGames),
            4 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_GameInProgress),
            5 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Won),
            6 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_Won),
            7 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit),
            8 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit),
            9 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Bye),
            10 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Abandoned),
            11 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_ServerFailure),
            12 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit),
            13 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentNodeState> {
        match str {
            "k_ETournamentNodeState_Unknown" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Unknown),
            "k_ETournamentNodeState_Canceled" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Canceled),
            "k_ETournamentNodeState_TeamsNotYetAssigned" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned),
            "k_ETournamentNodeState_InBetweenGames" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_InBetweenGames),
            "k_ETournamentNodeState_GameInProgress" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_GameInProgress),
            "k_ETournamentNodeState_A_Won" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Won),
            "k_ETournamentNodeState_B_Won" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_Won),
            "k_ETournamentNodeState_A_WonByForfeit" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit),
            "k_ETournamentNodeState_B_WonByForfeit" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit),
            "k_ETournamentNodeState_A_Bye" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Bye),
            "k_ETournamentNodeState_A_Abandoned" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Abandoned),
            "k_ETournamentNodeState_ServerFailure" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_ServerFailure),
            "k_ETournamentNodeState_A_TimeoutForfeit" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit),
            "k_ETournamentNodeState_A_TimeoutRefund" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentNodeState] = &[
        ETournamentNodeState::k_ETournamentNodeState_Unknown,
        ETournamentNodeState::k_ETournamentNodeState_Canceled,
        ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned,
        ETournamentNodeState::k_ETournamentNodeState_InBetweenGames,
        ETournamentNodeState::k_ETournamentNodeState_GameInProgress,
        ETournamentNodeState::k_ETournamentNodeState_A_Won,
        ETournamentNodeState::k_ETournamentNodeState_B_Won,
        ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit,
        ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit,
        ETournamentNodeState::k_ETournamentNodeState_A_Bye,
        ETournamentNodeState::k_ETournamentNodeState_A_Abandoned,
        ETournamentNodeState::k_ETournamentNodeState_ServerFailure,
        ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit,
        ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund,
    ];
}

impl ::std::default::Default for ETournamentNodeState {
    fn default() -> Self {
        ETournamentNodeState::k_ETournamentNodeState_Unknown
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EDOTAGroupMergeResult)
pub enum EDOTAGroupMergeResult {
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_OK)
    k_EDOTAGroupMergeResult_OK = 0,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_FAILED_GENERIC)
    k_EDOTAGroupMergeResult_FAILED_GENERIC = 1,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_NOT_LEADER)
    k_EDOTAGroupMergeResult_NOT_LEADER = 2,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS)
    k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS = 3,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_TOO_MANY_COACHES)
    k_EDOTAGroupMergeResult_TOO_MANY_COACHES = 4,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_ENGINE_MISMATCH)
    k_EDOTAGroupMergeResult_ENGINE_MISMATCH = 5,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_NO_SUCH_GROUP)
    k_EDOTAGroupMergeResult_NO_SUCH_GROUP = 6,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN)
    k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN = 7,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_ALREADY_INVITED)
    k_EDOTAGroupMergeResult_ALREADY_INVITED = 8,
    // @@protoc_insertion_point(enum_value:EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_NOT_INVITED)
    k_EDOTAGroupMergeResult_NOT_INVITED = 9,
}

impl ::steam_vent_proto_common::protobuf::Enum for EDOTAGroupMergeResult {
    const NAME: &'static str = "EDOTAGroupMergeResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDOTAGroupMergeResult> {
        match value {
            0 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK),
            1 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC),
            2 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER),
            3 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS),
            4 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES),
            5 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH),
            6 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP),
            7 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN),
            8 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED),
            9 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDOTAGroupMergeResult> {
        match str {
            "k_EDOTAGroupMergeResult_OK" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK),
            "k_EDOTAGroupMergeResult_FAILED_GENERIC" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC),
            "k_EDOTAGroupMergeResult_NOT_LEADER" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER),
            "k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS),
            "k_EDOTAGroupMergeResult_TOO_MANY_COACHES" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES),
            "k_EDOTAGroupMergeResult_ENGINE_MISMATCH" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH),
            "k_EDOTAGroupMergeResult_NO_SUCH_GROUP" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP),
            "k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN),
            "k_EDOTAGroupMergeResult_ALREADY_INVITED" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED),
            "k_EDOTAGroupMergeResult_NOT_INVITED" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDOTAGroupMergeResult] = &[
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED,
    ];
}

impl ::std::default::Default for EDOTAGroupMergeResult {
    fn default() -> Self {
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EPartyBeaconType)
pub enum EPartyBeaconType {
    // @@protoc_insertion_point(enum_value:EPartyBeaconType.k_EPartyBeaconType_Available)
    k_EPartyBeaconType_Available = 0,
    // @@protoc_insertion_point(enum_value:EPartyBeaconType.k_EPartyBeaconType_Joinable)
    k_EPartyBeaconType_Joinable = 1,
}

impl ::steam_vent_proto_common::protobuf::Enum for EPartyBeaconType {
    const NAME: &'static str = "EPartyBeaconType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPartyBeaconType> {
        match value {
            0 => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Available),
            1 => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Joinable),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPartyBeaconType> {
        match str {
            "k_EPartyBeaconType_Available" => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Available),
            "k_EPartyBeaconType_Joinable" => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Joinable),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPartyBeaconType] = &[
        EPartyBeaconType::k_EPartyBeaconType_Available,
        EPartyBeaconType::k_EPartyBeaconType_Joinable,
    ];
}

impl ::std::default::Default for EPartyBeaconType {
    fn default() -> Self {
        EPartyBeaconType::k_EPartyBeaconType_Available
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;