// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_tournament.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CMsgRequestWeekendTourneySchedule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgRequestWeekendTourneySchedule {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgRequestWeekendTourneySchedule.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgRequestWeekendTourneySchedule {
    fn default() -> &'a CMsgRequestWeekendTourneySchedule {
        <CMsgRequestWeekendTourneySchedule as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgRequestWeekendTourneySchedule {
    pub fn new() -> CMsgRequestWeekendTourneySchedule {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgRequestWeekendTourneySchedule {
    const NAME: &'static str = "CMsgRequestWeekendTourneySchedule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgRequestWeekendTourneySchedule {
        CMsgRequestWeekendTourneySchedule::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgRequestWeekendTourneySchedule {
        static instance: CMsgRequestWeekendTourneySchedule = CMsgRequestWeekendTourneySchedule {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgWeekendTourneySchedule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWeekendTourneySchedule {
    // message fields
    // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.divisions)
    pub divisions: ::std::vec::Vec<cmsg_weekend_tourney_schedule::Division>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWeekendTourneySchedule.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWeekendTourneySchedule {
    fn default() -> &'a CMsgWeekendTourneySchedule {
        <CMsgWeekendTourneySchedule as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWeekendTourneySchedule {
    pub fn new() -> CMsgWeekendTourneySchedule {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWeekendTourneySchedule {
    const NAME: &'static str = "CMsgWeekendTourneySchedule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.divisions.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.divisions {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.divisions {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWeekendTourneySchedule {
        CMsgWeekendTourneySchedule::new()
    }

    fn clear(&mut self) {
        self.divisions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWeekendTourneySchedule {
        static instance: CMsgWeekendTourneySchedule = CMsgWeekendTourneySchedule {
            divisions: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgWeekendTourneySchedule`
pub mod cmsg_weekend_tourney_schedule {
    // @@protoc_insertion_point(message:CMsgWeekendTourneySchedule.Division)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Division {
        // message fields
        // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.Division.division_code)
        pub division_code: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.Division.time_window_open)
        pub time_window_open: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.Division.time_window_close)
        pub time_window_close: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.Division.time_window_open_next)
        pub time_window_open_next: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.Division.trophy_id)
        pub trophy_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgWeekendTourneySchedule.Division.free_weekend)
        pub free_weekend: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgWeekendTourneySchedule.Division.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Division {
        fn default() -> &'a Division {
            <Division as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Division {
        pub fn new() -> Division {
            ::std::default::Default::default()
        }

        // optional uint32 division_code = 1;

        pub fn division_code(&self) -> u32 {
            self.division_code.unwrap_or(0)
        }

        pub fn clear_division_code(&mut self) {
            self.division_code = ::std::option::Option::None;
        }

        pub fn has_division_code(&self) -> bool {
            self.division_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_division_code(&mut self, v: u32) {
            self.division_code = ::std::option::Option::Some(v);
        }

        // optional uint32 time_window_open = 2;

        pub fn time_window_open(&self) -> u32 {
            self.time_window_open.unwrap_or(0)
        }

        pub fn clear_time_window_open(&mut self) {
            self.time_window_open = ::std::option::Option::None;
        }

        pub fn has_time_window_open(&self) -> bool {
            self.time_window_open.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_window_open(&mut self, v: u32) {
            self.time_window_open = ::std::option::Option::Some(v);
        }

        // optional uint32 time_window_close = 3;

        pub fn time_window_close(&self) -> u32 {
            self.time_window_close.unwrap_or(0)
        }

        pub fn clear_time_window_close(&mut self) {
            self.time_window_close = ::std::option::Option::None;
        }

        pub fn has_time_window_close(&self) -> bool {
            self.time_window_close.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_window_close(&mut self, v: u32) {
            self.time_window_close = ::std::option::Option::Some(v);
        }

        // optional uint32 time_window_open_next = 4;

        pub fn time_window_open_next(&self) -> u32 {
            self.time_window_open_next.unwrap_or(0)
        }

        pub fn clear_time_window_open_next(&mut self) {
            self.time_window_open_next = ::std::option::Option::None;
        }

        pub fn has_time_window_open_next(&self) -> bool {
            self.time_window_open_next.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_window_open_next(&mut self, v: u32) {
            self.time_window_open_next = ::std::option::Option::Some(v);
        }

        // optional uint32 trophy_id = 5;

        pub fn trophy_id(&self) -> u32 {
            self.trophy_id.unwrap_or(0)
        }

        pub fn clear_trophy_id(&mut self) {
            self.trophy_id = ::std::option::Option::None;
        }

        pub fn has_trophy_id(&self) -> bool {
            self.trophy_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_trophy_id(&mut self, v: u32) {
            self.trophy_id = ::std::option::Option::Some(v);
        }

        // optional bool free_weekend = 6;

        pub fn free_weekend(&self) -> bool {
            self.free_weekend.unwrap_or(false)
        }

        pub fn clear_free_weekend(&mut self) {
            self.free_weekend = ::std::option::Option::None;
        }

        pub fn has_free_weekend(&self) -> bool {
            self.free_weekend.is_some()
        }

        // Param is passed by value, moved
        pub fn set_free_weekend(&mut self, v: bool) {
            self.free_weekend = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Division {
        const NAME: &'static str = "Division";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.division_code = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.time_window_open = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.time_window_close = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.time_window_open_next = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.free_weekend = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.division_code {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.time_window_open {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.time_window_close {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.time_window_open_next {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.trophy_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.free_weekend {
                my_size += 1 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.division_code {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.time_window_open {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.time_window_close {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.time_window_open_next {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.trophy_id {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.free_weekend {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Division {
            Division::new()
        }

        fn clear(&mut self) {
            self.division_code = ::std::option::Option::None;
            self.time_window_open = ::std::option::Option::None;
            self.time_window_close = ::std::option::Option::None;
            self.time_window_open_next = ::std::option::Option::None;
            self.trophy_id = ::std::option::Option::None;
            self.free_weekend = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Division {
            static instance: Division = Division {
                division_code: ::std::option::Option::None,
                time_window_open: ::std::option::Option::None,
                time_window_close: ::std::option::Option::None,
                time_window_open_next: ::std::option::Option::None,
                trophy_id: ::std::option::Option::None,
                free_weekend: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgWeekendTourneyOpts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWeekendTourneyOpts {
    // message fields
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.participating)
    pub participating: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.division_id)
    pub division_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.buyin)
    pub buyin: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.skill_level)
    pub skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.match_groups)
    pub match_groups: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.pickup_team_name)
    pub pickup_team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgWeekendTourneyOpts.pickup_team_logo)
    pub pickup_team_logo: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWeekendTourneyOpts.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWeekendTourneyOpts {
    fn default() -> &'a CMsgWeekendTourneyOpts {
        <CMsgWeekendTourneyOpts as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWeekendTourneyOpts {
    pub fn new() -> CMsgWeekendTourneyOpts {
        ::std::default::Default::default()
    }

    // optional bool participating = 1;

    pub fn participating(&self) -> bool {
        self.participating.unwrap_or(false)
    }

    pub fn clear_participating(&mut self) {
        self.participating = ::std::option::Option::None;
    }

    pub fn has_participating(&self) -> bool {
        self.participating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_participating(&mut self, v: bool) {
        self.participating = ::std::option::Option::Some(v);
    }

    // optional uint32 division_id = 2;

    pub fn division_id(&self) -> u32 {
        self.division_id.unwrap_or(0)
    }

    pub fn clear_division_id(&mut self) {
        self.division_id = ::std::option::Option::None;
    }

    pub fn has_division_id(&self) -> bool {
        self.division_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_division_id(&mut self, v: u32) {
        self.division_id = ::std::option::Option::Some(v);
    }

    // optional uint32 buyin = 3;

    pub fn buyin(&self) -> u32 {
        self.buyin.unwrap_or(0)
    }

    pub fn clear_buyin(&mut self) {
        self.buyin = ::std::option::Option::None;
    }

    pub fn has_buyin(&self) -> bool {
        self.buyin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buyin(&mut self, v: u32) {
        self.buyin = ::std::option::Option::Some(v);
    }

    // optional uint32 skill_level = 4;

    pub fn skill_level(&self) -> u32 {
        self.skill_level.unwrap_or(0)
    }

    pub fn clear_skill_level(&mut self) {
        self.skill_level = ::std::option::Option::None;
    }

    pub fn has_skill_level(&self) -> bool {
        self.skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skill_level(&mut self, v: u32) {
        self.skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 match_groups = 5;

    pub fn match_groups(&self) -> u32 {
        self.match_groups.unwrap_or(0)
    }

    pub fn clear_match_groups(&mut self) {
        self.match_groups = ::std::option::Option::None;
    }

    pub fn has_match_groups(&self) -> bool {
        self.match_groups.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_groups(&mut self, v: u32) {
        self.match_groups = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 6;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string pickup_team_name = 7;

    pub fn pickup_team_name(&self) -> &str {
        match self.pickup_team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_pickup_team_name(&mut self) {
        self.pickup_team_name = ::std::option::Option::None;
    }

    pub fn has_pickup_team_name(&self) -> bool {
        self.pickup_team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team_name(&mut self, v: ::std::string::String) {
        self.pickup_team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pickup_team_name(&mut self) -> &mut ::std::string::String {
        if self.pickup_team_name.is_none() {
            self.pickup_team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.pickup_team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_pickup_team_name(&mut self) -> ::std::string::String {
        self.pickup_team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 pickup_team_logo = 8;

    pub fn pickup_team_logo(&self) -> u64 {
        self.pickup_team_logo.unwrap_or(0)
    }

    pub fn clear_pickup_team_logo(&mut self) {
        self.pickup_team_logo = ::std::option::Option::None;
    }

    pub fn has_pickup_team_logo(&self) -> bool {
        self.pickup_team_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team_logo(&mut self, v: u64) {
        self.pickup_team_logo = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWeekendTourneyOpts {
    const NAME: &'static str = "CMsgWeekendTourneyOpts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.participating = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.division_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.buyin = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.match_groups = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.pickup_team_name = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.pickup_team_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.participating {
            my_size += 1 + 1;
        }
        if let Some(v) = self.division_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.buyin {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.skill_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.match_groups {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.pickup_team_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.pickup_team_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(8, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.participating {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.division_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.buyin {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.skill_level {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.match_groups {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.pickup_team_name.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.pickup_team_logo {
            os.write_uint64(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWeekendTourneyOpts {
        CMsgWeekendTourneyOpts::new()
    }

    fn clear(&mut self) {
        self.participating = ::std::option::Option::None;
        self.division_id = ::std::option::Option::None;
        self.buyin = ::std::option::Option::None;
        self.skill_level = ::std::option::Option::None;
        self.match_groups = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.pickup_team_name = ::std::option::Option::None;
        self.pickup_team_logo = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWeekendTourneyOpts {
        static instance: CMsgWeekendTourneyOpts = CMsgWeekendTourneyOpts {
            participating: ::std::option::Option::None,
            division_id: ::std::option::Option::None,
            buyin: ::std::option::Option::None,
            skill_level: ::std::option::Option::None,
            match_groups: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            pickup_team_name: ::std::option::Option::None,
            pickup_team_logo: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgWeekendTourneyLeave)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWeekendTourneyLeave {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWeekendTourneyLeave.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWeekendTourneyLeave {
    fn default() -> &'a CMsgWeekendTourneyLeave {
        <CMsgWeekendTourneyLeave as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWeekendTourneyLeave {
    pub fn new() -> CMsgWeekendTourneyLeave {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWeekendTourneyLeave {
    const NAME: &'static str = "CMsgWeekendTourneyLeave";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWeekendTourneyLeave {
        CMsgWeekendTourneyLeave::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWeekendTourneyLeave {
        static instance: CMsgWeekendTourneyLeave = CMsgWeekendTourneyLeave {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATournament)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATournament {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATournament.tournament_id)
    pub tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.division_id)
    pub division_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.schedule_time)
    pub schedule_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.skill_level)
    pub skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.tournament_template)
    pub tournament_template: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_client_enums::ETournamentTemplate>>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.state)
    pub state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_client_enums::ETournamentState>>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.state_seq_num)
    pub state_seq_num: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.season_trophy_id)
    pub season_trophy_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.teams)
    pub teams: ::std::vec::Vec<cmsg_dotatournament::Team>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.games)
    pub games: ::std::vec::Vec<cmsg_dotatournament::Game>,
    // @@protoc_insertion_point(field:CMsgDOTATournament.nodes)
    pub nodes: ::std::vec::Vec<cmsg_dotatournament::Node>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATournament.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATournament {
    fn default() -> &'a CMsgDOTATournament {
        <CMsgDOTATournament as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATournament {
    pub fn new() -> CMsgDOTATournament {
        ::std::default::Default::default()
    }

    // optional uint32 tournament_id = 1;

    pub fn tournament_id(&self) -> u32 {
        self.tournament_id.unwrap_or(0)
    }

    pub fn clear_tournament_id(&mut self) {
        self.tournament_id = ::std::option::Option::None;
    }

    pub fn has_tournament_id(&self) -> bool {
        self.tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_id(&mut self, v: u32) {
        self.tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 division_id = 2;

    pub fn division_id(&self) -> u32 {
        self.division_id.unwrap_or(0)
    }

    pub fn clear_division_id(&mut self) {
        self.division_id = ::std::option::Option::None;
    }

    pub fn has_division_id(&self) -> bool {
        self.division_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_division_id(&mut self, v: u32) {
        self.division_id = ::std::option::Option::Some(v);
    }

    // optional uint32 schedule_time = 3;

    pub fn schedule_time(&self) -> u32 {
        self.schedule_time.unwrap_or(0)
    }

    pub fn clear_schedule_time(&mut self) {
        self.schedule_time = ::std::option::Option::None;
    }

    pub fn has_schedule_time(&self) -> bool {
        self.schedule_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_time(&mut self, v: u32) {
        self.schedule_time = ::std::option::Option::Some(v);
    }

    // optional uint32 skill_level = 4;

    pub fn skill_level(&self) -> u32 {
        self.skill_level.unwrap_or(0)
    }

    pub fn clear_skill_level(&mut self) {
        self.skill_level = ::std::option::Option::None;
    }

    pub fn has_skill_level(&self) -> bool {
        self.skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skill_level(&mut self, v: u32) {
        self.skill_level = ::std::option::Option::Some(v);
    }

    // optional .ETournamentTemplate tournament_template = 5;

    pub fn tournament_template(&self) -> super::dota_client_enums::ETournamentTemplate {
        match self.tournament_template {
            Some(e) => e.enum_value_or(super::dota_client_enums::ETournamentTemplate::k_ETournamentTemplate_None),
            None => super::dota_client_enums::ETournamentTemplate::k_ETournamentTemplate_None,
        }
    }

    pub fn clear_tournament_template(&mut self) {
        self.tournament_template = ::std::option::Option::None;
    }

    pub fn has_tournament_template(&self) -> bool {
        self.tournament_template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_template(&mut self, v: super::dota_client_enums::ETournamentTemplate) {
        self.tournament_template = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ETournamentState state = 6;

    pub fn state(&self) -> super::dota_client_enums::ETournamentState {
        match self.state {
            Some(e) => e.enum_value_or(super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown),
            None => super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::dota_client_enums::ETournamentState) {
        self.state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 state_seq_num = 10;

    pub fn state_seq_num(&self) -> u32 {
        self.state_seq_num.unwrap_or(0)
    }

    pub fn clear_state_seq_num(&mut self) {
        self.state_seq_num = ::std::option::Option::None;
    }

    pub fn has_state_seq_num(&self) -> bool {
        self.state_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state_seq_num(&mut self, v: u32) {
        self.state_seq_num = ::std::option::Option::Some(v);
    }

    // optional uint32 season_trophy_id = 11;

    pub fn season_trophy_id(&self) -> u32 {
        self.season_trophy_id.unwrap_or(0)
    }

    pub fn clear_season_trophy_id(&mut self) {
        self.season_trophy_id = ::std::option::Option::None;
    }

    pub fn has_season_trophy_id(&self) -> bool {
        self.season_trophy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_season_trophy_id(&mut self, v: u32) {
        self.season_trophy_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATournament {
    const NAME: &'static str = "CMsgDOTATournament";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.division_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.schedule_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.tournament_template = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                48 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                80 => {
                    self.state_seq_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.teams.push(is.read_message()?);
                },
                66 => {
                    self.games.push(is.read_message()?);
                },
                74 => {
                    self.nodes.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tournament_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.division_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.schedule_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.skill_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.tournament_template {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.state_seq_num {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.season_trophy_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.tournament_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.division_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.schedule_time {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.skill_level {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.tournament_template {
            os.write_enum(5, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.state {
            os.write_enum(6, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.state_seq_num {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.season_trophy_id {
            os.write_uint32(11, v)?;
        }
        for v in &self.teams {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.games {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.nodes {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATournament {
        CMsgDOTATournament::new()
    }

    fn clear(&mut self) {
        self.tournament_id = ::std::option::Option::None;
        self.division_id = ::std::option::Option::None;
        self.schedule_time = ::std::option::Option::None;
        self.skill_level = ::std::option::Option::None;
        self.tournament_template = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.state_seq_num = ::std::option::Option::None;
        self.season_trophy_id = ::std::option::Option::None;
        self.teams.clear();
        self.games.clear();
        self.nodes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATournament {
        static instance: CMsgDOTATournament = CMsgDOTATournament {
            tournament_id: ::std::option::Option::None,
            division_id: ::std::option::Option::None,
            schedule_time: ::std::option::Option::None,
            skill_level: ::std::option::Option::None,
            tournament_template: ::std::option::Option::None,
            state: ::std::option::Option::None,
            state_seq_num: ::std::option::Option::None,
            season_trophy_id: ::std::option::Option::None,
            teams: ::std::vec::Vec::new(),
            games: ::std::vec::Vec::new(),
            nodes: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTATournament`
pub mod cmsg_dotatournament {
    // @@protoc_insertion_point(message:CMsgDOTATournament.Team)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Team {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.team_gid)
        pub team_gid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.node_or_state)
        pub node_or_state: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.players)
        pub players: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.player_buyin)
        pub player_buyin: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.player_skill_level)
        pub player_skill_level: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.match_group_mask)
        pub match_group_mask: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.team_base_logo)
        pub team_base_logo: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Team.team_ui_logo)
        pub team_ui_logo: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATournament.Team.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Team {
        fn default() -> &'a Team {
            <Team as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Team {
        pub fn new() -> Team {
            ::std::default::Default::default()
        }

        // optional fixed64 team_gid = 1;

        pub fn team_gid(&self) -> u64 {
            self.team_gid.unwrap_or(0)
        }

        pub fn clear_team_gid(&mut self) {
            self.team_gid = ::std::option::Option::None;
        }

        pub fn has_team_gid(&self) -> bool {
            self.team_gid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_gid(&mut self, v: u64) {
            self.team_gid = ::std::option::Option::Some(v);
        }

        // optional uint32 node_or_state = 2;

        pub fn node_or_state(&self) -> u32 {
            self.node_or_state.unwrap_or(0)
        }

        pub fn clear_node_or_state(&mut self) {
            self.node_or_state = ::std::option::Option::None;
        }

        pub fn has_node_or_state(&self) -> bool {
            self.node_or_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_or_state(&mut self, v: u32) {
            self.node_or_state = ::std::option::Option::Some(v);
        }

        // optional uint32 match_group_mask = 12;

        pub fn match_group_mask(&self) -> u32 {
            self.match_group_mask.unwrap_or(0)
        }

        pub fn clear_match_group_mask(&mut self) {
            self.match_group_mask = ::std::option::Option::None;
        }

        pub fn has_match_group_mask(&self) -> bool {
            self.match_group_mask.is_some()
        }

        // Param is passed by value, moved
        pub fn set_match_group_mask(&mut self, v: u32) {
            self.match_group_mask = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 4;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional string team_name = 5;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint64 team_base_logo = 7;

        pub fn team_base_logo(&self) -> u64 {
            self.team_base_logo.unwrap_or(0)
        }

        pub fn clear_team_base_logo(&mut self) {
            self.team_base_logo = ::std::option::Option::None;
        }

        pub fn has_team_base_logo(&self) -> bool {
            self.team_base_logo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_base_logo(&mut self, v: u64) {
            self.team_base_logo = ::std::option::Option::Some(v);
        }

        // optional uint64 team_ui_logo = 8;

        pub fn team_ui_logo(&self) -> u64 {
            self.team_ui_logo.unwrap_or(0)
        }

        pub fn clear_team_ui_logo(&mut self) {
            self.team_ui_logo = ::std::option::Option::None;
        }

        pub fn has_team_ui_logo(&self) -> bool {
            self.team_ui_logo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_ui_logo(&mut self, v: u64) {
            self.team_ui_logo = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Team {
        const NAME: &'static str = "Team";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.team_gid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.node_or_state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint32_into(&mut self.players)?;
                    },
                    24 => {
                        self.players.push(is.read_uint32()?);
                    },
                    74 => {
                        is.read_repeated_packed_uint32_into(&mut self.player_buyin)?;
                    },
                    72 => {
                        self.player_buyin.push(is.read_uint32()?);
                    },
                    82 => {
                        is.read_repeated_packed_uint32_into(&mut self.player_skill_level)?;
                    },
                    80 => {
                        self.player_skill_level.push(is.read_uint32()?);
                    },
                    96 => {
                        self.match_group_mask = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.team_base_logo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    64 => {
                        self.team_ui_logo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_gid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.node_or_state {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::vec_packed_uint32_size(3, &self.players);
            my_size += ::steam_vent_proto_common::protobuf::rt::vec_packed_uint32_size(9, &self.player_buyin);
            my_size += ::steam_vent_proto_common::protobuf::rt::vec_packed_uint32_size(10, &self.player_skill_level);
            if let Some(v) = self.match_group_mask {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(12, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.team_base_logo {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(7, v);
            }
            if let Some(v) = self.team_ui_logo {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(8, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.team_gid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.node_or_state {
                os.write_uint32(2, v)?;
            }
            os.write_repeated_packed_uint32(3, &self.players)?;
            os.write_repeated_packed_uint32(9, &self.player_buyin)?;
            os.write_repeated_packed_uint32(10, &self.player_skill_level)?;
            if let Some(v) = self.match_group_mask {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.team_base_logo {
                os.write_uint64(7, v)?;
            }
            if let Some(v) = self.team_ui_logo {
                os.write_uint64(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Team {
            Team::new()
        }

        fn clear(&mut self) {
            self.team_gid = ::std::option::Option::None;
            self.node_or_state = ::std::option::Option::None;
            self.players.clear();
            self.player_buyin.clear();
            self.player_skill_level.clear();
            self.match_group_mask = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.team_name = ::std::option::Option::None;
            self.team_base_logo = ::std::option::Option::None;
            self.team_ui_logo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Team {
            static instance: Team = Team {
                team_gid: ::std::option::Option::None,
                node_or_state: ::std::option::Option::None,
                players: ::std::vec::Vec::new(),
                player_buyin: ::std::vec::Vec::new(),
                player_skill_level: ::std::vec::Vec::new(),
                match_group_mask: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                team_name: ::std::option::Option::None,
                team_base_logo: ::std::option::Option::None,
                team_ui_logo: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATournament.Game)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Game {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATournament.Game.node_idx)
        pub node_idx: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Game.lobby_id)
        pub lobby_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Game.match_id)
        pub match_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Game.team_a_good)
        pub team_a_good: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Game.state)
        pub state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_client_enums::ETournamentGameState>>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Game.start_time)
        pub start_time: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATournament.Game.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Game {
        fn default() -> &'a Game {
            <Game as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Game {
        pub fn new() -> Game {
            ::std::default::Default::default()
        }

        // optional uint32 node_idx = 1;

        pub fn node_idx(&self) -> u32 {
            self.node_idx.unwrap_or(0)
        }

        pub fn clear_node_idx(&mut self) {
            self.node_idx = ::std::option::Option::None;
        }

        pub fn has_node_idx(&self) -> bool {
            self.node_idx.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_idx(&mut self, v: u32) {
            self.node_idx = ::std::option::Option::Some(v);
        }

        // optional fixed64 lobby_id = 2;

        pub fn lobby_id(&self) -> u64 {
            self.lobby_id.unwrap_or(0)
        }

        pub fn clear_lobby_id(&mut self) {
            self.lobby_id = ::std::option::Option::None;
        }

        pub fn has_lobby_id(&self) -> bool {
            self.lobby_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lobby_id(&mut self, v: u64) {
            self.lobby_id = ::std::option::Option::Some(v);
        }

        // optional uint64 match_id = 3;

        pub fn match_id(&self) -> u64 {
            self.match_id.unwrap_or(0)
        }

        pub fn clear_match_id(&mut self) {
            self.match_id = ::std::option::Option::None;
        }

        pub fn has_match_id(&self) -> bool {
            self.match_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_match_id(&mut self, v: u64) {
            self.match_id = ::std::option::Option::Some(v);
        }

        // optional bool team_a_good = 4;

        pub fn team_a_good(&self) -> bool {
            self.team_a_good.unwrap_or(false)
        }

        pub fn clear_team_a_good(&mut self) {
            self.team_a_good = ::std::option::Option::None;
        }

        pub fn has_team_a_good(&self) -> bool {
            self.team_a_good.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_a_good(&mut self, v: bool) {
            self.team_a_good = ::std::option::Option::Some(v);
        }

        // optional .ETournamentGameState state = 5;

        pub fn state(&self) -> super::super::dota_client_enums::ETournamentGameState {
            match self.state {
                Some(e) => e.enum_value_or(super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown),
                None => super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown,
            }
        }

        pub fn clear_state(&mut self) {
            self.state = ::std::option::Option::None;
        }

        pub fn has_state(&self) -> bool {
            self.state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_state(&mut self, v: super::super::dota_client_enums::ETournamentGameState) {
            self.state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional uint32 start_time = 6;

        pub fn start_time(&self) -> u32 {
            self.start_time.unwrap_or(0)
        }

        pub fn clear_start_time(&mut self) {
            self.start_time = ::std::option::Option::None;
        }

        pub fn has_start_time(&self) -> bool {
            self.start_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_time(&mut self, v: u32) {
            self.start_time = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Game {
        const NAME: &'static str = "Game";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.node_idx = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    17 => {
                        self.lobby_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    24 => {
                        self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.team_a_good = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    48 => {
                        self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.node_idx {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.lobby_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.match_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.team_a_good {
                my_size += 1 + 1;
            }
            if let Some(v) = self.state {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v.value());
            }
            if let Some(v) = self.start_time {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.node_idx {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.lobby_id {
                os.write_fixed64(2, v)?;
            }
            if let Some(v) = self.match_id {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.team_a_good {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.state {
                os.write_enum(5, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.start_time {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Game {
            Game::new()
        }

        fn clear(&mut self) {
            self.node_idx = ::std::option::Option::None;
            self.lobby_id = ::std::option::Option::None;
            self.match_id = ::std::option::Option::None;
            self.team_a_good = ::std::option::Option::None;
            self.state = ::std::option::Option::None;
            self.start_time = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Game {
            static instance: Game = Game {
                node_idx: ::std::option::Option::None,
                lobby_id: ::std::option::Option::None,
                match_id: ::std::option::Option::None,
                team_a_good: ::std::option::Option::None,
                state: ::std::option::Option::None,
                start_time: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATournament.Node)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Node {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATournament.Node.node_id)
        pub node_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Node.team_idx_a)
        pub team_idx_a: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Node.team_idx_b)
        pub team_idx_b: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournament.Node.node_state)
        pub node_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_client_enums::ETournamentNodeState>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATournament.Node.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Node {
        fn default() -> &'a Node {
            <Node as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Node {
        pub fn new() -> Node {
            ::std::default::Default::default()
        }

        // optional uint32 node_id = 1;

        pub fn node_id(&self) -> u32 {
            self.node_id.unwrap_or(0)
        }

        pub fn clear_node_id(&mut self) {
            self.node_id = ::std::option::Option::None;
        }

        pub fn has_node_id(&self) -> bool {
            self.node_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_id(&mut self, v: u32) {
            self.node_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_idx_a = 2;

        pub fn team_idx_a(&self) -> u32 {
            self.team_idx_a.unwrap_or(0)
        }

        pub fn clear_team_idx_a(&mut self) {
            self.team_idx_a = ::std::option::Option::None;
        }

        pub fn has_team_idx_a(&self) -> bool {
            self.team_idx_a.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_idx_a(&mut self, v: u32) {
            self.team_idx_a = ::std::option::Option::Some(v);
        }

        // optional uint32 team_idx_b = 3;

        pub fn team_idx_b(&self) -> u32 {
            self.team_idx_b.unwrap_or(0)
        }

        pub fn clear_team_idx_b(&mut self) {
            self.team_idx_b = ::std::option::Option::None;
        }

        pub fn has_team_idx_b(&self) -> bool {
            self.team_idx_b.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_idx_b(&mut self, v: u32) {
            self.team_idx_b = ::std::option::Option::Some(v);
        }

        // optional .ETournamentNodeState node_state = 4;

        pub fn node_state(&self) -> super::super::dota_client_enums::ETournamentNodeState {
            match self.node_state {
                Some(e) => e.enum_value_or(super::super::dota_client_enums::ETournamentNodeState::k_ETournamentNodeState_Unknown),
                None => super::super::dota_client_enums::ETournamentNodeState::k_ETournamentNodeState_Unknown,
            }
        }

        pub fn clear_node_state(&mut self) {
            self.node_state = ::std::option::Option::None;
        }

        pub fn has_node_state(&self) -> bool {
            self.node_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_state(&mut self, v: super::super::dota_client_enums::ETournamentNodeState) {
            self.node_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Node {
        const NAME: &'static str = "Node";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.node_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.team_idx_a = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.team_idx_b = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.node_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.node_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.team_idx_a {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.team_idx_b {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.node_state {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v.value());
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.node_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.team_idx_a {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.team_idx_b {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.node_state {
                os.write_enum(4, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Node {
            Node::new()
        }

        fn clear(&mut self) {
            self.node_id = ::std::option::Option::None;
            self.team_idx_a = ::std::option::Option::None;
            self.team_idx_b = ::std::option::Option::None;
            self.node_state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Node {
            static instance: Node = Node {
                node_id: ::std::option::Option::None,
                team_idx_a: ::std::option::Option::None,
                team_idx_b: ::std::option::Option::None,
                node_state: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTATournamentStateChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATournamentStateChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.new_tournament_id)
    pub new_tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.event)
    pub event: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ETournamentEvent>>,
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.new_tournament_state)
    pub new_tournament_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_client_enums::ETournamentState>>,
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.game_changes)
    pub game_changes: ::std::vec::Vec<cmsg_dotatournament_state_change::GameChange>,
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.team_changes)
    pub team_changes: ::std::vec::Vec<cmsg_dotatournament_state_change::TeamChange>,
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.merged_tournament_ids)
    pub merged_tournament_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.state_seq_num)
    pub state_seq_num: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATournamentStateChange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATournamentStateChange {
    fn default() -> &'a CMsgDOTATournamentStateChange {
        <CMsgDOTATournamentStateChange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATournamentStateChange {
    pub fn new() -> CMsgDOTATournamentStateChange {
        ::std::default::Default::default()
    }

    // optional uint32 new_tournament_id = 1;

    pub fn new_tournament_id(&self) -> u32 {
        self.new_tournament_id.unwrap_or(0)
    }

    pub fn clear_new_tournament_id(&mut self) {
        self.new_tournament_id = ::std::option::Option::None;
    }

    pub fn has_new_tournament_id(&self) -> bool {
        self.new_tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_tournament_id(&mut self, v: u32) {
        self.new_tournament_id = ::std::option::Option::Some(v);
    }

    // optional .ETournamentEvent event = 2;

    pub fn event(&self) -> ETournamentEvent {
        match self.event {
            Some(e) => e.enum_value_or(ETournamentEvent::k_ETournamentEvent_None),
            None => ETournamentEvent::k_ETournamentEvent_None,
        }
    }

    pub fn clear_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: ETournamentEvent) {
        self.event = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ETournamentState new_tournament_state = 3;

    pub fn new_tournament_state(&self) -> super::dota_client_enums::ETournamentState {
        match self.new_tournament_state {
            Some(e) => e.enum_value_or(super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown),
            None => super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown,
        }
    }

    pub fn clear_new_tournament_state(&mut self) {
        self.new_tournament_state = ::std::option::Option::None;
    }

    pub fn has_new_tournament_state(&self) -> bool {
        self.new_tournament_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_tournament_state(&mut self, v: super::dota_client_enums::ETournamentState) {
        self.new_tournament_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 state_seq_num = 7;

    pub fn state_seq_num(&self) -> u32 {
        self.state_seq_num.unwrap_or(0)
    }

    pub fn clear_state_seq_num(&mut self) {
        self.state_seq_num = ::std::option::Option::None;
    }

    pub fn has_state_seq_num(&self) -> bool {
        self.state_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state_seq_num(&mut self, v: u32) {
        self.state_seq_num = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATournamentStateChange {
    const NAME: &'static str = "CMsgDOTATournamentStateChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.new_tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.event = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.new_tournament_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.game_changes.push(is.read_message()?);
                },
                42 => {
                    self.team_changes.push(is.read_message()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.merged_tournament_ids)?;
                },
                48 => {
                    self.merged_tournament_ids.push(is.read_uint32()?);
                },
                56 => {
                    self.state_seq_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.new_tournament_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.event {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.new_tournament_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        for value in &self.game_changes {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.team_changes {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::vec_packed_uint32_size(6, &self.merged_tournament_ids);
        if let Some(v) = self.state_seq_num {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.new_tournament_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.event {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.new_tournament_state {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.game_changes {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.team_changes {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_repeated_packed_uint32(6, &self.merged_tournament_ids)?;
        if let Some(v) = self.state_seq_num {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATournamentStateChange {
        CMsgDOTATournamentStateChange::new()
    }

    fn clear(&mut self) {
        self.new_tournament_id = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.new_tournament_state = ::std::option::Option::None;
        self.game_changes.clear();
        self.team_changes.clear();
        self.merged_tournament_ids.clear();
        self.state_seq_num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATournamentStateChange {
        static instance: CMsgDOTATournamentStateChange = CMsgDOTATournamentStateChange {
            new_tournament_id: ::std::option::Option::None,
            event: ::std::option::Option::None,
            new_tournament_state: ::std::option::Option::None,
            game_changes: ::std::vec::Vec::new(),
            team_changes: ::std::vec::Vec::new(),
            merged_tournament_ids: ::std::vec::Vec::new(),
            state_seq_num: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTATournamentStateChange`
pub mod cmsg_dotatournament_state_change {
    // @@protoc_insertion_point(message:CMsgDOTATournamentStateChange.GameChange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct GameChange {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.GameChange.match_id)
        pub match_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.GameChange.new_state)
        pub new_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_client_enums::ETournamentGameState>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATournamentStateChange.GameChange.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a GameChange {
        fn default() -> &'a GameChange {
            <GameChange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl GameChange {
        pub fn new() -> GameChange {
            ::std::default::Default::default()
        }

        // optional uint64 match_id = 1;

        pub fn match_id(&self) -> u64 {
            self.match_id.unwrap_or(0)
        }

        pub fn clear_match_id(&mut self) {
            self.match_id = ::std::option::Option::None;
        }

        pub fn has_match_id(&self) -> bool {
            self.match_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_match_id(&mut self, v: u64) {
            self.match_id = ::std::option::Option::Some(v);
        }

        // optional .ETournamentGameState new_state = 2;

        pub fn new_state(&self) -> super::super::dota_client_enums::ETournamentGameState {
            match self.new_state {
                Some(e) => e.enum_value_or(super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown),
                None => super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown,
            }
        }

        pub fn clear_new_state(&mut self) {
            self.new_state = ::std::option::Option::None;
        }

        pub fn has_new_state(&self) -> bool {
            self.new_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_new_state(&mut self, v: super::super::dota_client_enums::ETournamentGameState) {
            self.new_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for GameChange {
        const NAME: &'static str = "GameChange";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.new_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.match_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.new_state {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.match_id {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.new_state {
                os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> GameChange {
            GameChange::new()
        }

        fn clear(&mut self) {
            self.match_id = ::std::option::Option::None;
            self.new_state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static GameChange {
            static instance: GameChange = GameChange {
                match_id: ::std::option::Option::None,
                new_state: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATournamentStateChange.TeamChange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeamChange {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.TeamChange.team_gid)
        pub team_gid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
        pub new_node_or_state: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
        pub old_node_or_state: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATournamentStateChange.TeamChange.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeamChange {
        fn default() -> &'a TeamChange {
            <TeamChange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TeamChange {
        pub fn new() -> TeamChange {
            ::std::default::Default::default()
        }

        // optional uint64 team_gid = 1;

        pub fn team_gid(&self) -> u64 {
            self.team_gid.unwrap_or(0)
        }

        pub fn clear_team_gid(&mut self) {
            self.team_gid = ::std::option::Option::None;
        }

        pub fn has_team_gid(&self) -> bool {
            self.team_gid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_gid(&mut self, v: u64) {
            self.team_gid = ::std::option::Option::Some(v);
        }

        // optional uint32 new_node_or_state = 2;

        pub fn new_node_or_state(&self) -> u32 {
            self.new_node_or_state.unwrap_or(0)
        }

        pub fn clear_new_node_or_state(&mut self) {
            self.new_node_or_state = ::std::option::Option::None;
        }

        pub fn has_new_node_or_state(&self) -> bool {
            self.new_node_or_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_new_node_or_state(&mut self, v: u32) {
            self.new_node_or_state = ::std::option::Option::Some(v);
        }

        // optional uint32 old_node_or_state = 3;

        pub fn old_node_or_state(&self) -> u32 {
            self.old_node_or_state.unwrap_or(0)
        }

        pub fn clear_old_node_or_state(&mut self) {
            self.old_node_or_state = ::std::option::Option::None;
        }

        pub fn has_old_node_or_state(&self) -> bool {
            self.old_node_or_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_old_node_or_state(&mut self, v: u32) {
            self.old_node_or_state = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TeamChange {
        const NAME: &'static str = "TeamChange";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_gid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.new_node_or_state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.old_node_or_state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_gid {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.new_node_or_state {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.old_node_or_state {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.team_gid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.new_node_or_state {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.old_node_or_state {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeamChange {
            TeamChange::new()
        }

        fn clear(&mut self) {
            self.team_gid = ::std::option::Option::None;
            self.new_node_or_state = ::std::option::Option::None;
            self.old_node_or_state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeamChange {
            static instance: TeamChange = TeamChange {
                team_gid: ::std::option::Option::None,
                new_node_or_state: ::std::option::Option::None,
                old_node_or_state: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
    pub skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
    pub times_won_0: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
    pub times_won_1: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
    pub times_won_2: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
    pub times_won_3: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
    pub times_bye_and_lost: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
    pub times_bye_and_won: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_unusual_champ)
    pub times_unusual_champ: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
    pub total_games_won: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
    pub score: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        <CMsgDOTAWeekendTourneyPlayerSkillLevelStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        ::std::default::Default::default()
    }

    // optional uint32 skill_level = 1;

    pub fn skill_level(&self) -> u32 {
        self.skill_level.unwrap_or(0)
    }

    pub fn clear_skill_level(&mut self) {
        self.skill_level = ::std::option::Option::None;
    }

    pub fn has_skill_level(&self) -> bool {
        self.skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skill_level(&mut self, v: u32) {
        self.skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_0 = 2;

    pub fn times_won_0(&self) -> u32 {
        self.times_won_0.unwrap_or(0)
    }

    pub fn clear_times_won_0(&mut self) {
        self.times_won_0 = ::std::option::Option::None;
    }

    pub fn has_times_won_0(&self) -> bool {
        self.times_won_0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_0(&mut self, v: u32) {
        self.times_won_0 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_1 = 3;

    pub fn times_won_1(&self) -> u32 {
        self.times_won_1.unwrap_or(0)
    }

    pub fn clear_times_won_1(&mut self) {
        self.times_won_1 = ::std::option::Option::None;
    }

    pub fn has_times_won_1(&self) -> bool {
        self.times_won_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_1(&mut self, v: u32) {
        self.times_won_1 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_2 = 4;

    pub fn times_won_2(&self) -> u32 {
        self.times_won_2.unwrap_or(0)
    }

    pub fn clear_times_won_2(&mut self) {
        self.times_won_2 = ::std::option::Option::None;
    }

    pub fn has_times_won_2(&self) -> bool {
        self.times_won_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_2(&mut self, v: u32) {
        self.times_won_2 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_3 = 5;

    pub fn times_won_3(&self) -> u32 {
        self.times_won_3.unwrap_or(0)
    }

    pub fn clear_times_won_3(&mut self) {
        self.times_won_3 = ::std::option::Option::None;
    }

    pub fn has_times_won_3(&self) -> bool {
        self.times_won_3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_3(&mut self, v: u32) {
        self.times_won_3 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_bye_and_lost = 6;

    pub fn times_bye_and_lost(&self) -> u32 {
        self.times_bye_and_lost.unwrap_or(0)
    }

    pub fn clear_times_bye_and_lost(&mut self) {
        self.times_bye_and_lost = ::std::option::Option::None;
    }

    pub fn has_times_bye_and_lost(&self) -> bool {
        self.times_bye_and_lost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_bye_and_lost(&mut self, v: u32) {
        self.times_bye_and_lost = ::std::option::Option::Some(v);
    }

    // optional uint32 times_bye_and_won = 7;

    pub fn times_bye_and_won(&self) -> u32 {
        self.times_bye_and_won.unwrap_or(0)
    }

    pub fn clear_times_bye_and_won(&mut self) {
        self.times_bye_and_won = ::std::option::Option::None;
    }

    pub fn has_times_bye_and_won(&self) -> bool {
        self.times_bye_and_won.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_bye_and_won(&mut self, v: u32) {
        self.times_bye_and_won = ::std::option::Option::Some(v);
    }

    // optional uint32 times_unusual_champ = 10;

    pub fn times_unusual_champ(&self) -> u32 {
        self.times_unusual_champ.unwrap_or(0)
    }

    pub fn clear_times_unusual_champ(&mut self) {
        self.times_unusual_champ = ::std::option::Option::None;
    }

    pub fn has_times_unusual_champ(&self) -> bool {
        self.times_unusual_champ.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_unusual_champ(&mut self, v: u32) {
        self.times_unusual_champ = ::std::option::Option::Some(v);
    }

    // optional uint32 total_games_won = 8;

    pub fn total_games_won(&self) -> u32 {
        self.total_games_won.unwrap_or(0)
    }

    pub fn clear_total_games_won(&mut self) {
        self.total_games_won = ::std::option::Option::None;
    }

    pub fn has_total_games_won(&self) -> bool {
        self.total_games_won.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_games_won(&mut self, v: u32) {
        self.total_games_won = ::std::option::Option::Some(v);
    }

    // optional uint32 score = 9;

    pub fn score(&self) -> u32 {
        self.score.unwrap_or(0)
    }

    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: u32) {
        self.score = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerSkillLevelStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.times_won_0 = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.times_won_1 = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.times_won_2 = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.times_won_3 = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.times_bye_and_lost = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.times_bye_and_won = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.times_unusual_champ = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.total_games_won = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.score = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.skill_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.times_won_0 {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.times_won_1 {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.times_won_2 {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.times_won_3 {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.times_bye_and_lost {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.times_bye_and_won {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.times_unusual_champ {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.total_games_won {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.score {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.skill_level {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.times_won_0 {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.times_won_1 {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.times_won_2 {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.times_won_3 {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.times_bye_and_lost {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.times_bye_and_won {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.times_unusual_champ {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.total_games_won {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.score {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        CMsgDOTAWeekendTourneyPlayerSkillLevelStats::new()
    }

    fn clear(&mut self) {
        self.skill_level = ::std::option::Option::None;
        self.times_won_0 = ::std::option::Option::None;
        self.times_won_1 = ::std::option::Option::None;
        self.times_won_2 = ::std::option::Option::None;
        self.times_won_3 = ::std::option::Option::None;
        self.times_bye_and_lost = ::std::option::Option::None;
        self.times_bye_and_won = ::std::option::Option::None;
        self.times_unusual_champ = ::std::option::Option::None;
        self.total_games_won = ::std::option::Option::None;
        self.score = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        static instance: CMsgDOTAWeekendTourneyPlayerSkillLevelStats = CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
            skill_level: ::std::option::Option::None,
            times_won_0: ::std::option::Option::None,
            times_won_1: ::std::option::Option::None,
            times_won_2: ::std::option::Option::None,
            times_won_3: ::std::option::Option::None,
            times_bye_and_lost: ::std::option::Option::None,
            times_bye_and_won: ::std::option::Option::None,
            times_unusual_champ: ::std::option::Option::None,
            total_games_won: ::std::option::Option::None,
            score: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyPlayerStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerStats.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
    pub season_trophy_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
    pub skill_levels: ::std::vec::Vec<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerStats.current_tier)
    pub current_tier: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyPlayerStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerStats {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerStats {
        <CMsgDOTAWeekendTourneyPlayerStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerStats {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerStats {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 season_trophy_id = 2;

    pub fn season_trophy_id(&self) -> u32 {
        self.season_trophy_id.unwrap_or(0)
    }

    pub fn clear_season_trophy_id(&mut self) {
        self.season_trophy_id = ::std::option::Option::None;
    }

    pub fn has_season_trophy_id(&self) -> bool {
        self.season_trophy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_season_trophy_id(&mut self, v: u32) {
        self.season_trophy_id = ::std::option::Option::Some(v);
    }

    // optional uint32 current_tier = 4;

    pub fn current_tier(&self) -> u32 {
        self.current_tier.unwrap_or(0)
    }

    pub fn clear_current_tier(&mut self) {
        self.current_tier = ::std::option::Option::None;
    }

    pub fn has_current_tier(&self) -> bool {
        self.current_tier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_tier(&mut self, v: u32) {
        self.current_tier = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAWeekendTourneyPlayerStats {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.skill_levels.push(is.read_message()?);
                },
                32 => {
                    self.current_tier = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.season_trophy_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.skill_levels {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.current_tier {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.season_trophy_id {
            os.write_uint32(2, v)?;
        }
        for v in &self.skill_levels {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.current_tier {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerStats {
        CMsgDOTAWeekendTourneyPlayerStats::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.season_trophy_id = ::std::option::Option::None;
        self.skill_levels.clear();
        self.current_tier = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerStats {
        static instance: CMsgDOTAWeekendTourneyPlayerStats = CMsgDOTAWeekendTourneyPlayerStats {
            account_id: ::std::option::Option::None,
            season_trophy_id: ::std::option::Option::None,
            skill_levels: ::std::vec::Vec::new(),
            current_tier: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyPlayerStatsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerStatsRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
    pub season_trophy_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyPlayerStatsRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerStatsRequest {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerStatsRequest {
        <CMsgDOTAWeekendTourneyPlayerStatsRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerStatsRequest {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerStatsRequest {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 season_trophy_id = 2;

    pub fn season_trophy_id(&self) -> u32 {
        self.season_trophy_id.unwrap_or(0)
    }

    pub fn clear_season_trophy_id(&mut self) {
        self.season_trophy_id = ::std::option::Option::None;
    }

    pub fn has_season_trophy_id(&self) -> bool {
        self.season_trophy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_season_trophy_id(&mut self, v: u32) {
        self.season_trophy_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAWeekendTourneyPlayerStatsRequest {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerStatsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.season_trophy_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.season_trophy_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerStatsRequest {
        CMsgDOTAWeekendTourneyPlayerStatsRequest::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.season_trophy_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerStatsRequest {
        static instance: CMsgDOTAWeekendTourneyPlayerStatsRequest = CMsgDOTAWeekendTourneyPlayerStatsRequest {
            account_id: ::std::option::Option::None,
            season_trophy_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyPlayerHistory)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerHistory {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
    pub tournaments: ::std::vec::Vec<cmsg_dotaweekend_tourney_player_history::Tournament>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyPlayerHistory.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerHistory {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerHistory {
        <CMsgDOTAWeekendTourneyPlayerHistory as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerHistory {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerHistory {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAWeekendTourneyPlayerHistory {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerHistory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.tournaments.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.tournaments {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.tournaments {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerHistory {
        CMsgDOTAWeekendTourneyPlayerHistory::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.tournaments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerHistory {
        static instance: CMsgDOTAWeekendTourneyPlayerHistory = CMsgDOTAWeekendTourneyPlayerHistory {
            account_id: ::std::option::Option::None,
            tournaments: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAWeekendTourneyPlayerHistory`
pub mod cmsg_dotaweekend_tourney_player_history {
    // @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Tournament {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
        pub tournament_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
        pub start_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
        pub tournament_tier: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
        pub team_date: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
        pub team_result: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
        pub account_id: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
        pub season_trophy_id: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Tournament {
        fn default() -> &'a Tournament {
            <Tournament as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Tournament {
        pub fn new() -> Tournament {
            ::std::default::Default::default()
        }

        // optional uint32 tournament_id = 1;

        pub fn tournament_id(&self) -> u32 {
            self.tournament_id.unwrap_or(0)
        }

        pub fn clear_tournament_id(&mut self) {
            self.tournament_id = ::std::option::Option::None;
        }

        pub fn has_tournament_id(&self) -> bool {
            self.tournament_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tournament_id(&mut self, v: u32) {
            self.tournament_id = ::std::option::Option::Some(v);
        }

        // optional uint32 start_time = 2;

        pub fn start_time(&self) -> u32 {
            self.start_time.unwrap_or(0)
        }

        pub fn clear_start_time(&mut self) {
            self.start_time = ::std::option::Option::None;
        }

        pub fn has_start_time(&self) -> bool {
            self.start_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_time(&mut self, v: u32) {
            self.start_time = ::std::option::Option::Some(v);
        }

        // optional uint32 tournament_tier = 3;

        pub fn tournament_tier(&self) -> u32 {
            self.tournament_tier.unwrap_or(0)
        }

        pub fn clear_tournament_tier(&mut self) {
            self.tournament_tier = ::std::option::Option::None;
        }

        pub fn has_tournament_tier(&self) -> bool {
            self.tournament_tier.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tournament_tier(&mut self, v: u32) {
            self.tournament_tier = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 4;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_date = 5;

        pub fn team_date(&self) -> u32 {
            self.team_date.unwrap_or(0)
        }

        pub fn clear_team_date(&mut self) {
            self.team_date = ::std::option::Option::None;
        }

        pub fn has_team_date(&self) -> bool {
            self.team_date.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_date(&mut self, v: u32) {
            self.team_date = ::std::option::Option::Some(v);
        }

        // optional uint32 team_result = 6;

        pub fn team_result(&self) -> u32 {
            self.team_result.unwrap_or(0)
        }

        pub fn clear_team_result(&mut self) {
            self.team_result = ::std::option::Option::None;
        }

        pub fn has_team_result(&self) -> bool {
            self.team_result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_result(&mut self, v: u32) {
            self.team_result = ::std::option::Option::Some(v);
        }

        // optional string team_name = 8;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 season_trophy_id = 9;

        pub fn season_trophy_id(&self) -> u32 {
            self.season_trophy_id.unwrap_or(0)
        }

        pub fn clear_season_trophy_id(&mut self) {
            self.season_trophy_id = ::std::option::Option::None;
        }

        pub fn has_season_trophy_id(&self) -> bool {
            self.season_trophy_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_season_trophy_id(&mut self, v: u32) {
            self.season_trophy_id = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Tournament {
        const NAME: &'static str = "Tournament";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.tournament_tier = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.team_date = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.team_result = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    58 => {
                        is.read_repeated_packed_uint32_into(&mut self.account_id)?;
                    },
                    56 => {
                        self.account_id.push(is.read_uint32()?);
                    },
                    66 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    72 => {
                        self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tournament_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.start_time {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.tournament_tier {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.team_date {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.team_result {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            for value in &self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, *value);
            };
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(8, &v);
            }
            if let Some(v) = self.season_trophy_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.tournament_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.start_time {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.tournament_tier {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.team_date {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.team_result {
                os.write_uint32(6, v)?;
            }
            for v in &self.account_id {
                os.write_uint32(7, *v)?;
            };
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(8, v)?;
            }
            if let Some(v) = self.season_trophy_id {
                os.write_uint32(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Tournament {
            Tournament::new()
        }

        fn clear(&mut self) {
            self.tournament_id = ::std::option::Option::None;
            self.start_time = ::std::option::Option::None;
            self.tournament_tier = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.team_date = ::std::option::Option::None;
            self.team_result = ::std::option::Option::None;
            self.account_id.clear();
            self.team_name = ::std::option::Option::None;
            self.season_trophy_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Tournament {
            static instance: Tournament = Tournament {
                tournament_id: ::std::option::Option::None,
                start_time: ::std::option::Option::None,
                tournament_tier: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                team_date: ::std::option::Option::None,
                team_result: ::std::option::Option::None,
                account_id: ::std::vec::Vec::new(),
                team_name: ::std::option::Option::None,
                season_trophy_id: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyParticipationDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyParticipationDetails {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
    pub divisions: ::std::vec::Vec<cmsg_dotaweekend_tourney_participation_details::Division>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyParticipationDetails.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyParticipationDetails {
    fn default() -> &'a CMsgDOTAWeekendTourneyParticipationDetails {
        <CMsgDOTAWeekendTourneyParticipationDetails as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyParticipationDetails {
    pub fn new() -> CMsgDOTAWeekendTourneyParticipationDetails {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAWeekendTourneyParticipationDetails {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyParticipationDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.divisions.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.divisions {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.divisions {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyParticipationDetails {
        CMsgDOTAWeekendTourneyParticipationDetails::new()
    }

    fn clear(&mut self) {
        self.divisions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyParticipationDetails {
        static instance: CMsgDOTAWeekendTourneyParticipationDetails = CMsgDOTAWeekendTourneyParticipationDetails {
            divisions: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAWeekendTourneyParticipationDetails`
pub mod cmsg_dotaweekend_tourney_participation_details {
    // @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Tier {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
        pub tier: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
        pub players: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
        pub teams: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
        pub winning_teams: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
        pub players_streak_2: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
        pub players_streak_3: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
        pub players_streak_4: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
        pub players_streak_5: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyParticipationDetails.Tier.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Tier {
        fn default() -> &'a Tier {
            <Tier as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Tier {
        pub fn new() -> Tier {
            ::std::default::Default::default()
        }

        // optional uint32 tier = 1;

        pub fn tier(&self) -> u32 {
            self.tier.unwrap_or(0)
        }

        pub fn clear_tier(&mut self) {
            self.tier = ::std::option::Option::None;
        }

        pub fn has_tier(&self) -> bool {
            self.tier.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tier(&mut self, v: u32) {
            self.tier = ::std::option::Option::Some(v);
        }

        // optional uint32 players = 2;

        pub fn players(&self) -> u32 {
            self.players.unwrap_or(0)
        }

        pub fn clear_players(&mut self) {
            self.players = ::std::option::Option::None;
        }

        pub fn has_players(&self) -> bool {
            self.players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players(&mut self, v: u32) {
            self.players = ::std::option::Option::Some(v);
        }

        // optional uint32 teams = 3;

        pub fn teams(&self) -> u32 {
            self.teams.unwrap_or(0)
        }

        pub fn clear_teams(&mut self) {
            self.teams = ::std::option::Option::None;
        }

        pub fn has_teams(&self) -> bool {
            self.teams.is_some()
        }

        // Param is passed by value, moved
        pub fn set_teams(&mut self, v: u32) {
            self.teams = ::std::option::Option::Some(v);
        }

        // optional uint32 winning_teams = 4;

        pub fn winning_teams(&self) -> u32 {
            self.winning_teams.unwrap_or(0)
        }

        pub fn clear_winning_teams(&mut self) {
            self.winning_teams = ::std::option::Option::None;
        }

        pub fn has_winning_teams(&self) -> bool {
            self.winning_teams.is_some()
        }

        // Param is passed by value, moved
        pub fn set_winning_teams(&mut self, v: u32) {
            self.winning_teams = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_2 = 5;

        pub fn players_streak_2(&self) -> u32 {
            self.players_streak_2.unwrap_or(0)
        }

        pub fn clear_players_streak_2(&mut self) {
            self.players_streak_2 = ::std::option::Option::None;
        }

        pub fn has_players_streak_2(&self) -> bool {
            self.players_streak_2.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_2(&mut self, v: u32) {
            self.players_streak_2 = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_3 = 6;

        pub fn players_streak_3(&self) -> u32 {
            self.players_streak_3.unwrap_or(0)
        }

        pub fn clear_players_streak_3(&mut self) {
            self.players_streak_3 = ::std::option::Option::None;
        }

        pub fn has_players_streak_3(&self) -> bool {
            self.players_streak_3.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_3(&mut self, v: u32) {
            self.players_streak_3 = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_4 = 7;

        pub fn players_streak_4(&self) -> u32 {
            self.players_streak_4.unwrap_or(0)
        }

        pub fn clear_players_streak_4(&mut self) {
            self.players_streak_4 = ::std::option::Option::None;
        }

        pub fn has_players_streak_4(&self) -> bool {
            self.players_streak_4.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_4(&mut self, v: u32) {
            self.players_streak_4 = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_5 = 8;

        pub fn players_streak_5(&self) -> u32 {
            self.players_streak_5.unwrap_or(0)
        }

        pub fn clear_players_streak_5(&mut self) {
            self.players_streak_5 = ::std::option::Option::None;
        }

        pub fn has_players_streak_5(&self) -> bool {
            self.players_streak_5.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_5(&mut self, v: u32) {
            self.players_streak_5 = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Tier {
        const NAME: &'static str = "Tier";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tier = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.players = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.teams = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.winning_teams = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.players_streak_2 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.players_streak_3 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.players_streak_4 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.players_streak_5 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tier {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.players {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.teams {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.winning_teams {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.players_streak_2 {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.players_streak_3 {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            if let Some(v) = self.players_streak_4 {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.players_streak_5 {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.tier {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.players {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.teams {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.winning_teams {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.players_streak_2 {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.players_streak_3 {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.players_streak_4 {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.players_streak_5 {
                os.write_uint32(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Tier {
            Tier::new()
        }

        fn clear(&mut self) {
            self.tier = ::std::option::Option::None;
            self.players = ::std::option::Option::None;
            self.teams = ::std::option::Option::None;
            self.winning_teams = ::std::option::Option::None;
            self.players_streak_2 = ::std::option::Option::None;
            self.players_streak_3 = ::std::option::Option::None;
            self.players_streak_4 = ::std::option::Option::None;
            self.players_streak_5 = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Tier {
            static instance: Tier = Tier {
                tier: ::std::option::Option::None,
                players: ::std::option::Option::None,
                teams: ::std::option::Option::None,
                winning_teams: ::std::option::Option::None,
                players_streak_2: ::std::option::Option::None,
                players_streak_3: ::std::option::Option::None,
                players_streak_4: ::std::option::Option::None,
                players_streak_5: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTAWeekendTourneyParticipationDetails.Division)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Division {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
        pub division_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
        pub schedule_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
        pub tiers: ::std::vec::Vec<Tier>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAWeekendTourneyParticipationDetails.Division.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Division {
        fn default() -> &'a Division {
            <Division as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Division {
        pub fn new() -> Division {
            ::std::default::Default::default()
        }

        // optional uint32 division_id = 1;

        pub fn division_id(&self) -> u32 {
            self.division_id.unwrap_or(0)
        }

        pub fn clear_division_id(&mut self) {
            self.division_id = ::std::option::Option::None;
        }

        pub fn has_division_id(&self) -> bool {
            self.division_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_division_id(&mut self, v: u32) {
            self.division_id = ::std::option::Option::Some(v);
        }

        // optional uint32 schedule_time = 2;

        pub fn schedule_time(&self) -> u32 {
            self.schedule_time.unwrap_or(0)
        }

        pub fn clear_schedule_time(&mut self) {
            self.schedule_time = ::std::option::Option::None;
        }

        pub fn has_schedule_time(&self) -> bool {
            self.schedule_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_schedule_time(&mut self, v: u32) {
            self.schedule_time = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Division {
        const NAME: &'static str = "Division";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.division_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.schedule_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.tiers.push(is.read_message()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.division_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.schedule_time {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            for value in &self.tiers {
                let len = value.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.division_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.schedule_time {
                os.write_uint32(2, v)?;
            }
            for v in &self.tiers {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Division {
            Division::new()
        }

        fn clear(&mut self) {
            self.division_id = ::std::option::Option::None;
            self.schedule_time = ::std::option::Option::None;
            self.tiers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Division {
            static instance: Division = Division {
                division_id: ::std::option::Option::None,
                schedule_time: ::std::option::Option::None,
                tiers: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETournamentEvent)
pub enum ETournamentEvent {
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_None)
    k_ETournamentEvent_None = 0,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TournamentCreated)
    k_ETournamentEvent_TournamentCreated = 1,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TournamentsMerged)
    k_ETournamentEvent_TournamentsMerged = 2,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_GameOutcome)
    k_ETournamentEvent_GameOutcome = 3,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TeamGivenBye)
    k_ETournamentEvent_TeamGivenBye = 4,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TournamentCanceledByAdmin)
    k_ETournamentEvent_TournamentCanceledByAdmin = 5,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TeamAbandoned)
    k_ETournamentEvent_TeamAbandoned = 6,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_ScheduledGameStarted)
    k_ETournamentEvent_ScheduledGameStarted = 7,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_Canceled)
    k_ETournamentEvent_Canceled = 8,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund)
    k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund = 9,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit)
    k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit = 10,
    // @@protoc_insertion_point(enum_value:ETournamentEvent.k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory)
    k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory = 11,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETournamentEvent {
    const NAME: &'static str = "ETournamentEvent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentEvent> {
        match value {
            0 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_None),
            1 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCreated),
            2 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentsMerged),
            3 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_GameOutcome),
            4 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamGivenBye),
            5 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCanceledByAdmin),
            6 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamAbandoned),
            7 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_ScheduledGameStarted),
            8 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_Canceled),
            9 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund),
            10 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit),
            11 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentEvent> {
        match str {
            "k_ETournamentEvent_None" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_None),
            "k_ETournamentEvent_TournamentCreated" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCreated),
            "k_ETournamentEvent_TournamentsMerged" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentsMerged),
            "k_ETournamentEvent_GameOutcome" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_GameOutcome),
            "k_ETournamentEvent_TeamGivenBye" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamGivenBye),
            "k_ETournamentEvent_TournamentCanceledByAdmin" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCanceledByAdmin),
            "k_ETournamentEvent_TeamAbandoned" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamAbandoned),
            "k_ETournamentEvent_ScheduledGameStarted" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_ScheduledGameStarted),
            "k_ETournamentEvent_Canceled" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_Canceled),
            "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund),
            "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit),
            "k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentEvent] = &[
        ETournamentEvent::k_ETournamentEvent_None,
        ETournamentEvent::k_ETournamentEvent_TournamentCreated,
        ETournamentEvent::k_ETournamentEvent_TournamentsMerged,
        ETournamentEvent::k_ETournamentEvent_GameOutcome,
        ETournamentEvent::k_ETournamentEvent_TeamGivenBye,
        ETournamentEvent::k_ETournamentEvent_TournamentCanceledByAdmin,
        ETournamentEvent::k_ETournamentEvent_TeamAbandoned,
        ETournamentEvent::k_ETournamentEvent_ScheduledGameStarted,
        ETournamentEvent::k_ETournamentEvent_Canceled,
        ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund,
        ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit,
        ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory,
    ];
}

impl ::std::default::Default for ETournamentEvent {
    fn default() -> Self {
        ETournamentEvent::k_ETournamentEvent_None
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::dota_client_enums::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgRequestWeekendTourneySchedule {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgWeekendTourneySchedule {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgWeekendTourneyOpts {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgWeekendTourneyLeave {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATournament {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATournamentStateChange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAWeekendTourneyPlayerStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAWeekendTourneyPlayerStatsRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAWeekendTourneyPlayerHistory {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgDOTAWeekendTourneyParticipationDetails {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
