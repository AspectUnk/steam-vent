// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_common_bot_script.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgBotWorldState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgBotWorldState {
    // message fields
    // @@protoc_insertion_point(field:CMsgBotWorldState.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.game_time)
    pub game_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.dota_time)
    pub dota_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.game_state)
    pub game_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.hero_pick_state)
    pub hero_pick_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.time_of_day)
    pub time_of_day: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.glyph_cooldown)
    pub glyph_cooldown: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.glyph_cooldown_enemy)
    pub glyph_cooldown_enemy: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.players)
    pub players: ::std::vec::Vec<cmsg_bot_world_state::Player>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.units)
    pub units: ::std::vec::Vec<cmsg_bot_world_state::Unit>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.dropped_items)
    pub dropped_items: ::std::vec::Vec<cmsg_bot_world_state::DroppedItem>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.dropped_items_deltas)
    pub dropped_items_deltas: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.rune_infos)
    pub rune_infos: ::std::vec::Vec<cmsg_bot_world_state::RuneInfo>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.rune_infos_deltas)
    pub rune_infos_deltas: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.incoming_teleports)
    pub incoming_teleports: ::std::vec::Vec<cmsg_bot_world_state::TeleportInfo>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.linear_projectiles)
    pub linear_projectiles: ::std::vec::Vec<cmsg_bot_world_state::LinearProjectile>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.avoidance_zones)
    pub avoidance_zones: ::std::vec::Vec<cmsg_bot_world_state::AvoidanceZone>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.couriers)
    pub couriers: ::std::vec::Vec<cmsg_bot_world_state::Courier>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.ability_events)
    pub ability_events: ::std::vec::Vec<cmsg_bot_world_state::EventAbility>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.damage_events)
    pub damage_events: ::std::vec::Vec<cmsg_bot_world_state::EventDamage>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.courier_killed_events)
    pub courier_killed_events: ::std::vec::Vec<cmsg_bot_world_state::EventCourierKilled>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.roshan_killed_events)
    pub roshan_killed_events: ::std::vec::Vec<cmsg_bot_world_state::EventRoshanKilled>,
    // @@protoc_insertion_point(field:CMsgBotWorldState.tree_events)
    pub tree_events: ::std::vec::Vec<cmsg_bot_world_state::EventTree>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgBotWorldState.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgBotWorldState {
    fn default() -> &'a CMsgBotWorldState {
        <CMsgBotWorldState as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgBotWorldState {
    pub fn new() -> CMsgBotWorldState {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 1;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional float game_time = 2;

    pub fn game_time(&self) -> f32 {
        self.game_time.unwrap_or(0.)
    }

    pub fn clear_game_time(&mut self) {
        self.game_time = ::std::option::Option::None;
    }

    pub fn has_game_time(&self) -> bool {
        self.game_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_time(&mut self, v: f32) {
        self.game_time = ::std::option::Option::Some(v);
    }

    // optional float dota_time = 3;

    pub fn dota_time(&self) -> f32 {
        self.dota_time.unwrap_or(0.)
    }

    pub fn clear_dota_time(&mut self) {
        self.dota_time = ::std::option::Option::None;
    }

    pub fn has_dota_time(&self) -> bool {
        self.dota_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dota_time(&mut self, v: f32) {
        self.dota_time = ::std::option::Option::Some(v);
    }

    // optional uint32 game_state = 4;

    pub fn game_state(&self) -> u32 {
        self.game_state.unwrap_or(0)
    }

    pub fn clear_game_state(&mut self) {
        self.game_state = ::std::option::Option::None;
    }

    pub fn has_game_state(&self) -> bool {
        self.game_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_state(&mut self, v: u32) {
        self.game_state = ::std::option::Option::Some(v);
    }

    // optional uint32 hero_pick_state = 5;

    pub fn hero_pick_state(&self) -> u32 {
        self.hero_pick_state.unwrap_or(0)
    }

    pub fn clear_hero_pick_state(&mut self) {
        self.hero_pick_state = ::std::option::Option::None;
    }

    pub fn has_hero_pick_state(&self) -> bool {
        self.hero_pick_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_pick_state(&mut self, v: u32) {
        self.hero_pick_state = ::std::option::Option::Some(v);
    }

    // optional float time_of_day = 6;

    pub fn time_of_day(&self) -> f32 {
        self.time_of_day.unwrap_or(0.)
    }

    pub fn clear_time_of_day(&mut self) {
        self.time_of_day = ::std::option::Option::None;
    }

    pub fn has_time_of_day(&self) -> bool {
        self.time_of_day.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_of_day(&mut self, v: f32) {
        self.time_of_day = ::std::option::Option::Some(v);
    }

    // optional float glyph_cooldown = 7;

    pub fn glyph_cooldown(&self) -> f32 {
        self.glyph_cooldown.unwrap_or(0.)
    }

    pub fn clear_glyph_cooldown(&mut self) {
        self.glyph_cooldown = ::std::option::Option::None;
    }

    pub fn has_glyph_cooldown(&self) -> bool {
        self.glyph_cooldown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_cooldown(&mut self, v: f32) {
        self.glyph_cooldown = ::std::option::Option::Some(v);
    }

    // optional float glyph_cooldown_enemy = 8;

    pub fn glyph_cooldown_enemy(&self) -> f32 {
        self.glyph_cooldown_enemy.unwrap_or(0.)
    }

    pub fn clear_glyph_cooldown_enemy(&mut self) {
        self.glyph_cooldown_enemy = ::std::option::Option::None;
    }

    pub fn has_glyph_cooldown_enemy(&self) -> bool {
        self.glyph_cooldown_enemy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_cooldown_enemy(&mut self, v: f32) {
        self.glyph_cooldown_enemy = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgBotWorldState {
    const NAME: &'static str = "CMsgBotWorldState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                21 => {
                    self.game_time = ::std::option::Option::Some(is.read_float()?);
                },
                29 => {
                    self.dota_time = ::std::option::Option::Some(is.read_float()?);
                },
                32 => {
                    self.game_state = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.hero_pick_state = ::std::option::Option::Some(is.read_uint32()?);
                },
                53 => {
                    self.time_of_day = ::std::option::Option::Some(is.read_float()?);
                },
                61 => {
                    self.glyph_cooldown = ::std::option::Option::Some(is.read_float()?);
                },
                69 => {
                    self.glyph_cooldown_enemy = ::std::option::Option::Some(is.read_float()?);
                },
                82 => {
                    self.players.push(is.read_message()?);
                },
                90 => {
                    self.units.push(is.read_message()?);
                },
                98 => {
                    self.dropped_items.push(is.read_message()?);
                },
                898 => {
                    is.read_repeated_packed_int32_into(&mut self.dropped_items_deltas)?;
                },
                896 => {
                    self.dropped_items_deltas.push(is.read_int32()?);
                },
                106 => {
                    self.rune_infos.push(is.read_message()?);
                },
                906 => {
                    is.read_repeated_packed_int32_into(&mut self.rune_infos_deltas)?;
                },
                904 => {
                    self.rune_infos_deltas.push(is.read_int32()?);
                },
                114 => {
                    self.incoming_teleports.push(is.read_message()?);
                },
                122 => {
                    self.linear_projectiles.push(is.read_message()?);
                },
                130 => {
                    self.avoidance_zones.push(is.read_message()?);
                },
                138 => {
                    self.couriers.push(is.read_message()?);
                },
                162 => {
                    self.ability_events.push(is.read_message()?);
                },
                170 => {
                    self.damage_events.push(is.read_message()?);
                },
                178 => {
                    self.courier_killed_events.push(is.read_message()?);
                },
                186 => {
                    self.roshan_killed_events.push(is.read_message()?);
                },
                194 => {
                    self.tree_events.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.game_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.dota_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.game_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.hero_pick_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.time_of_day {
            my_size += 1 + 4;
        }
        if let Some(v) = self.glyph_cooldown {
            my_size += 1 + 4;
        }
        if let Some(v) = self.glyph_cooldown_enemy {
            my_size += 1 + 4;
        }
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.units {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.dropped_items {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.dropped_items_deltas {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(112, *value);
        };
        for value in &self.rune_infos {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.rune_infos_deltas {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(113, *value);
        };
        for value in &self.incoming_teleports {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.linear_projectiles {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.avoidance_zones {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.couriers {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ability_events {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.damage_events {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.courier_killed_events {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.roshan_killed_events {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.tree_events {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.team_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.game_time {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.dota_time {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.game_state {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.hero_pick_state {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_of_day {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.glyph_cooldown {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.glyph_cooldown_enemy {
            os.write_float(8, v)?;
        }
        for v in &self.players {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.units {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.dropped_items {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.dropped_items_deltas {
            os.write_int32(112, *v)?;
        };
        for v in &self.rune_infos {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        for v in &self.rune_infos_deltas {
            os.write_int32(113, *v)?;
        };
        for v in &self.incoming_teleports {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.linear_projectiles {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for v in &self.avoidance_zones {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        for v in &self.couriers {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        };
        for v in &self.ability_events {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        };
        for v in &self.damage_events {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        for v in &self.courier_killed_events {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        for v in &self.roshan_killed_events {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.tree_events {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgBotWorldState {
        CMsgBotWorldState::new()
    }

    fn clear(&mut self) {
        self.team_id = ::std::option::Option::None;
        self.game_time = ::std::option::Option::None;
        self.dota_time = ::std::option::Option::None;
        self.game_state = ::std::option::Option::None;
        self.hero_pick_state = ::std::option::Option::None;
        self.time_of_day = ::std::option::Option::None;
        self.glyph_cooldown = ::std::option::Option::None;
        self.glyph_cooldown_enemy = ::std::option::Option::None;
        self.players.clear();
        self.units.clear();
        self.dropped_items.clear();
        self.dropped_items_deltas.clear();
        self.rune_infos.clear();
        self.rune_infos_deltas.clear();
        self.incoming_teleports.clear();
        self.linear_projectiles.clear();
        self.avoidance_zones.clear();
        self.couriers.clear();
        self.ability_events.clear();
        self.damage_events.clear();
        self.courier_killed_events.clear();
        self.roshan_killed_events.clear();
        self.tree_events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgBotWorldState {
        static instance: CMsgBotWorldState = CMsgBotWorldState {
            team_id: ::std::option::Option::None,
            game_time: ::std::option::Option::None,
            dota_time: ::std::option::Option::None,
            game_state: ::std::option::Option::None,
            hero_pick_state: ::std::option::Option::None,
            time_of_day: ::std::option::Option::None,
            glyph_cooldown: ::std::option::Option::None,
            glyph_cooldown_enemy: ::std::option::Option::None,
            players: ::std::vec::Vec::new(),
            units: ::std::vec::Vec::new(),
            dropped_items: ::std::vec::Vec::new(),
            dropped_items_deltas: ::std::vec::Vec::new(),
            rune_infos: ::std::vec::Vec::new(),
            rune_infos_deltas: ::std::vec::Vec::new(),
            incoming_teleports: ::std::vec::Vec::new(),
            linear_projectiles: ::std::vec::Vec::new(),
            avoidance_zones: ::std::vec::Vec::new(),
            couriers: ::std::vec::Vec::new(),
            ability_events: ::std::vec::Vec::new(),
            damage_events: ::std::vec::Vec::new(),
            courier_killed_events: ::std::vec::Vec::new(),
            roshan_killed_events: ::std::vec::Vec::new(),
            tree_events: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgBotWorldState`
pub mod cmsg_bot_world_state {
    // @@protoc_insertion_point(message:CMsgBotWorldState.Vector)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Vector {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.Vector.x)
        pub x: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Vector.y)
        pub y: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Vector.z)
        pub z: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.Vector.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Vector {
        fn default() -> &'a Vector {
            <Vector as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Vector {
        pub fn new() -> Vector {
            ::std::default::Default::default()
        }

        // optional float x = 1;

        pub fn x(&self) -> f32 {
            self.x.unwrap_or(0.)
        }

        pub fn clear_x(&mut self) {
            self.x = ::std::option::Option::None;
        }

        pub fn has_x(&self) -> bool {
            self.x.is_some()
        }

        // Param is passed by value, moved
        pub fn set_x(&mut self, v: f32) {
            self.x = ::std::option::Option::Some(v);
        }

        // optional float y = 2;

        pub fn y(&self) -> f32 {
            self.y.unwrap_or(0.)
        }

        pub fn clear_y(&mut self) {
            self.y = ::std::option::Option::None;
        }

        pub fn has_y(&self) -> bool {
            self.y.is_some()
        }

        // Param is passed by value, moved
        pub fn set_y(&mut self, v: f32) {
            self.y = ::std::option::Option::Some(v);
        }

        // optional float z = 3;

        pub fn z(&self) -> f32 {
            self.z.unwrap_or(0.)
        }

        pub fn clear_z(&mut self) {
            self.z = ::std::option::Option::None;
        }

        pub fn has_z(&self) -> bool {
            self.z.is_some()
        }

        // Param is passed by value, moved
        pub fn set_z(&mut self, v: f32) {
            self.z = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Vector {
        const NAME: &'static str = "Vector";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.x = ::std::option::Option::Some(is.read_float()?);
                    },
                    21 => {
                        self.y = ::std::option::Option::Some(is.read_float()?);
                    },
                    29 => {
                        self.z = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.x {
                my_size += 1 + 4;
            }
            if let Some(v) = self.y {
                my_size += 1 + 4;
            }
            if let Some(v) = self.z {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.x {
                os.write_float(1, v)?;
            }
            if let Some(v) = self.y {
                os.write_float(2, v)?;
            }
            if let Some(v) = self.z {
                os.write_float(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Vector {
            Vector::new()
        }

        fn clear(&mut self) {
            self.x = ::std::option::Option::None;
            self.y = ::std::option::Option::None;
            self.z = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Vector {
            static instance: Vector = Vector {
                x: ::std::option::Option::None,
                y: ::std::option::Option::None,
                z: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.player_id)
        pub player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.hero_id)
        pub hero_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.is_alive)
        pub is_alive: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.respawn_time)
        pub respawn_time: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.kills)
        pub kills: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.deaths)
        pub deaths: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.assists)
        pub assists: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.primary_unit_handle)
        pub primary_unit_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.mmr)
        pub mmr: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Player.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.Player.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional int32 player_id = 1;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(0)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }

        // optional int32 hero_id = 2;

        pub fn hero_id(&self) -> i32 {
            self.hero_id.unwrap_or(0)
        }

        pub fn clear_hero_id(&mut self) {
            self.hero_id = ::std::option::Option::None;
        }

        pub fn has_hero_id(&self) -> bool {
            self.hero_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hero_id(&mut self, v: i32) {
            self.hero_id = ::std::option::Option::Some(v);
        }

        // optional bool is_alive = 3;

        pub fn is_alive(&self) -> bool {
            self.is_alive.unwrap_or(false)
        }

        pub fn clear_is_alive(&mut self) {
            self.is_alive = ::std::option::Option::None;
        }

        pub fn has_is_alive(&self) -> bool {
            self.is_alive.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_alive(&mut self, v: bool) {
            self.is_alive = ::std::option::Option::Some(v);
        }

        // optional float respawn_time = 4;

        pub fn respawn_time(&self) -> f32 {
            self.respawn_time.unwrap_or(0.)
        }

        pub fn clear_respawn_time(&mut self) {
            self.respawn_time = ::std::option::Option::None;
        }

        pub fn has_respawn_time(&self) -> bool {
            self.respawn_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_respawn_time(&mut self, v: f32) {
            self.respawn_time = ::std::option::Option::Some(v);
        }

        // optional uint32 kills = 5;

        pub fn kills(&self) -> u32 {
            self.kills.unwrap_or(0)
        }

        pub fn clear_kills(&mut self) {
            self.kills = ::std::option::Option::None;
        }

        pub fn has_kills(&self) -> bool {
            self.kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_kills(&mut self, v: u32) {
            self.kills = ::std::option::Option::Some(v);
        }

        // optional uint32 deaths = 6;

        pub fn deaths(&self) -> u32 {
            self.deaths.unwrap_or(0)
        }

        pub fn clear_deaths(&mut self) {
            self.deaths = ::std::option::Option::None;
        }

        pub fn has_deaths(&self) -> bool {
            self.deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_deaths(&mut self, v: u32) {
            self.deaths = ::std::option::Option::Some(v);
        }

        // optional uint32 assists = 7;

        pub fn assists(&self) -> u32 {
            self.assists.unwrap_or(0)
        }

        pub fn clear_assists(&mut self) {
            self.assists = ::std::option::Option::None;
        }

        pub fn has_assists(&self) -> bool {
            self.assists.is_some()
        }

        // Param is passed by value, moved
        pub fn set_assists(&mut self, v: u32) {
            self.assists = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 8;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 primary_unit_handle = 9;

        pub fn primary_unit_handle(&self) -> u32 {
            self.primary_unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_primary_unit_handle(&mut self) {
            self.primary_unit_handle = ::std::option::Option::None;
        }

        pub fn has_primary_unit_handle(&self) -> bool {
            self.primary_unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_primary_unit_handle(&mut self, v: u32) {
            self.primary_unit_handle = ::std::option::Option::Some(v);
        }

        // optional int32 mmr = 10;

        pub fn mmr(&self) -> i32 {
            self.mmr.unwrap_or(0)
        }

        pub fn clear_mmr(&mut self) {
            self.mmr = ::std::option::Option::None;
        }

        pub fn has_mmr(&self) -> bool {
            self.mmr.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mmr(&mut self, v: i32) {
            self.mmr = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.hero_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.is_alive = ::std::option::Option::Some(is.read_bool()?);
                    },
                    37 => {
                        self.respawn_time = ::std::option::Option::Some(is.read_float()?);
                    },
                    40 => {
                        self.kills = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.deaths = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.assists = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    72 => {
                        self.primary_unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    80 => {
                        self.mmr = ::std::option::Option::Some(is.read_int32()?);
                    },
                    90 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.hero_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.is_alive {
                my_size += 1 + 1;
            }
            if let Some(v) = self.respawn_time {
                my_size += 1 + 4;
            }
            if let Some(v) = self.kills {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.deaths {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            if let Some(v) = self.assists {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
            }
            if let Some(v) = self.primary_unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
            }
            if let Some(v) = self.mmr {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(10, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.player_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.hero_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.is_alive {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.respawn_time {
                os.write_float(4, v)?;
            }
            if let Some(v) = self.kills {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.deaths {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.assists {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(8, v)?;
            }
            if let Some(v) = self.primary_unit_handle {
                os.write_uint32(9, v)?;
            }
            if let Some(v) = self.mmr {
                os.write_int32(10, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.player_id = ::std::option::Option::None;
            self.hero_id = ::std::option::Option::None;
            self.is_alive = ::std::option::Option::None;
            self.respawn_time = ::std::option::Option::None;
            self.kills = ::std::option::Option::None;
            self.deaths = ::std::option::Option::None;
            self.assists = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.primary_unit_handle = ::std::option::Option::None;
            self.mmr = ::std::option::Option::None;
            self.location.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                player_id: ::std::option::Option::None,
                hero_id: ::std::option::Option::None,
                is_alive: ::std::option::Option::None,
                respawn_time: ::std::option::Option::None,
                kills: ::std::option::Option::None,
                deaths: ::std::option::Option::None,
                assists: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                primary_unit_handle: ::std::option::Option::None,
                mmr: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.Ability)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Ability {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.handle)
        pub handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.slot)
        pub slot: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.caster_handle)
        pub caster_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.level)
        pub level: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.cast_range)
        pub cast_range: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.channel_time)
        pub channel_time: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.cooldown_remaining)
        pub cooldown_remaining: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_activated)
        pub is_activated: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_toggled)
        pub is_toggled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_in_ability_phase)
        pub is_in_ability_phase: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_channeling)
        pub is_channeling: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_stolen)
        pub is_stolen: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_fully_castable)
        pub is_fully_castable: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.charges)
        pub charges: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.secondary_charges)
        pub secondary_charges: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.is_combined_locked)
        pub is_combined_locked: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Ability.power_treads_stat)
        pub power_treads_stat: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.Ability.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Ability {
        fn default() -> &'a Ability {
            <Ability as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Ability {
        pub fn new() -> Ability {
            ::std::default::Default::default()
        }

        // optional uint32 handle = 1;

        pub fn handle(&self) -> u32 {
            self.handle.unwrap_or(0)
        }

        pub fn clear_handle(&mut self) {
            self.handle = ::std::option::Option::None;
        }

        pub fn has_handle(&self) -> bool {
            self.handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_handle(&mut self, v: u32) {
            self.handle = ::std::option::Option::Some(v);
        }

        // optional int32 ability_id = 2;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }

        // optional uint32 slot = 3;

        pub fn slot(&self) -> u32 {
            self.slot.unwrap_or(0)
        }

        pub fn clear_slot(&mut self) {
            self.slot = ::std::option::Option::None;
        }

        pub fn has_slot(&self) -> bool {
            self.slot.is_some()
        }

        // Param is passed by value, moved
        pub fn set_slot(&mut self, v: u32) {
            self.slot = ::std::option::Option::Some(v);
        }

        // optional uint32 caster_handle = 5;

        pub fn caster_handle(&self) -> u32 {
            self.caster_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_caster_handle(&mut self) {
            self.caster_handle = ::std::option::Option::None;
        }

        pub fn has_caster_handle(&self) -> bool {
            self.caster_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_handle(&mut self, v: u32) {
            self.caster_handle = ::std::option::Option::Some(v);
        }

        // optional uint32 level = 6;

        pub fn level(&self) -> u32 {
            self.level.unwrap_or(0)
        }

        pub fn clear_level(&mut self) {
            self.level = ::std::option::Option::None;
        }

        pub fn has_level(&self) -> bool {
            self.level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_level(&mut self, v: u32) {
            self.level = ::std::option::Option::Some(v);
        }

        // optional uint32 cast_range = 10;

        pub fn cast_range(&self) -> u32 {
            self.cast_range.unwrap_or(0)
        }

        pub fn clear_cast_range(&mut self) {
            self.cast_range = ::std::option::Option::None;
        }

        pub fn has_cast_range(&self) -> bool {
            self.cast_range.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cast_range(&mut self, v: u32) {
            self.cast_range = ::std::option::Option::Some(v);
        }

        // optional float channel_time = 11;

        pub fn channel_time(&self) -> f32 {
            self.channel_time.unwrap_or(0.)
        }

        pub fn clear_channel_time(&mut self) {
            self.channel_time = ::std::option::Option::None;
        }

        pub fn has_channel_time(&self) -> bool {
            self.channel_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_time(&mut self, v: f32) {
            self.channel_time = ::std::option::Option::Some(v);
        }

        // optional float cooldown_remaining = 12;

        pub fn cooldown_remaining(&self) -> f32 {
            self.cooldown_remaining.unwrap_or(0.0f32)
        }

        pub fn clear_cooldown_remaining(&mut self) {
            self.cooldown_remaining = ::std::option::Option::None;
        }

        pub fn has_cooldown_remaining(&self) -> bool {
            self.cooldown_remaining.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cooldown_remaining(&mut self, v: f32) {
            self.cooldown_remaining = ::std::option::Option::Some(v);
        }

        // optional bool is_activated = 20;

        pub fn is_activated(&self) -> bool {
            self.is_activated.unwrap_or(false)
        }

        pub fn clear_is_activated(&mut self) {
            self.is_activated = ::std::option::Option::None;
        }

        pub fn has_is_activated(&self) -> bool {
            self.is_activated.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_activated(&mut self, v: bool) {
            self.is_activated = ::std::option::Option::Some(v);
        }

        // optional bool is_toggled = 21;

        pub fn is_toggled(&self) -> bool {
            self.is_toggled.unwrap_or(false)
        }

        pub fn clear_is_toggled(&mut self) {
            self.is_toggled = ::std::option::Option::None;
        }

        pub fn has_is_toggled(&self) -> bool {
            self.is_toggled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_toggled(&mut self, v: bool) {
            self.is_toggled = ::std::option::Option::Some(v);
        }

        // optional bool is_in_ability_phase = 22;

        pub fn is_in_ability_phase(&self) -> bool {
            self.is_in_ability_phase.unwrap_or(false)
        }

        pub fn clear_is_in_ability_phase(&mut self) {
            self.is_in_ability_phase = ::std::option::Option::None;
        }

        pub fn has_is_in_ability_phase(&self) -> bool {
            self.is_in_ability_phase.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_in_ability_phase(&mut self, v: bool) {
            self.is_in_ability_phase = ::std::option::Option::Some(v);
        }

        // optional bool is_channeling = 23;

        pub fn is_channeling(&self) -> bool {
            self.is_channeling.unwrap_or(false)
        }

        pub fn clear_is_channeling(&mut self) {
            self.is_channeling = ::std::option::Option::None;
        }

        pub fn has_is_channeling(&self) -> bool {
            self.is_channeling.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_channeling(&mut self, v: bool) {
            self.is_channeling = ::std::option::Option::Some(v);
        }

        // optional bool is_stolen = 24;

        pub fn is_stolen(&self) -> bool {
            self.is_stolen.unwrap_or(false)
        }

        pub fn clear_is_stolen(&mut self) {
            self.is_stolen = ::std::option::Option::None;
        }

        pub fn has_is_stolen(&self) -> bool {
            self.is_stolen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_stolen(&mut self, v: bool) {
            self.is_stolen = ::std::option::Option::Some(v);
        }

        // optional bool is_fully_castable = 25;

        pub fn is_fully_castable(&self) -> bool {
            self.is_fully_castable.unwrap_or(false)
        }

        pub fn clear_is_fully_castable(&mut self) {
            self.is_fully_castable = ::std::option::Option::None;
        }

        pub fn has_is_fully_castable(&self) -> bool {
            self.is_fully_castable.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_fully_castable(&mut self, v: bool) {
            self.is_fully_castable = ::std::option::Option::Some(v);
        }

        // optional uint32 charges = 30;

        pub fn charges(&self) -> u32 {
            self.charges.unwrap_or(0)
        }

        pub fn clear_charges(&mut self) {
            self.charges = ::std::option::Option::None;
        }

        pub fn has_charges(&self) -> bool {
            self.charges.is_some()
        }

        // Param is passed by value, moved
        pub fn set_charges(&mut self, v: u32) {
            self.charges = ::std::option::Option::Some(v);
        }

        // optional uint32 secondary_charges = 31;

        pub fn secondary_charges(&self) -> u32 {
            self.secondary_charges.unwrap_or(0)
        }

        pub fn clear_secondary_charges(&mut self) {
            self.secondary_charges = ::std::option::Option::None;
        }

        pub fn has_secondary_charges(&self) -> bool {
            self.secondary_charges.is_some()
        }

        // Param is passed by value, moved
        pub fn set_secondary_charges(&mut self, v: u32) {
            self.secondary_charges = ::std::option::Option::Some(v);
        }

        // optional bool is_combined_locked = 40;

        pub fn is_combined_locked(&self) -> bool {
            self.is_combined_locked.unwrap_or(false)
        }

        pub fn clear_is_combined_locked(&mut self) {
            self.is_combined_locked = ::std::option::Option::None;
        }

        pub fn has_is_combined_locked(&self) -> bool {
            self.is_combined_locked.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_combined_locked(&mut self, v: bool) {
            self.is_combined_locked = ::std::option::Option::Some(v);
        }

        // optional int32 power_treads_stat = 50;

        pub fn power_treads_stat(&self) -> i32 {
            self.power_treads_stat.unwrap_or(-1i32)
        }

        pub fn clear_power_treads_stat(&mut self) {
            self.power_treads_stat = ::std::option::Option::None;
        }

        pub fn has_power_treads_stat(&self) -> bool {
            self.power_treads_stat.is_some()
        }

        // Param is passed by value, moved
        pub fn set_power_treads_stat(&mut self, v: i32) {
            self.power_treads_stat = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Ability {
        const NAME: &'static str = "Ability";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.slot = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.caster_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.level = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    80 => {
                        self.cast_range = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    93 => {
                        self.channel_time = ::std::option::Option::Some(is.read_float()?);
                    },
                    101 => {
                        self.cooldown_remaining = ::std::option::Option::Some(is.read_float()?);
                    },
                    160 => {
                        self.is_activated = ::std::option::Option::Some(is.read_bool()?);
                    },
                    168 => {
                        self.is_toggled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    176 => {
                        self.is_in_ability_phase = ::std::option::Option::Some(is.read_bool()?);
                    },
                    184 => {
                        self.is_channeling = ::std::option::Option::Some(is.read_bool()?);
                    },
                    192 => {
                        self.is_stolen = ::std::option::Option::Some(is.read_bool()?);
                    },
                    200 => {
                        self.is_fully_castable = ::std::option::Option::Some(is.read_bool()?);
                    },
                    240 => {
                        self.charges = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    248 => {
                        self.secondary_charges = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    320 => {
                        self.is_combined_locked = ::std::option::Option::Some(is.read_bool()?);
                    },
                    400 => {
                        self.power_treads_stat = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.slot {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.caster_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.level {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            if let Some(v) = self.cast_range {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
            }
            if let Some(v) = self.channel_time {
                my_size += 1 + 4;
            }
            if let Some(v) = self.cooldown_remaining {
                my_size += 1 + 4;
            }
            if let Some(v) = self.is_activated {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_toggled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_in_ability_phase {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_channeling {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_stolen {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_fully_castable {
                my_size += 2 + 1;
            }
            if let Some(v) = self.charges {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(30, v);
            }
            if let Some(v) = self.secondary_charges {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(31, v);
            }
            if let Some(v) = self.is_combined_locked {
                my_size += 2 + 1;
            }
            if let Some(v) = self.power_treads_stat {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(50, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.handle {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.ability_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.slot {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.caster_handle {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.level {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.cast_range {
                os.write_uint32(10, v)?;
            }
            if let Some(v) = self.channel_time {
                os.write_float(11, v)?;
            }
            if let Some(v) = self.cooldown_remaining {
                os.write_float(12, v)?;
            }
            if let Some(v) = self.is_activated {
                os.write_bool(20, v)?;
            }
            if let Some(v) = self.is_toggled {
                os.write_bool(21, v)?;
            }
            if let Some(v) = self.is_in_ability_phase {
                os.write_bool(22, v)?;
            }
            if let Some(v) = self.is_channeling {
                os.write_bool(23, v)?;
            }
            if let Some(v) = self.is_stolen {
                os.write_bool(24, v)?;
            }
            if let Some(v) = self.is_fully_castable {
                os.write_bool(25, v)?;
            }
            if let Some(v) = self.charges {
                os.write_uint32(30, v)?;
            }
            if let Some(v) = self.secondary_charges {
                os.write_uint32(31, v)?;
            }
            if let Some(v) = self.is_combined_locked {
                os.write_bool(40, v)?;
            }
            if let Some(v) = self.power_treads_stat {
                os.write_int32(50, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Ability {
            Ability::new()
        }

        fn clear(&mut self) {
            self.handle = ::std::option::Option::None;
            self.ability_id = ::std::option::Option::None;
            self.slot = ::std::option::Option::None;
            self.caster_handle = ::std::option::Option::None;
            self.level = ::std::option::Option::None;
            self.cast_range = ::std::option::Option::None;
            self.channel_time = ::std::option::Option::None;
            self.cooldown_remaining = ::std::option::Option::None;
            self.is_activated = ::std::option::Option::None;
            self.is_toggled = ::std::option::Option::None;
            self.is_in_ability_phase = ::std::option::Option::None;
            self.is_channeling = ::std::option::Option::None;
            self.is_stolen = ::std::option::Option::None;
            self.is_fully_castable = ::std::option::Option::None;
            self.charges = ::std::option::Option::None;
            self.secondary_charges = ::std::option::Option::None;
            self.is_combined_locked = ::std::option::Option::None;
            self.power_treads_stat = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Ability {
            static instance: Ability = Ability {
                handle: ::std::option::Option::None,
                ability_id: ::std::option::Option::None,
                slot: ::std::option::Option::None,
                caster_handle: ::std::option::Option::None,
                level: ::std::option::Option::None,
                cast_range: ::std::option::Option::None,
                channel_time: ::std::option::Option::None,
                cooldown_remaining: ::std::option::Option::None,
                is_activated: ::std::option::Option::None,
                is_toggled: ::std::option::Option::None,
                is_in_ability_phase: ::std::option::Option::None,
                is_channeling: ::std::option::Option::None,
                is_stolen: ::std::option::Option::None,
                is_fully_castable: ::std::option::Option::None,
                charges: ::std::option::Option::None,
                secondary_charges: ::std::option::Option::None,
                is_combined_locked: ::std::option::Option::None,
                power_treads_stat: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.DroppedItem)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DroppedItem {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.DroppedItem.item_id)
        pub item_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.DroppedItem.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.DroppedItem.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DroppedItem {
        fn default() -> &'a DroppedItem {
            <DroppedItem as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl DroppedItem {
        pub fn new() -> DroppedItem {
            ::std::default::Default::default()
        }

        // optional int32 item_id = 1;

        pub fn item_id(&self) -> i32 {
            self.item_id.unwrap_or(-1i32)
        }

        pub fn clear_item_id(&mut self) {
            self.item_id = ::std::option::Option::None;
        }

        pub fn has_item_id(&self) -> bool {
            self.item_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_item_id(&mut self, v: i32) {
            self.item_id = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for DroppedItem {
        const NAME: &'static str = "DroppedItem";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.item_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.item_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.item_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DroppedItem {
            DroppedItem::new()
        }

        fn clear(&mut self) {
            self.item_id = ::std::option::Option::None;
            self.location.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DroppedItem {
            static instance: DroppedItem = DroppedItem {
                item_id: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.RuneInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RuneInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.RuneInfo.type)
        pub type_: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.RuneInfo.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.RuneInfo.status)
        pub status: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.RuneInfo.time_since_seen)
        pub time_since_seen: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.RuneInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RuneInfo {
        fn default() -> &'a RuneInfo {
            <RuneInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl RuneInfo {
        pub fn new() -> RuneInfo {
            ::std::default::Default::default()
        }

        // optional int32 type = 1;

        pub fn type_(&self) -> i32 {
            self.type_.unwrap_or(0)
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: i32) {
            self.type_ = ::std::option::Option::Some(v);
        }

        // optional uint32 status = 3;

        pub fn status(&self) -> u32 {
            self.status.unwrap_or(0)
        }

        pub fn clear_status(&mut self) {
            self.status = ::std::option::Option::None;
        }

        pub fn has_status(&self) -> bool {
            self.status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_status(&mut self, v: u32) {
            self.status = ::std::option::Option::Some(v);
        }

        // optional float time_since_seen = 4;

        pub fn time_since_seen(&self) -> f32 {
            self.time_since_seen.unwrap_or(0.)
        }

        pub fn clear_time_since_seen(&mut self) {
            self.time_since_seen = ::std::option::Option::None;
        }

        pub fn has_time_since_seen(&self) -> bool {
            self.time_since_seen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_since_seen(&mut self, v: f32) {
            self.time_since_seen = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for RuneInfo {
        const NAME: &'static str = "RuneInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(is.read_int32()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    24 => {
                        self.status = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    37 => {
                        self.time_since_seen = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.type_ {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.status {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.time_since_seen {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.type_ {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.status {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.time_since_seen {
                os.write_float(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RuneInfo {
            RuneInfo::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.location.clear();
            self.status = ::std::option::Option::None;
            self.time_since_seen = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RuneInfo {
            static instance: RuneInfo = RuneInfo {
                type_: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                status: ::std::option::Option::None,
                time_since_seen: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.TeleportInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeleportInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.TeleportInfo.player_id)
        pub player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TeleportInfo.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TeleportInfo.time_remaining)
        pub time_remaining: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.TeleportInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeleportInfo {
        fn default() -> &'a TeleportInfo {
            <TeleportInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TeleportInfo {
        pub fn new() -> TeleportInfo {
            ::std::default::Default::default()
        }

        // optional int32 player_id = 1;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(0)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }

        // optional float time_remaining = 3;

        pub fn time_remaining(&self) -> f32 {
            self.time_remaining.unwrap_or(0.)
        }

        pub fn clear_time_remaining(&mut self) {
            self.time_remaining = ::std::option::Option::None;
        }

        pub fn has_time_remaining(&self) -> bool {
            self.time_remaining.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_remaining(&mut self, v: f32) {
            self.time_remaining = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TeleportInfo {
        const NAME: &'static str = "TeleportInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    29 => {
                        self.time_remaining = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.time_remaining {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.player_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.time_remaining {
                os.write_float(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeleportInfo {
            TeleportInfo::new()
        }

        fn clear(&mut self) {
            self.player_id = ::std::option::Option::None;
            self.location.clear();
            self.time_remaining = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeleportInfo {
            static instance: TeleportInfo = TeleportInfo {
                player_id: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                time_remaining: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.Modifier)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Modifier {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.handle)
        pub handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.stack_count)
        pub stack_count: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.ability_handle)
        pub ability_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.remaining_duration)
        pub remaining_duration: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Modifier.auxiliary_units_handles)
        pub auxiliary_units_handles: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.Modifier.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Modifier {
        fn default() -> &'a Modifier {
            <Modifier as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Modifier {
        pub fn new() -> Modifier {
            ::std::default::Default::default()
        }

        // optional uint32 handle = 7;

        pub fn handle(&self) -> u32 {
            self.handle.unwrap_or(0)
        }

        pub fn clear_handle(&mut self) {
            self.handle = ::std::option::Option::None;
        }

        pub fn has_handle(&self) -> bool {
            self.handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_handle(&mut self, v: u32) {
            self.handle = ::std::option::Option::Some(v);
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 stack_count = 2;

        pub fn stack_count(&self) -> u32 {
            self.stack_count.unwrap_or(0)
        }

        pub fn clear_stack_count(&mut self) {
            self.stack_count = ::std::option::Option::None;
        }

        pub fn has_stack_count(&self) -> bool {
            self.stack_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stack_count(&mut self, v: u32) {
            self.stack_count = ::std::option::Option::Some(v);
        }

        // optional uint32 ability_handle = 3;

        pub fn ability_handle(&self) -> u32 {
            self.ability_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_ability_handle(&mut self) {
            self.ability_handle = ::std::option::Option::None;
        }

        pub fn has_ability_handle(&self) -> bool {
            self.ability_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_handle(&mut self, v: u32) {
            self.ability_handle = ::std::option::Option::Some(v);
        }

        // optional int32 ability_id = 4;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }

        // optional float remaining_duration = 5;

        pub fn remaining_duration(&self) -> f32 {
            self.remaining_duration.unwrap_or(0.)
        }

        pub fn clear_remaining_duration(&mut self) {
            self.remaining_duration = ::std::option::Option::None;
        }

        pub fn has_remaining_duration(&self) -> bool {
            self.remaining_duration.is_some()
        }

        // Param is passed by value, moved
        pub fn set_remaining_duration(&mut self, v: f32) {
            self.remaining_duration = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Modifier {
        const NAME: &'static str = "Modifier";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    56 => {
                        self.handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.stack_count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.ability_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    45 => {
                        self.remaining_duration = ::std::option::Option::Some(is.read_float()?);
                    },
                    50 => {
                        is.read_repeated_packed_uint32_into(&mut self.auxiliary_units_handles)?;
                    },
                    48 => {
                        self.auxiliary_units_handles.push(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.stack_count {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.ability_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
            }
            if let Some(v) = self.remaining_duration {
                my_size += 1 + 4;
            }
            for value in &self.auxiliary_units_handles {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, *value);
            };
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.handle {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.stack_count {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.ability_handle {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.ability_id {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.remaining_duration {
                os.write_float(5, v)?;
            }
            for v in &self.auxiliary_units_handles {
                os.write_uint32(6, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Modifier {
            Modifier::new()
        }

        fn clear(&mut self) {
            self.handle = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.stack_count = ::std::option::Option::None;
            self.ability_handle = ::std::option::Option::None;
            self.ability_id = ::std::option::Option::None;
            self.remaining_duration = ::std::option::Option::None;
            self.auxiliary_units_handles.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Modifier {
            static instance: Modifier = Modifier {
                handle: ::std::option::Option::None,
                name: ::std::option::Option::None,
                stack_count: ::std::option::Option::None,
                ability_handle: ::std::option::Option::None,
                ability_id: ::std::option::Option::None,
                remaining_duration: ::std::option::Option::None,
                auxiliary_units_handles: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.LinearProjectile)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LinearProjectile {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.handle)
        pub handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.caster_handle)
        pub caster_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.caster_unit_type)
        pub caster_unit_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<UnitType>>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.caster_player_id)
        pub caster_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.ability_handle)
        pub ability_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.velocity)
        pub velocity: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.LinearProjectile.radius)
        pub radius: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.LinearProjectile.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LinearProjectile {
        fn default() -> &'a LinearProjectile {
            <LinearProjectile as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl LinearProjectile {
        pub fn new() -> LinearProjectile {
            ::std::default::Default::default()
        }

        // optional uint32 handle = 1;

        pub fn handle(&self) -> u32 {
            self.handle.unwrap_or(0)
        }

        pub fn clear_handle(&mut self) {
            self.handle = ::std::option::Option::None;
        }

        pub fn has_handle(&self) -> bool {
            self.handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_handle(&mut self, v: u32) {
            self.handle = ::std::option::Option::Some(v);
        }

        // optional uint32 caster_handle = 2;

        pub fn caster_handle(&self) -> u32 {
            self.caster_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_caster_handle(&mut self) {
            self.caster_handle = ::std::option::Option::None;
        }

        pub fn has_caster_handle(&self) -> bool {
            self.caster_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_handle(&mut self, v: u32) {
            self.caster_handle = ::std::option::Option::Some(v);
        }

        // optional .CMsgBotWorldState.UnitType caster_unit_type = 9;

        pub fn caster_unit_type(&self) -> UnitType {
            match self.caster_unit_type {
                Some(e) => e.enum_value_or(UnitType::INVALID),
                None => UnitType::INVALID,
            }
        }

        pub fn clear_caster_unit_type(&mut self) {
            self.caster_unit_type = ::std::option::Option::None;
        }

        pub fn has_caster_unit_type(&self) -> bool {
            self.caster_unit_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_unit_type(&mut self, v: UnitType) {
            self.caster_unit_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional int32 caster_player_id = 3;

        pub fn caster_player_id(&self) -> i32 {
            self.caster_player_id.unwrap_or(0)
        }

        pub fn clear_caster_player_id(&mut self) {
            self.caster_player_id = ::std::option::Option::None;
        }

        pub fn has_caster_player_id(&self) -> bool {
            self.caster_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_player_id(&mut self, v: i32) {
            self.caster_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 ability_handle = 4;

        pub fn ability_handle(&self) -> u32 {
            self.ability_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_ability_handle(&mut self) {
            self.ability_handle = ::std::option::Option::None;
        }

        pub fn has_ability_handle(&self) -> bool {
            self.ability_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_handle(&mut self, v: u32) {
            self.ability_handle = ::std::option::Option::Some(v);
        }

        // optional int32 ability_id = 5;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }

        // optional uint32 radius = 8;

        pub fn radius(&self) -> u32 {
            self.radius.unwrap_or(0)
        }

        pub fn clear_radius(&mut self) {
            self.radius = ::std::option::Option::None;
        }

        pub fn has_radius(&self) -> bool {
            self.radius.is_some()
        }

        // Param is passed by value, moved
        pub fn set_radius(&mut self, v: u32) {
            self.radius = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for LinearProjectile {
        const NAME: &'static str = "LinearProjectile";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.caster_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    72 => {
                        self.caster_unit_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    24 => {
                        self.caster_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.ability_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    50 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    58 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.velocity)?;
                    },
                    64 => {
                        self.radius = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.caster_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.caster_unit_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(9, v.value());
            }
            if let Some(v) = self.caster_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
            }
            if let Some(v) = self.ability_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.velocity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.radius {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.handle {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.caster_handle {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.caster_unit_type {
                os.write_enum(9, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.caster_player_id {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.ability_handle {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.ability_id {
                os.write_int32(5, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            }
            if let Some(v) = self.velocity.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
            }
            if let Some(v) = self.radius {
                os.write_uint32(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LinearProjectile {
            LinearProjectile::new()
        }

        fn clear(&mut self) {
            self.handle = ::std::option::Option::None;
            self.caster_handle = ::std::option::Option::None;
            self.caster_unit_type = ::std::option::Option::None;
            self.caster_player_id = ::std::option::Option::None;
            self.ability_handle = ::std::option::Option::None;
            self.ability_id = ::std::option::Option::None;
            self.location.clear();
            self.velocity.clear();
            self.radius = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LinearProjectile {
            static instance: LinearProjectile = LinearProjectile {
                handle: ::std::option::Option::None,
                caster_handle: ::std::option::Option::None,
                caster_unit_type: ::std::option::Option::None,
                caster_player_id: ::std::option::Option::None,
                ability_handle: ::std::option::Option::None,
                ability_id: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                velocity: ::steam_vent_proto_common::protobuf::MessageField::none(),
                radius: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.TrackingProjectile)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TrackingProjectile {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.handle)
        pub handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.caster_handle)
        pub caster_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.caster_unit_type)
        pub caster_unit_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<UnitType>>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.caster_player_id)
        pub caster_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.ability_handle)
        pub ability_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.velocity)
        pub velocity: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.is_dodgeable)
        pub is_dodgeable: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.TrackingProjectile.is_attack)
        pub is_attack: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.TrackingProjectile.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TrackingProjectile {
        fn default() -> &'a TrackingProjectile {
            <TrackingProjectile as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TrackingProjectile {
        pub fn new() -> TrackingProjectile {
            ::std::default::Default::default()
        }

        // optional uint32 handle = 10;

        pub fn handle(&self) -> u32 {
            self.handle.unwrap_or(0)
        }

        pub fn clear_handle(&mut self) {
            self.handle = ::std::option::Option::None;
        }

        pub fn has_handle(&self) -> bool {
            self.handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_handle(&mut self, v: u32) {
            self.handle = ::std::option::Option::Some(v);
        }

        // optional uint32 caster_handle = 1;

        pub fn caster_handle(&self) -> u32 {
            self.caster_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_caster_handle(&mut self) {
            self.caster_handle = ::std::option::Option::None;
        }

        pub fn has_caster_handle(&self) -> bool {
            self.caster_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_handle(&mut self, v: u32) {
            self.caster_handle = ::std::option::Option::Some(v);
        }

        // optional .CMsgBotWorldState.UnitType caster_unit_type = 9;

        pub fn caster_unit_type(&self) -> UnitType {
            match self.caster_unit_type {
                Some(e) => e.enum_value_or(UnitType::INVALID),
                None => UnitType::INVALID,
            }
        }

        pub fn clear_caster_unit_type(&mut self) {
            self.caster_unit_type = ::std::option::Option::None;
        }

        pub fn has_caster_unit_type(&self) -> bool {
            self.caster_unit_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_unit_type(&mut self, v: UnitType) {
            self.caster_unit_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional int32 caster_player_id = 2;

        pub fn caster_player_id(&self) -> i32 {
            self.caster_player_id.unwrap_or(0)
        }

        pub fn clear_caster_player_id(&mut self) {
            self.caster_player_id = ::std::option::Option::None;
        }

        pub fn has_caster_player_id(&self) -> bool {
            self.caster_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_player_id(&mut self, v: i32) {
            self.caster_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 ability_handle = 3;

        pub fn ability_handle(&self) -> u32 {
            self.ability_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_ability_handle(&mut self) {
            self.ability_handle = ::std::option::Option::None;
        }

        pub fn has_ability_handle(&self) -> bool {
            self.ability_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_handle(&mut self, v: u32) {
            self.ability_handle = ::std::option::Option::Some(v);
        }

        // optional int32 ability_id = 4;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }

        // optional uint32 velocity = 6;

        pub fn velocity(&self) -> u32 {
            self.velocity.unwrap_or(0)
        }

        pub fn clear_velocity(&mut self) {
            self.velocity = ::std::option::Option::None;
        }

        pub fn has_velocity(&self) -> bool {
            self.velocity.is_some()
        }

        // Param is passed by value, moved
        pub fn set_velocity(&mut self, v: u32) {
            self.velocity = ::std::option::Option::Some(v);
        }

        // optional bool is_dodgeable = 7;

        pub fn is_dodgeable(&self) -> bool {
            self.is_dodgeable.unwrap_or(false)
        }

        pub fn clear_is_dodgeable(&mut self) {
            self.is_dodgeable = ::std::option::Option::None;
        }

        pub fn has_is_dodgeable(&self) -> bool {
            self.is_dodgeable.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_dodgeable(&mut self, v: bool) {
            self.is_dodgeable = ::std::option::Option::Some(v);
        }

        // optional bool is_attack = 8;

        pub fn is_attack(&self) -> bool {
            self.is_attack.unwrap_or(false)
        }

        pub fn clear_is_attack(&mut self) {
            self.is_attack = ::std::option::Option::None;
        }

        pub fn has_is_attack(&self) -> bool {
            self.is_attack.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_attack(&mut self, v: bool) {
            self.is_attack = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TrackingProjectile {
        const NAME: &'static str = "TrackingProjectile";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    80 => {
                        self.handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    8 => {
                        self.caster_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    72 => {
                        self.caster_unit_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    16 => {
                        self.caster_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.ability_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    42 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    48 => {
                        self.velocity = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.is_dodgeable = ::std::option::Option::Some(is.read_bool()?);
                    },
                    64 => {
                        self.is_attack = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
            }
            if let Some(v) = self.caster_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.caster_unit_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(9, v.value());
            }
            if let Some(v) = self.caster_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.ability_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.velocity {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            if let Some(v) = self.is_dodgeable {
                my_size += 1 + 1;
            }
            if let Some(v) = self.is_attack {
                my_size += 1 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.handle {
                os.write_uint32(10, v)?;
            }
            if let Some(v) = self.caster_handle {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.caster_unit_type {
                os.write_enum(9, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.caster_player_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.ability_handle {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.ability_id {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            if let Some(v) = self.velocity {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.is_dodgeable {
                os.write_bool(7, v)?;
            }
            if let Some(v) = self.is_attack {
                os.write_bool(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TrackingProjectile {
            TrackingProjectile::new()
        }

        fn clear(&mut self) {
            self.handle = ::std::option::Option::None;
            self.caster_handle = ::std::option::Option::None;
            self.caster_unit_type = ::std::option::Option::None;
            self.caster_player_id = ::std::option::Option::None;
            self.ability_handle = ::std::option::Option::None;
            self.ability_id = ::std::option::Option::None;
            self.location.clear();
            self.velocity = ::std::option::Option::None;
            self.is_dodgeable = ::std::option::Option::None;
            self.is_attack = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TrackingProjectile {
            static instance: TrackingProjectile = TrackingProjectile {
                handle: ::std::option::Option::None,
                caster_handle: ::std::option::Option::None,
                caster_unit_type: ::std::option::Option::None,
                caster_player_id: ::std::option::Option::None,
                ability_handle: ::std::option::Option::None,
                ability_id: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                velocity: ::std::option::Option::None,
                is_dodgeable: ::std::option::Option::None,
                is_attack: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.AvoidanceZone)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AvoidanceZone {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.caster_handle)
        pub caster_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.caster_unit_type)
        pub caster_unit_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<UnitType>>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.caster_player_id)
        pub caster_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.ability_handle)
        pub ability_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.AvoidanceZone.radius)
        pub radius: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.AvoidanceZone.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AvoidanceZone {
        fn default() -> &'a AvoidanceZone {
            <AvoidanceZone as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl AvoidanceZone {
        pub fn new() -> AvoidanceZone {
            ::std::default::Default::default()
        }

        // optional uint32 caster_handle = 2;

        pub fn caster_handle(&self) -> u32 {
            self.caster_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_caster_handle(&mut self) {
            self.caster_handle = ::std::option::Option::None;
        }

        pub fn has_caster_handle(&self) -> bool {
            self.caster_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_handle(&mut self, v: u32) {
            self.caster_handle = ::std::option::Option::Some(v);
        }

        // optional .CMsgBotWorldState.UnitType caster_unit_type = 7;

        pub fn caster_unit_type(&self) -> UnitType {
            match self.caster_unit_type {
                Some(e) => e.enum_value_or(UnitType::INVALID),
                None => UnitType::INVALID,
            }
        }

        pub fn clear_caster_unit_type(&mut self) {
            self.caster_unit_type = ::std::option::Option::None;
        }

        pub fn has_caster_unit_type(&self) -> bool {
            self.caster_unit_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_unit_type(&mut self, v: UnitType) {
            self.caster_unit_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional int32 caster_player_id = 3;

        pub fn caster_player_id(&self) -> i32 {
            self.caster_player_id.unwrap_or(0)
        }

        pub fn clear_caster_player_id(&mut self) {
            self.caster_player_id = ::std::option::Option::None;
        }

        pub fn has_caster_player_id(&self) -> bool {
            self.caster_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_caster_player_id(&mut self, v: i32) {
            self.caster_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 ability_handle = 4;

        pub fn ability_handle(&self) -> u32 {
            self.ability_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_ability_handle(&mut self) {
            self.ability_handle = ::std::option::Option::None;
        }

        pub fn has_ability_handle(&self) -> bool {
            self.ability_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_handle(&mut self, v: u32) {
            self.ability_handle = ::std::option::Option::Some(v);
        }

        // optional int32 ability_id = 5;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }

        // optional uint32 radius = 6;

        pub fn radius(&self) -> u32 {
            self.radius.unwrap_or(0)
        }

        pub fn clear_radius(&mut self) {
            self.radius = ::std::option::Option::None;
        }

        pub fn has_radius(&self) -> bool {
            self.radius.is_some()
        }

        // Param is passed by value, moved
        pub fn set_radius(&mut self, v: u32) {
            self.radius = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for AvoidanceZone {
        const NAME: &'static str = "AvoidanceZone";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    16 => {
                        self.caster_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.caster_unit_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    24 => {
                        self.caster_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.ability_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    48 => {
                        self.radius = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.caster_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.caster_unit_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(7, v.value());
            }
            if let Some(v) = self.caster_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
            }
            if let Some(v) = self.ability_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v);
            }
            if let Some(v) = self.radius {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.caster_handle {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.caster_unit_type {
                os.write_enum(7, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.caster_player_id {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.ability_handle {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.ability_id {
                os.write_int32(5, v)?;
            }
            if let Some(v) = self.radius {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AvoidanceZone {
            AvoidanceZone::new()
        }

        fn clear(&mut self) {
            self.location.clear();
            self.caster_handle = ::std::option::Option::None;
            self.caster_unit_type = ::std::option::Option::None;
            self.caster_player_id = ::std::option::Option::None;
            self.ability_handle = ::std::option::Option::None;
            self.ability_id = ::std::option::Option::None;
            self.radius = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AvoidanceZone {
            static instance: AvoidanceZone = AvoidanceZone {
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                caster_handle: ::std::option::Option::None,
                caster_unit_type: ::std::option::Option::None,
                caster_player_id: ::std::option::Option::None,
                ability_handle: ::std::option::Option::None,
                ability_id: ::std::option::Option::None,
                radius: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.Courier)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Courier {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.Courier.handle)
        pub handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Courier.state)
        pub state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<CourierState>>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Courier.player_id)
        pub player_id: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.Courier.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Courier {
        fn default() -> &'a Courier {
            <Courier as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Courier {
        pub fn new() -> Courier {
            ::std::default::Default::default()
        }

        // optional uint32 handle = 1;

        pub fn handle(&self) -> u32 {
            self.handle.unwrap_or(0)
        }

        pub fn clear_handle(&mut self) {
            self.handle = ::std::option::Option::None;
        }

        pub fn has_handle(&self) -> bool {
            self.handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_handle(&mut self, v: u32) {
            self.handle = ::std::option::Option::Some(v);
        }

        // optional .CMsgBotWorldState.CourierState state = 2;

        pub fn state(&self) -> CourierState {
            match self.state {
                Some(e) => e.enum_value_or(CourierState::COURIER_STATE_INIT),
                None => CourierState::COURIER_STATE_INIT,
            }
        }

        pub fn clear_state(&mut self) {
            self.state = ::std::option::Option::None;
        }

        pub fn has_state(&self) -> bool {
            self.state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_state(&mut self, v: CourierState) {
            self.state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional int32 player_id = 3;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(0)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Courier {
        const NAME: &'static str = "Courier";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    24 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.state {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
            }
            if let Some(v) = self.player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.handle {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.state {
                os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.player_id {
                os.write_int32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Courier {
            Courier::new()
        }

        fn clear(&mut self) {
            self.handle = ::std::option::Option::None;
            self.state = ::std::option::Option::None;
            self.player_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Courier {
            static instance: Courier = Courier {
                handle: ::std::option::Option::None,
                state: ::std::option::Option::None,
                player_id: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.EventAbility)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EventAbility {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventAbility.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventAbility.player_id)
        pub player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventAbility.unit_handle)
        pub unit_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventAbility.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventAbility.is_channel_start)
        pub is_channel_start: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.EventAbility.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EventAbility {
        fn default() -> &'a EventAbility {
            <EventAbility as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl EventAbility {
        pub fn new() -> EventAbility {
            ::std::default::Default::default()
        }

        // optional int32 ability_id = 1;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }

        // optional int32 player_id = 2;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(0)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 unit_handle = 3;

        pub fn unit_handle(&self) -> u32 {
            self.unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_unit_handle(&mut self) {
            self.unit_handle = ::std::option::Option::None;
        }

        pub fn has_unit_handle(&self) -> bool {
            self.unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unit_handle(&mut self, v: u32) {
            self.unit_handle = ::std::option::Option::Some(v);
        }

        // optional bool is_channel_start = 5;

        pub fn is_channel_start(&self) -> bool {
            self.is_channel_start.unwrap_or(false)
        }

        pub fn clear_is_channel_start(&mut self) {
            self.is_channel_start = ::std::option::Option::None;
        }

        pub fn has_is_channel_start(&self) -> bool {
            self.is_channel_start.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_channel_start(&mut self, v: bool) {
            self.is_channel_start = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for EventAbility {
        const NAME: &'static str = "EventAbility";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    34 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    40 => {
                        self.is_channel_start = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.is_channel_start {
                my_size += 1 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.ability_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.player_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.unit_handle {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            if let Some(v) = self.is_channel_start {
                os.write_bool(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EventAbility {
            EventAbility::new()
        }

        fn clear(&mut self) {
            self.ability_id = ::std::option::Option::None;
            self.player_id = ::std::option::Option::None;
            self.unit_handle = ::std::option::Option::None;
            self.location.clear();
            self.is_channel_start = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EventAbility {
            static instance: EventAbility = EventAbility {
                ability_id: ::std::option::Option::None,
                player_id: ::std::option::Option::None,
                unit_handle: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                is_channel_start: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.EventDamage)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EventDamage {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventDamage.damage)
        pub damage: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventDamage.victim_player_id)
        pub victim_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventDamage.victim_unit_handle)
        pub victim_unit_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventDamage.attacker_player_id)
        pub attacker_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventDamage.attacker_unit_handle)
        pub attacker_unit_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventDamage.ability_id)
        pub ability_id: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.EventDamage.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EventDamage {
        fn default() -> &'a EventDamage {
            <EventDamage as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl EventDamage {
        pub fn new() -> EventDamage {
            ::std::default::Default::default()
        }

        // optional uint32 damage = 1;

        pub fn damage(&self) -> u32 {
            self.damage.unwrap_or(0)
        }

        pub fn clear_damage(&mut self) {
            self.damage = ::std::option::Option::None;
        }

        pub fn has_damage(&self) -> bool {
            self.damage.is_some()
        }

        // Param is passed by value, moved
        pub fn set_damage(&mut self, v: u32) {
            self.damage = ::std::option::Option::Some(v);
        }

        // optional int32 victim_player_id = 2;

        pub fn victim_player_id(&self) -> i32 {
            self.victim_player_id.unwrap_or(0)
        }

        pub fn clear_victim_player_id(&mut self) {
            self.victim_player_id = ::std::option::Option::None;
        }

        pub fn has_victim_player_id(&self) -> bool {
            self.victim_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_victim_player_id(&mut self, v: i32) {
            self.victim_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 victim_unit_handle = 3;

        pub fn victim_unit_handle(&self) -> u32 {
            self.victim_unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_victim_unit_handle(&mut self) {
            self.victim_unit_handle = ::std::option::Option::None;
        }

        pub fn has_victim_unit_handle(&self) -> bool {
            self.victim_unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_victim_unit_handle(&mut self, v: u32) {
            self.victim_unit_handle = ::std::option::Option::Some(v);
        }

        // optional int32 attacker_player_id = 4;

        pub fn attacker_player_id(&self) -> i32 {
            self.attacker_player_id.unwrap_or(0)
        }

        pub fn clear_attacker_player_id(&mut self) {
            self.attacker_player_id = ::std::option::Option::None;
        }

        pub fn has_attacker_player_id(&self) -> bool {
            self.attacker_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attacker_player_id(&mut self, v: i32) {
            self.attacker_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 attacker_unit_handle = 5;

        pub fn attacker_unit_handle(&self) -> u32 {
            self.attacker_unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_attacker_unit_handle(&mut self) {
            self.attacker_unit_handle = ::std::option::Option::None;
        }

        pub fn has_attacker_unit_handle(&self) -> bool {
            self.attacker_unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attacker_unit_handle(&mut self, v: u32) {
            self.attacker_unit_handle = ::std::option::Option::Some(v);
        }

        // optional int32 ability_id = 6;

        pub fn ability_id(&self) -> i32 {
            self.ability_id.unwrap_or(-1i32)
        }

        pub fn clear_ability_id(&mut self) {
            self.ability_id = ::std::option::Option::None;
        }

        pub fn has_ability_id(&self) -> bool {
            self.ability_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_id(&mut self, v: i32) {
            self.ability_id = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for EventDamage {
        const NAME: &'static str = "EventDamage";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.damage = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.victim_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.victim_unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.attacker_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    40 => {
                        self.attacker_unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.ability_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.damage {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.victim_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.victim_unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.attacker_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
            }
            if let Some(v) = self.attacker_unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.ability_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.damage {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.victim_player_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.victim_unit_handle {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.attacker_player_id {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.attacker_unit_handle {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.ability_id {
                os.write_int32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EventDamage {
            EventDamage::new()
        }

        fn clear(&mut self) {
            self.damage = ::std::option::Option::None;
            self.victim_player_id = ::std::option::Option::None;
            self.victim_unit_handle = ::std::option::Option::None;
            self.attacker_player_id = ::std::option::Option::None;
            self.attacker_unit_handle = ::std::option::Option::None;
            self.ability_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EventDamage {
            static instance: EventDamage = EventDamage {
                damage: ::std::option::Option::None,
                victim_player_id: ::std::option::Option::None,
                victim_unit_handle: ::std::option::Option::None,
                attacker_player_id: ::std::option::Option::None,
                attacker_unit_handle: ::std::option::Option::None,
                ability_id: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.EventCourierKilled)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EventCourierKilled {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventCourierKilled.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
        pub courier_unit_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventCourierKilled.killer_player_id)
        pub killer_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
        pub killer_unit_handle: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.EventCourierKilled.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EventCourierKilled {
        fn default() -> &'a EventCourierKilled {
            <EventCourierKilled as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl EventCourierKilled {
        pub fn new() -> EventCourierKilled {
            ::std::default::Default::default()
        }

        // optional uint32 team_id = 1;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 courier_unit_handle = 2;

        pub fn courier_unit_handle(&self) -> u32 {
            self.courier_unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_courier_unit_handle(&mut self) {
            self.courier_unit_handle = ::std::option::Option::None;
        }

        pub fn has_courier_unit_handle(&self) -> bool {
            self.courier_unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_courier_unit_handle(&mut self, v: u32) {
            self.courier_unit_handle = ::std::option::Option::Some(v);
        }

        // optional int32 killer_player_id = 3;

        pub fn killer_player_id(&self) -> i32 {
            self.killer_player_id.unwrap_or(0)
        }

        pub fn clear_killer_player_id(&mut self) {
            self.killer_player_id = ::std::option::Option::None;
        }

        pub fn has_killer_player_id(&self) -> bool {
            self.killer_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_killer_player_id(&mut self, v: i32) {
            self.killer_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 killer_unit_handle = 4;

        pub fn killer_unit_handle(&self) -> u32 {
            self.killer_unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_killer_unit_handle(&mut self) {
            self.killer_unit_handle = ::std::option::Option::None;
        }

        pub fn has_killer_unit_handle(&self) -> bool {
            self.killer_unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_killer_unit_handle(&mut self, v: u32) {
            self.killer_unit_handle = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for EventCourierKilled {
        const NAME: &'static str = "EventCourierKilled";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.courier_unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.killer_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.killer_unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.courier_unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.killer_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
            }
            if let Some(v) = self.killer_unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.team_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.courier_unit_handle {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.killer_player_id {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.killer_unit_handle {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EventCourierKilled {
            EventCourierKilled::new()
        }

        fn clear(&mut self) {
            self.team_id = ::std::option::Option::None;
            self.courier_unit_handle = ::std::option::Option::None;
            self.killer_player_id = ::std::option::Option::None;
            self.killer_unit_handle = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EventCourierKilled {
            static instance: EventCourierKilled = EventCourierKilled {
                team_id: ::std::option::Option::None,
                courier_unit_handle: ::std::option::Option::None,
                killer_player_id: ::std::option::Option::None,
                killer_unit_handle: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.EventRoshanKilled)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EventRoshanKilled {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventRoshanKilled.killer_player_id)
        pub killer_player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
        pub killer_unit_handle: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.EventRoshanKilled.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EventRoshanKilled {
        fn default() -> &'a EventRoshanKilled {
            <EventRoshanKilled as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl EventRoshanKilled {
        pub fn new() -> EventRoshanKilled {
            ::std::default::Default::default()
        }

        // optional int32 killer_player_id = 1;

        pub fn killer_player_id(&self) -> i32 {
            self.killer_player_id.unwrap_or(0)
        }

        pub fn clear_killer_player_id(&mut self) {
            self.killer_player_id = ::std::option::Option::None;
        }

        pub fn has_killer_player_id(&self) -> bool {
            self.killer_player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_killer_player_id(&mut self, v: i32) {
            self.killer_player_id = ::std::option::Option::Some(v);
        }

        // optional uint32 killer_unit_handle = 2;

        pub fn killer_unit_handle(&self) -> u32 {
            self.killer_unit_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_killer_unit_handle(&mut self) {
            self.killer_unit_handle = ::std::option::Option::None;
        }

        pub fn has_killer_unit_handle(&self) -> bool {
            self.killer_unit_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_killer_unit_handle(&mut self, v: u32) {
            self.killer_unit_handle = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for EventRoshanKilled {
        const NAME: &'static str = "EventRoshanKilled";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.killer_player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.killer_unit_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.killer_player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.killer_unit_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.killer_player_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.killer_unit_handle {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EventRoshanKilled {
            EventRoshanKilled::new()
        }

        fn clear(&mut self) {
            self.killer_player_id = ::std::option::Option::None;
            self.killer_unit_handle = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EventRoshanKilled {
            static instance: EventRoshanKilled = EventRoshanKilled {
                killer_player_id: ::std::option::Option::None,
                killer_unit_handle: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.EventTree)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EventTree {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventTree.tree_id)
        pub tree_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventTree.destroyed)
        pub destroyed: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventTree.respawned)
        pub respawned: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventTree.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.EventTree.delayed)
        pub delayed: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.EventTree.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EventTree {
        fn default() -> &'a EventTree {
            <EventTree as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl EventTree {
        pub fn new() -> EventTree {
            ::std::default::Default::default()
        }

        // optional uint32 tree_id = 1;

        pub fn tree_id(&self) -> u32 {
            self.tree_id.unwrap_or(0)
        }

        pub fn clear_tree_id(&mut self) {
            self.tree_id = ::std::option::Option::None;
        }

        pub fn has_tree_id(&self) -> bool {
            self.tree_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tree_id(&mut self, v: u32) {
            self.tree_id = ::std::option::Option::Some(v);
        }

        // optional bool destroyed = 2;

        pub fn destroyed(&self) -> bool {
            self.destroyed.unwrap_or(false)
        }

        pub fn clear_destroyed(&mut self) {
            self.destroyed = ::std::option::Option::None;
        }

        pub fn has_destroyed(&self) -> bool {
            self.destroyed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_destroyed(&mut self, v: bool) {
            self.destroyed = ::std::option::Option::Some(v);
        }

        // optional bool respawned = 3;

        pub fn respawned(&self) -> bool {
            self.respawned.unwrap_or(false)
        }

        pub fn clear_respawned(&mut self) {
            self.respawned = ::std::option::Option::None;
        }

        pub fn has_respawned(&self) -> bool {
            self.respawned.is_some()
        }

        // Param is passed by value, moved
        pub fn set_respawned(&mut self, v: bool) {
            self.respawned = ::std::option::Option::Some(v);
        }

        // optional bool delayed = 5;

        pub fn delayed(&self) -> bool {
            self.delayed.unwrap_or(false)
        }

        pub fn clear_delayed(&mut self) {
            self.delayed = ::std::option::Option::None;
        }

        pub fn has_delayed(&self) -> bool {
            self.delayed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_delayed(&mut self, v: bool) {
            self.delayed = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for EventTree {
        const NAME: &'static str = "EventTree";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tree_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.destroyed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    24 => {
                        self.respawned = ::std::option::Option::Some(is.read_bool()?);
                    },
                    34 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    40 => {
                        self.delayed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tree_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.destroyed {
                my_size += 1 + 1;
            }
            if let Some(v) = self.respawned {
                my_size += 1 + 1;
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.delayed {
                my_size += 1 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.tree_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.destroyed {
                os.write_bool(2, v)?;
            }
            if let Some(v) = self.respawned {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            if let Some(v) = self.delayed {
                os.write_bool(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EventTree {
            EventTree::new()
        }

        fn clear(&mut self) {
            self.tree_id = ::std::option::Option::None;
            self.destroyed = ::std::option::Option::None;
            self.respawned = ::std::option::Option::None;
            self.location.clear();
            self.delayed = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EventTree {
            static instance: EventTree = EventTree {
                tree_id: ::std::option::Option::None,
                destroyed: ::std::option::Option::None,
                respawned: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                delayed: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgBotWorldState.Unit)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Unit {
        // message fields
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.handle)
        pub handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.unit_type)
        pub unit_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<UnitType>>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.level)
        pub level: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.location)
        pub location: ::steam_vent_proto_common::protobuf::MessageField<Vector>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_alive)
        pub is_alive: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.player_id)
        pub player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.bounding_radius)
        pub bounding_radius: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.facing)
        pub facing: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.ground_height)
        pub ground_height: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.vision_range_daytime)
        pub vision_range_daytime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.vision_range_nighttime)
        pub vision_range_nighttime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.health)
        pub health: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.health_max)
        pub health_max: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.health_regen)
        pub health_regen: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.mana)
        pub mana: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.mana_max)
        pub mana_max: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.mana_regen)
        pub mana_regen: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.base_movement_speed)
        pub base_movement_speed: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.current_movement_speed)
        pub current_movement_speed: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.anim_activity)
        pub anim_activity: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.anim_cycle)
        pub anim_cycle: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.base_damage)
        pub base_damage: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.base_damage_variance)
        pub base_damage_variance: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.bonus_damage)
        pub bonus_damage: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_damage)
        pub attack_damage: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_range)
        pub attack_range: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_speed)
        pub attack_speed: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_anim_point)
        pub attack_anim_point: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_acquisition_range)
        pub attack_acquisition_range: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_projectile_speed)
        pub attack_projectile_speed: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_target_handle)
        pub attack_target_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attack_target_name)
        pub attack_target_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.attacks_per_second)
        pub attacks_per_second: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.last_attack_time)
        pub last_attack_time: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.bounty_xp)
        pub bounty_xp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.bounty_gold_min)
        pub bounty_gold_min: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.bounty_gold_max)
        pub bounty_gold_max: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_channeling)
        pub is_channeling: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.active_ability_handle)
        pub active_ability_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_attack_immune)
        pub is_attack_immune: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_blind)
        pub is_blind: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_block_disabled)
        pub is_block_disabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_disarmed)
        pub is_disarmed: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_dominated)
        pub is_dominated: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_evade_disabled)
        pub is_evade_disabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_hexed)
        pub is_hexed: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_invisible)
        pub is_invisible: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_invulnerable)
        pub is_invulnerable: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_magic_immune)
        pub is_magic_immune: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_muted)
        pub is_muted: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_nightmared)
        pub is_nightmared: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_rooted)
        pub is_rooted: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_silenced)
        pub is_silenced: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_specially_deniable)
        pub is_specially_deniable: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_stunned)
        pub is_stunned: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_unable_to_miss)
        pub is_unable_to_miss: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.has_scepter)
        pub has_scepter: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_specially_undeniable)
        pub is_specially_undeniable: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.abilities)
        pub abilities: ::std::vec::Vec<Ability>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.items)
        pub items: ::std::vec::Vec<Ability>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.modifiers)
        pub modifiers: ::std::vec::Vec<Modifier>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.incoming_tracking_projectiles)
        pub incoming_tracking_projectiles: ::std::vec::Vec<TrackingProjectile>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.action_type)
        pub action_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.ability_target_handle)
        pub ability_target_handle: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.ability_target_name)
        pub ability_target_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_using_ability)
        pub is_using_ability: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.primary_attribute)
        pub primary_attribute: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_illusion)
        pub is_illusion: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.respawn_time)
        pub respawn_time: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.buyback_cost)
        pub buyback_cost: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.buyback_cooldown)
        pub buyback_cooldown: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.spell_amplification)
        pub spell_amplification: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.armor)
        pub armor: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.magic_resist)
        pub magic_resist: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.evasion)
        pub evasion: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.xp_needed_to_level)
        pub xp_needed_to_level: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.ability_points)
        pub ability_points: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.reliable_gold)
        pub reliable_gold: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.unreliable_gold)
        pub unreliable_gold: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.last_hits)
        pub last_hits: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.denies)
        pub denies: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.net_worth)
        pub net_worth: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.strength)
        pub strength: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.agility)
        pub agility: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.intelligence)
        pub intelligence: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.remaining_lifespan)
        pub remaining_lifespan: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.flying_courier)
        pub flying_courier: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.shrine_cooldown)
        pub shrine_cooldown: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgBotWorldState.Unit.is_shrine_healing)
        pub is_shrine_healing: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgBotWorldState.Unit.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Unit {
        fn default() -> &'a Unit {
            <Unit as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Unit {
        pub fn new() -> Unit {
            ::std::default::Default::default()
        }

        // optional uint32 handle = 1;

        pub fn handle(&self) -> u32 {
            self.handle.unwrap_or(0)
        }

        pub fn clear_handle(&mut self) {
            self.handle = ::std::option::Option::None;
        }

        pub fn has_handle(&self) -> bool {
            self.handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_handle(&mut self, v: u32) {
            self.handle = ::std::option::Option::Some(v);
        }

        // optional .CMsgBotWorldState.UnitType unit_type = 2;

        pub fn unit_type(&self) -> UnitType {
            match self.unit_type {
                Some(e) => e.enum_value_or(UnitType::INVALID),
                None => UnitType::INVALID,
            }
        }

        pub fn clear_unit_type(&mut self) {
            self.unit_type = ::std::option::Option::None;
        }

        pub fn has_unit_type(&self) -> bool {
            self.unit_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unit_type(&mut self, v: UnitType) {
            self.unit_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional string name = 3;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 team_id = 4;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 level = 5;

        pub fn level(&self) -> u32 {
            self.level.unwrap_or(0)
        }

        pub fn clear_level(&mut self) {
            self.level = ::std::option::Option::None;
        }

        pub fn has_level(&self) -> bool {
            self.level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_level(&mut self, v: u32) {
            self.level = ::std::option::Option::Some(v);
        }

        // optional bool is_alive = 7;

        pub fn is_alive(&self) -> bool {
            self.is_alive.unwrap_or(false)
        }

        pub fn clear_is_alive(&mut self) {
            self.is_alive = ::std::option::Option::None;
        }

        pub fn has_is_alive(&self) -> bool {
            self.is_alive.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_alive(&mut self, v: bool) {
            self.is_alive = ::std::option::Option::Some(v);
        }

        // optional int32 player_id = 8;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(0)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }

        // optional int32 bounding_radius = 10;

        pub fn bounding_radius(&self) -> i32 {
            self.bounding_radius.unwrap_or(0)
        }

        pub fn clear_bounding_radius(&mut self) {
            self.bounding_radius = ::std::option::Option::None;
        }

        pub fn has_bounding_radius(&self) -> bool {
            self.bounding_radius.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bounding_radius(&mut self, v: i32) {
            self.bounding_radius = ::std::option::Option::Some(v);
        }

        // optional int32 facing = 11;

        pub fn facing(&self) -> i32 {
            self.facing.unwrap_or(0)
        }

        pub fn clear_facing(&mut self) {
            self.facing = ::std::option::Option::None;
        }

        pub fn has_facing(&self) -> bool {
            self.facing.is_some()
        }

        // Param is passed by value, moved
        pub fn set_facing(&mut self, v: i32) {
            self.facing = ::std::option::Option::Some(v);
        }

        // optional uint32 ground_height = 12;

        pub fn ground_height(&self) -> u32 {
            self.ground_height.unwrap_or(0)
        }

        pub fn clear_ground_height(&mut self) {
            self.ground_height = ::std::option::Option::None;
        }

        pub fn has_ground_height(&self) -> bool {
            self.ground_height.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ground_height(&mut self, v: u32) {
            self.ground_height = ::std::option::Option::Some(v);
        }

        // optional uint32 vision_range_daytime = 15;

        pub fn vision_range_daytime(&self) -> u32 {
            self.vision_range_daytime.unwrap_or(0)
        }

        pub fn clear_vision_range_daytime(&mut self) {
            self.vision_range_daytime = ::std::option::Option::None;
        }

        pub fn has_vision_range_daytime(&self) -> bool {
            self.vision_range_daytime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_vision_range_daytime(&mut self, v: u32) {
            self.vision_range_daytime = ::std::option::Option::Some(v);
        }

        // optional uint32 vision_range_nighttime = 16;

        pub fn vision_range_nighttime(&self) -> u32 {
            self.vision_range_nighttime.unwrap_or(0)
        }

        pub fn clear_vision_range_nighttime(&mut self) {
            self.vision_range_nighttime = ::std::option::Option::None;
        }

        pub fn has_vision_range_nighttime(&self) -> bool {
            self.vision_range_nighttime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_vision_range_nighttime(&mut self, v: u32) {
            self.vision_range_nighttime = ::std::option::Option::Some(v);
        }

        // optional int32 health = 20;

        pub fn health(&self) -> i32 {
            self.health.unwrap_or(0)
        }

        pub fn clear_health(&mut self) {
            self.health = ::std::option::Option::None;
        }

        pub fn has_health(&self) -> bool {
            self.health.is_some()
        }

        // Param is passed by value, moved
        pub fn set_health(&mut self, v: i32) {
            self.health = ::std::option::Option::Some(v);
        }

        // optional int32 health_max = 21;

        pub fn health_max(&self) -> i32 {
            self.health_max.unwrap_or(0)
        }

        pub fn clear_health_max(&mut self) {
            self.health_max = ::std::option::Option::None;
        }

        pub fn has_health_max(&self) -> bool {
            self.health_max.is_some()
        }

        // Param is passed by value, moved
        pub fn set_health_max(&mut self, v: i32) {
            self.health_max = ::std::option::Option::Some(v);
        }

        // optional float health_regen = 22;

        pub fn health_regen(&self) -> f32 {
            self.health_regen.unwrap_or(0.)
        }

        pub fn clear_health_regen(&mut self) {
            self.health_regen = ::std::option::Option::None;
        }

        pub fn has_health_regen(&self) -> bool {
            self.health_regen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_health_regen(&mut self, v: f32) {
            self.health_regen = ::std::option::Option::Some(v);
        }

        // optional int32 mana = 25;

        pub fn mana(&self) -> i32 {
            self.mana.unwrap_or(0)
        }

        pub fn clear_mana(&mut self) {
            self.mana = ::std::option::Option::None;
        }

        pub fn has_mana(&self) -> bool {
            self.mana.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mana(&mut self, v: i32) {
            self.mana = ::std::option::Option::Some(v);
        }

        // optional int32 mana_max = 26;

        pub fn mana_max(&self) -> i32 {
            self.mana_max.unwrap_or(0)
        }

        pub fn clear_mana_max(&mut self) {
            self.mana_max = ::std::option::Option::None;
        }

        pub fn has_mana_max(&self) -> bool {
            self.mana_max.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mana_max(&mut self, v: i32) {
            self.mana_max = ::std::option::Option::Some(v);
        }

        // optional float mana_regen = 27;

        pub fn mana_regen(&self) -> f32 {
            self.mana_regen.unwrap_or(0.)
        }

        pub fn clear_mana_regen(&mut self) {
            self.mana_regen = ::std::option::Option::None;
        }

        pub fn has_mana_regen(&self) -> bool {
            self.mana_regen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mana_regen(&mut self, v: f32) {
            self.mana_regen = ::std::option::Option::Some(v);
        }

        // optional int32 base_movement_speed = 30;

        pub fn base_movement_speed(&self) -> i32 {
            self.base_movement_speed.unwrap_or(0)
        }

        pub fn clear_base_movement_speed(&mut self) {
            self.base_movement_speed = ::std::option::Option::None;
        }

        pub fn has_base_movement_speed(&self) -> bool {
            self.base_movement_speed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_base_movement_speed(&mut self, v: i32) {
            self.base_movement_speed = ::std::option::Option::Some(v);
        }

        // optional int32 current_movement_speed = 31;

        pub fn current_movement_speed(&self) -> i32 {
            self.current_movement_speed.unwrap_or(0)
        }

        pub fn clear_current_movement_speed(&mut self) {
            self.current_movement_speed = ::std::option::Option::None;
        }

        pub fn has_current_movement_speed(&self) -> bool {
            self.current_movement_speed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_current_movement_speed(&mut self, v: i32) {
            self.current_movement_speed = ::std::option::Option::Some(v);
        }

        // optional int32 anim_activity = 35;

        pub fn anim_activity(&self) -> i32 {
            self.anim_activity.unwrap_or(0)
        }

        pub fn clear_anim_activity(&mut self) {
            self.anim_activity = ::std::option::Option::None;
        }

        pub fn has_anim_activity(&self) -> bool {
            self.anim_activity.is_some()
        }

        // Param is passed by value, moved
        pub fn set_anim_activity(&mut self, v: i32) {
            self.anim_activity = ::std::option::Option::Some(v);
        }

        // optional float anim_cycle = 36;

        pub fn anim_cycle(&self) -> f32 {
            self.anim_cycle.unwrap_or(0.)
        }

        pub fn clear_anim_cycle(&mut self) {
            self.anim_cycle = ::std::option::Option::None;
        }

        pub fn has_anim_cycle(&self) -> bool {
            self.anim_cycle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_anim_cycle(&mut self, v: f32) {
            self.anim_cycle = ::std::option::Option::Some(v);
        }

        // optional int32 base_damage = 40;

        pub fn base_damage(&self) -> i32 {
            self.base_damage.unwrap_or(0)
        }

        pub fn clear_base_damage(&mut self) {
            self.base_damage = ::std::option::Option::None;
        }

        pub fn has_base_damage(&self) -> bool {
            self.base_damage.is_some()
        }

        // Param is passed by value, moved
        pub fn set_base_damage(&mut self, v: i32) {
            self.base_damage = ::std::option::Option::Some(v);
        }

        // optional int32 base_damage_variance = 41;

        pub fn base_damage_variance(&self) -> i32 {
            self.base_damage_variance.unwrap_or(0)
        }

        pub fn clear_base_damage_variance(&mut self) {
            self.base_damage_variance = ::std::option::Option::None;
        }

        pub fn has_base_damage_variance(&self) -> bool {
            self.base_damage_variance.is_some()
        }

        // Param is passed by value, moved
        pub fn set_base_damage_variance(&mut self, v: i32) {
            self.base_damage_variance = ::std::option::Option::Some(v);
        }

        // optional int32 bonus_damage = 42;

        pub fn bonus_damage(&self) -> i32 {
            self.bonus_damage.unwrap_or(0)
        }

        pub fn clear_bonus_damage(&mut self) {
            self.bonus_damage = ::std::option::Option::None;
        }

        pub fn has_bonus_damage(&self) -> bool {
            self.bonus_damage.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bonus_damage(&mut self, v: i32) {
            self.bonus_damage = ::std::option::Option::Some(v);
        }

        // optional int32 attack_damage = 43;

        pub fn attack_damage(&self) -> i32 {
            self.attack_damage.unwrap_or(0)
        }

        pub fn clear_attack_damage(&mut self) {
            self.attack_damage = ::std::option::Option::None;
        }

        pub fn has_attack_damage(&self) -> bool {
            self.attack_damage.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_damage(&mut self, v: i32) {
            self.attack_damage = ::std::option::Option::Some(v);
        }

        // optional int32 attack_range = 44;

        pub fn attack_range(&self) -> i32 {
            self.attack_range.unwrap_or(0)
        }

        pub fn clear_attack_range(&mut self) {
            self.attack_range = ::std::option::Option::None;
        }

        pub fn has_attack_range(&self) -> bool {
            self.attack_range.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_range(&mut self, v: i32) {
            self.attack_range = ::std::option::Option::Some(v);
        }

        // optional float attack_speed = 45;

        pub fn attack_speed(&self) -> f32 {
            self.attack_speed.unwrap_or(0.)
        }

        pub fn clear_attack_speed(&mut self) {
            self.attack_speed = ::std::option::Option::None;
        }

        pub fn has_attack_speed(&self) -> bool {
            self.attack_speed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_speed(&mut self, v: f32) {
            self.attack_speed = ::std::option::Option::Some(v);
        }

        // optional float attack_anim_point = 46;

        pub fn attack_anim_point(&self) -> f32 {
            self.attack_anim_point.unwrap_or(0.)
        }

        pub fn clear_attack_anim_point(&mut self) {
            self.attack_anim_point = ::std::option::Option::None;
        }

        pub fn has_attack_anim_point(&self) -> bool {
            self.attack_anim_point.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_anim_point(&mut self, v: f32) {
            self.attack_anim_point = ::std::option::Option::Some(v);
        }

        // optional int32 attack_acquisition_range = 47;

        pub fn attack_acquisition_range(&self) -> i32 {
            self.attack_acquisition_range.unwrap_or(0)
        }

        pub fn clear_attack_acquisition_range(&mut self) {
            self.attack_acquisition_range = ::std::option::Option::None;
        }

        pub fn has_attack_acquisition_range(&self) -> bool {
            self.attack_acquisition_range.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_acquisition_range(&mut self, v: i32) {
            self.attack_acquisition_range = ::std::option::Option::Some(v);
        }

        // optional int32 attack_projectile_speed = 48;

        pub fn attack_projectile_speed(&self) -> i32 {
            self.attack_projectile_speed.unwrap_or(0)
        }

        pub fn clear_attack_projectile_speed(&mut self) {
            self.attack_projectile_speed = ::std::option::Option::None;
        }

        pub fn has_attack_projectile_speed(&self) -> bool {
            self.attack_projectile_speed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_projectile_speed(&mut self, v: i32) {
            self.attack_projectile_speed = ::std::option::Option::Some(v);
        }

        // optional uint32 attack_target_handle = 49;

        pub fn attack_target_handle(&self) -> u32 {
            self.attack_target_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_attack_target_handle(&mut self) {
            self.attack_target_handle = ::std::option::Option::None;
        }

        pub fn has_attack_target_handle(&self) -> bool {
            self.attack_target_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_target_handle(&mut self, v: u32) {
            self.attack_target_handle = ::std::option::Option::Some(v);
        }

        // optional string attack_target_name = 52;

        pub fn attack_target_name(&self) -> &str {
            match self.attack_target_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_attack_target_name(&mut self) {
            self.attack_target_name = ::std::option::Option::None;
        }

        pub fn has_attack_target_name(&self) -> bool {
            self.attack_target_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attack_target_name(&mut self, v: ::std::string::String) {
            self.attack_target_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_attack_target_name(&mut self) -> &mut ::std::string::String {
            if self.attack_target_name.is_none() {
                self.attack_target_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.attack_target_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_attack_target_name(&mut self) -> ::std::string::String {
            self.attack_target_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 attacks_per_second = 50;

        pub fn attacks_per_second(&self) -> i32 {
            self.attacks_per_second.unwrap_or(-1i32)
        }

        pub fn clear_attacks_per_second(&mut self) {
            self.attacks_per_second = ::std::option::Option::None;
        }

        pub fn has_attacks_per_second(&self) -> bool {
            self.attacks_per_second.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attacks_per_second(&mut self, v: i32) {
            self.attacks_per_second = ::std::option::Option::Some(v);
        }

        // optional float last_attack_time = 51;

        pub fn last_attack_time(&self) -> f32 {
            self.last_attack_time.unwrap_or(-1.0f32)
        }

        pub fn clear_last_attack_time(&mut self) {
            self.last_attack_time = ::std::option::Option::None;
        }

        pub fn has_last_attack_time(&self) -> bool {
            self.last_attack_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_attack_time(&mut self, v: f32) {
            self.last_attack_time = ::std::option::Option::Some(v);
        }

        // optional uint32 bounty_xp = 60;

        pub fn bounty_xp(&self) -> u32 {
            self.bounty_xp.unwrap_or(0)
        }

        pub fn clear_bounty_xp(&mut self) {
            self.bounty_xp = ::std::option::Option::None;
        }

        pub fn has_bounty_xp(&self) -> bool {
            self.bounty_xp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bounty_xp(&mut self, v: u32) {
            self.bounty_xp = ::std::option::Option::Some(v);
        }

        // optional uint32 bounty_gold_min = 61;

        pub fn bounty_gold_min(&self) -> u32 {
            self.bounty_gold_min.unwrap_or(0)
        }

        pub fn clear_bounty_gold_min(&mut self) {
            self.bounty_gold_min = ::std::option::Option::None;
        }

        pub fn has_bounty_gold_min(&self) -> bool {
            self.bounty_gold_min.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bounty_gold_min(&mut self, v: u32) {
            self.bounty_gold_min = ::std::option::Option::Some(v);
        }

        // optional uint32 bounty_gold_max = 62;

        pub fn bounty_gold_max(&self) -> u32 {
            self.bounty_gold_max.unwrap_or(0)
        }

        pub fn clear_bounty_gold_max(&mut self) {
            self.bounty_gold_max = ::std::option::Option::None;
        }

        pub fn has_bounty_gold_max(&self) -> bool {
            self.bounty_gold_max.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bounty_gold_max(&mut self, v: u32) {
            self.bounty_gold_max = ::std::option::Option::Some(v);
        }

        // optional bool is_channeling = 65;

        pub fn is_channeling(&self) -> bool {
            self.is_channeling.unwrap_or(false)
        }

        pub fn clear_is_channeling(&mut self) {
            self.is_channeling = ::std::option::Option::None;
        }

        pub fn has_is_channeling(&self) -> bool {
            self.is_channeling.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_channeling(&mut self, v: bool) {
            self.is_channeling = ::std::option::Option::Some(v);
        }

        // optional uint32 active_ability_handle = 66;

        pub fn active_ability_handle(&self) -> u32 {
            self.active_ability_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_active_ability_handle(&mut self) {
            self.active_ability_handle = ::std::option::Option::None;
        }

        pub fn has_active_ability_handle(&self) -> bool {
            self.active_ability_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_active_ability_handle(&mut self, v: u32) {
            self.active_ability_handle = ::std::option::Option::Some(v);
        }

        // optional bool is_attack_immune = 70;

        pub fn is_attack_immune(&self) -> bool {
            self.is_attack_immune.unwrap_or(false)
        }

        pub fn clear_is_attack_immune(&mut self) {
            self.is_attack_immune = ::std::option::Option::None;
        }

        pub fn has_is_attack_immune(&self) -> bool {
            self.is_attack_immune.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_attack_immune(&mut self, v: bool) {
            self.is_attack_immune = ::std::option::Option::Some(v);
        }

        // optional bool is_blind = 71;

        pub fn is_blind(&self) -> bool {
            self.is_blind.unwrap_or(false)
        }

        pub fn clear_is_blind(&mut self) {
            self.is_blind = ::std::option::Option::None;
        }

        pub fn has_is_blind(&self) -> bool {
            self.is_blind.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_blind(&mut self, v: bool) {
            self.is_blind = ::std::option::Option::Some(v);
        }

        // optional bool is_block_disabled = 72;

        pub fn is_block_disabled(&self) -> bool {
            self.is_block_disabled.unwrap_or(false)
        }

        pub fn clear_is_block_disabled(&mut self) {
            self.is_block_disabled = ::std::option::Option::None;
        }

        pub fn has_is_block_disabled(&self) -> bool {
            self.is_block_disabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_block_disabled(&mut self, v: bool) {
            self.is_block_disabled = ::std::option::Option::Some(v);
        }

        // optional bool is_disarmed = 73;

        pub fn is_disarmed(&self) -> bool {
            self.is_disarmed.unwrap_or(false)
        }

        pub fn clear_is_disarmed(&mut self) {
            self.is_disarmed = ::std::option::Option::None;
        }

        pub fn has_is_disarmed(&self) -> bool {
            self.is_disarmed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_disarmed(&mut self, v: bool) {
            self.is_disarmed = ::std::option::Option::Some(v);
        }

        // optional bool is_dominated = 74;

        pub fn is_dominated(&self) -> bool {
            self.is_dominated.unwrap_or(false)
        }

        pub fn clear_is_dominated(&mut self) {
            self.is_dominated = ::std::option::Option::None;
        }

        pub fn has_is_dominated(&self) -> bool {
            self.is_dominated.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_dominated(&mut self, v: bool) {
            self.is_dominated = ::std::option::Option::Some(v);
        }

        // optional bool is_evade_disabled = 75;

        pub fn is_evade_disabled(&self) -> bool {
            self.is_evade_disabled.unwrap_or(false)
        }

        pub fn clear_is_evade_disabled(&mut self) {
            self.is_evade_disabled = ::std::option::Option::None;
        }

        pub fn has_is_evade_disabled(&self) -> bool {
            self.is_evade_disabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_evade_disabled(&mut self, v: bool) {
            self.is_evade_disabled = ::std::option::Option::Some(v);
        }

        // optional bool is_hexed = 76;

        pub fn is_hexed(&self) -> bool {
            self.is_hexed.unwrap_or(false)
        }

        pub fn clear_is_hexed(&mut self) {
            self.is_hexed = ::std::option::Option::None;
        }

        pub fn has_is_hexed(&self) -> bool {
            self.is_hexed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_hexed(&mut self, v: bool) {
            self.is_hexed = ::std::option::Option::Some(v);
        }

        // optional bool is_invisible = 77;

        pub fn is_invisible(&self) -> bool {
            self.is_invisible.unwrap_or(false)
        }

        pub fn clear_is_invisible(&mut self) {
            self.is_invisible = ::std::option::Option::None;
        }

        pub fn has_is_invisible(&self) -> bool {
            self.is_invisible.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_invisible(&mut self, v: bool) {
            self.is_invisible = ::std::option::Option::Some(v);
        }

        // optional bool is_invulnerable = 78;

        pub fn is_invulnerable(&self) -> bool {
            self.is_invulnerable.unwrap_or(false)
        }

        pub fn clear_is_invulnerable(&mut self) {
            self.is_invulnerable = ::std::option::Option::None;
        }

        pub fn has_is_invulnerable(&self) -> bool {
            self.is_invulnerable.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_invulnerable(&mut self, v: bool) {
            self.is_invulnerable = ::std::option::Option::Some(v);
        }

        // optional bool is_magic_immune = 79;

        pub fn is_magic_immune(&self) -> bool {
            self.is_magic_immune.unwrap_or(false)
        }

        pub fn clear_is_magic_immune(&mut self) {
            self.is_magic_immune = ::std::option::Option::None;
        }

        pub fn has_is_magic_immune(&self) -> bool {
            self.is_magic_immune.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_magic_immune(&mut self, v: bool) {
            self.is_magic_immune = ::std::option::Option::Some(v);
        }

        // optional bool is_muted = 80;

        pub fn is_muted(&self) -> bool {
            self.is_muted.unwrap_or(false)
        }

        pub fn clear_is_muted(&mut self) {
            self.is_muted = ::std::option::Option::None;
        }

        pub fn has_is_muted(&self) -> bool {
            self.is_muted.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_muted(&mut self, v: bool) {
            self.is_muted = ::std::option::Option::Some(v);
        }

        // optional bool is_nightmared = 82;

        pub fn is_nightmared(&self) -> bool {
            self.is_nightmared.unwrap_or(false)
        }

        pub fn clear_is_nightmared(&mut self) {
            self.is_nightmared = ::std::option::Option::None;
        }

        pub fn has_is_nightmared(&self) -> bool {
            self.is_nightmared.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_nightmared(&mut self, v: bool) {
            self.is_nightmared = ::std::option::Option::Some(v);
        }

        // optional bool is_rooted = 83;

        pub fn is_rooted(&self) -> bool {
            self.is_rooted.unwrap_or(false)
        }

        pub fn clear_is_rooted(&mut self) {
            self.is_rooted = ::std::option::Option::None;
        }

        pub fn has_is_rooted(&self) -> bool {
            self.is_rooted.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_rooted(&mut self, v: bool) {
            self.is_rooted = ::std::option::Option::Some(v);
        }

        // optional bool is_silenced = 84;

        pub fn is_silenced(&self) -> bool {
            self.is_silenced.unwrap_or(false)
        }

        pub fn clear_is_silenced(&mut self) {
            self.is_silenced = ::std::option::Option::None;
        }

        pub fn has_is_silenced(&self) -> bool {
            self.is_silenced.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_silenced(&mut self, v: bool) {
            self.is_silenced = ::std::option::Option::Some(v);
        }

        // optional bool is_specially_deniable = 85;

        pub fn is_specially_deniable(&self) -> bool {
            self.is_specially_deniable.unwrap_or(false)
        }

        pub fn clear_is_specially_deniable(&mut self) {
            self.is_specially_deniable = ::std::option::Option::None;
        }

        pub fn has_is_specially_deniable(&self) -> bool {
            self.is_specially_deniable.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_specially_deniable(&mut self, v: bool) {
            self.is_specially_deniable = ::std::option::Option::Some(v);
        }

        // optional bool is_stunned = 86;

        pub fn is_stunned(&self) -> bool {
            self.is_stunned.unwrap_or(false)
        }

        pub fn clear_is_stunned(&mut self) {
            self.is_stunned = ::std::option::Option::None;
        }

        pub fn has_is_stunned(&self) -> bool {
            self.is_stunned.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_stunned(&mut self, v: bool) {
            self.is_stunned = ::std::option::Option::Some(v);
        }

        // optional bool is_unable_to_miss = 87;

        pub fn is_unable_to_miss(&self) -> bool {
            self.is_unable_to_miss.unwrap_or(false)
        }

        pub fn clear_is_unable_to_miss(&mut self) {
            self.is_unable_to_miss = ::std::option::Option::None;
        }

        pub fn has_is_unable_to_miss(&self) -> bool {
            self.is_unable_to_miss.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_unable_to_miss(&mut self, v: bool) {
            self.is_unable_to_miss = ::std::option::Option::Some(v);
        }

        // optional bool has_scepter = 88;

        pub fn has_scepter(&self) -> bool {
            self.has_scepter.unwrap_or(false)
        }

        pub fn clear_has_scepter(&mut self) {
            self.has_scepter = ::std::option::Option::None;
        }

        pub fn has_has_scepter(&self) -> bool {
            self.has_scepter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_scepter(&mut self, v: bool) {
            self.has_scepter = ::std::option::Option::Some(v);
        }

        // optional bool is_specially_undeniable = 94;

        pub fn is_specially_undeniable(&self) -> bool {
            self.is_specially_undeniable.unwrap_or(false)
        }

        pub fn clear_is_specially_undeniable(&mut self) {
            self.is_specially_undeniable = ::std::option::Option::None;
        }

        pub fn has_is_specially_undeniable(&self) -> bool {
            self.is_specially_undeniable.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_specially_undeniable(&mut self, v: bool) {
            self.is_specially_undeniable = ::std::option::Option::Some(v);
        }

        // optional uint32 action_type = 100;

        pub fn action_type(&self) -> u32 {
            self.action_type.unwrap_or(0)
        }

        pub fn clear_action_type(&mut self) {
            self.action_type = ::std::option::Option::None;
        }

        pub fn has_action_type(&self) -> bool {
            self.action_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_action_type(&mut self, v: u32) {
            self.action_type = ::std::option::Option::Some(v);
        }

        // optional uint32 ability_target_handle = 101;

        pub fn ability_target_handle(&self) -> u32 {
            self.ability_target_handle.unwrap_or(4294967295u32)
        }

        pub fn clear_ability_target_handle(&mut self) {
            self.ability_target_handle = ::std::option::Option::None;
        }

        pub fn has_ability_target_handle(&self) -> bool {
            self.ability_target_handle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_target_handle(&mut self, v: u32) {
            self.ability_target_handle = ::std::option::Option::Some(v);
        }

        // optional string ability_target_name = 103;

        pub fn ability_target_name(&self) -> &str {
            match self.ability_target_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_ability_target_name(&mut self) {
            self.ability_target_name = ::std::option::Option::None;
        }

        pub fn has_ability_target_name(&self) -> bool {
            self.ability_target_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_target_name(&mut self, v: ::std::string::String) {
            self.ability_target_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_ability_target_name(&mut self) -> &mut ::std::string::String {
            if self.ability_target_name.is_none() {
                self.ability_target_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.ability_target_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_ability_target_name(&mut self) -> ::std::string::String {
            self.ability_target_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool is_using_ability = 102;

        pub fn is_using_ability(&self) -> bool {
            self.is_using_ability.unwrap_or(false)
        }

        pub fn clear_is_using_ability(&mut self) {
            self.is_using_ability = ::std::option::Option::None;
        }

        pub fn has_is_using_ability(&self) -> bool {
            self.is_using_ability.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_using_ability(&mut self, v: bool) {
            self.is_using_ability = ::std::option::Option::Some(v);
        }

        // optional uint32 primary_attribute = 110;

        pub fn primary_attribute(&self) -> u32 {
            self.primary_attribute.unwrap_or(0)
        }

        pub fn clear_primary_attribute(&mut self) {
            self.primary_attribute = ::std::option::Option::None;
        }

        pub fn has_primary_attribute(&self) -> bool {
            self.primary_attribute.is_some()
        }

        // Param is passed by value, moved
        pub fn set_primary_attribute(&mut self, v: u32) {
            self.primary_attribute = ::std::option::Option::Some(v);
        }

        // optional bool is_illusion = 111;

        pub fn is_illusion(&self) -> bool {
            self.is_illusion.unwrap_or(false)
        }

        pub fn clear_is_illusion(&mut self) {
            self.is_illusion = ::std::option::Option::None;
        }

        pub fn has_is_illusion(&self) -> bool {
            self.is_illusion.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_illusion(&mut self, v: bool) {
            self.is_illusion = ::std::option::Option::Some(v);
        }

        // optional float respawn_time = 112;

        pub fn respawn_time(&self) -> f32 {
            self.respawn_time.unwrap_or(0.)
        }

        pub fn clear_respawn_time(&mut self) {
            self.respawn_time = ::std::option::Option::None;
        }

        pub fn has_respawn_time(&self) -> bool {
            self.respawn_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_respawn_time(&mut self, v: f32) {
            self.respawn_time = ::std::option::Option::Some(v);
        }

        // optional uint32 buyback_cost = 113;

        pub fn buyback_cost(&self) -> u32 {
            self.buyback_cost.unwrap_or(0)
        }

        pub fn clear_buyback_cost(&mut self) {
            self.buyback_cost = ::std::option::Option::None;
        }

        pub fn has_buyback_cost(&self) -> bool {
            self.buyback_cost.is_some()
        }

        // Param is passed by value, moved
        pub fn set_buyback_cost(&mut self, v: u32) {
            self.buyback_cost = ::std::option::Option::Some(v);
        }

        // optional float buyback_cooldown = 114;

        pub fn buyback_cooldown(&self) -> f32 {
            self.buyback_cooldown.unwrap_or(0.)
        }

        pub fn clear_buyback_cooldown(&mut self) {
            self.buyback_cooldown = ::std::option::Option::None;
        }

        pub fn has_buyback_cooldown(&self) -> bool {
            self.buyback_cooldown.is_some()
        }

        // Param is passed by value, moved
        pub fn set_buyback_cooldown(&mut self, v: f32) {
            self.buyback_cooldown = ::std::option::Option::Some(v);
        }

        // optional float spell_amplification = 115;

        pub fn spell_amplification(&self) -> f32 {
            self.spell_amplification.unwrap_or(0.)
        }

        pub fn clear_spell_amplification(&mut self) {
            self.spell_amplification = ::std::option::Option::None;
        }

        pub fn has_spell_amplification(&self) -> bool {
            self.spell_amplification.is_some()
        }

        // Param is passed by value, moved
        pub fn set_spell_amplification(&mut self, v: f32) {
            self.spell_amplification = ::std::option::Option::Some(v);
        }

        // optional float armor = 116;

        pub fn armor(&self) -> f32 {
            self.armor.unwrap_or(0.)
        }

        pub fn clear_armor(&mut self) {
            self.armor = ::std::option::Option::None;
        }

        pub fn has_armor(&self) -> bool {
            self.armor.is_some()
        }

        // Param is passed by value, moved
        pub fn set_armor(&mut self, v: f32) {
            self.armor = ::std::option::Option::Some(v);
        }

        // optional float magic_resist = 117;

        pub fn magic_resist(&self) -> f32 {
            self.magic_resist.unwrap_or(0.)
        }

        pub fn clear_magic_resist(&mut self) {
            self.magic_resist = ::std::option::Option::None;
        }

        pub fn has_magic_resist(&self) -> bool {
            self.magic_resist.is_some()
        }

        // Param is passed by value, moved
        pub fn set_magic_resist(&mut self, v: f32) {
            self.magic_resist = ::std::option::Option::Some(v);
        }

        // optional float evasion = 118;

        pub fn evasion(&self) -> f32 {
            self.evasion.unwrap_or(0.)
        }

        pub fn clear_evasion(&mut self) {
            self.evasion = ::std::option::Option::None;
        }

        pub fn has_evasion(&self) -> bool {
            self.evasion.is_some()
        }

        // Param is passed by value, moved
        pub fn set_evasion(&mut self, v: f32) {
            self.evasion = ::std::option::Option::Some(v);
        }

        // optional uint32 xp_needed_to_level = 120;

        pub fn xp_needed_to_level(&self) -> u32 {
            self.xp_needed_to_level.unwrap_or(0)
        }

        pub fn clear_xp_needed_to_level(&mut self) {
            self.xp_needed_to_level = ::std::option::Option::None;
        }

        pub fn has_xp_needed_to_level(&self) -> bool {
            self.xp_needed_to_level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_xp_needed_to_level(&mut self, v: u32) {
            self.xp_needed_to_level = ::std::option::Option::Some(v);
        }

        // optional uint32 ability_points = 121;

        pub fn ability_points(&self) -> u32 {
            self.ability_points.unwrap_or(0)
        }

        pub fn clear_ability_points(&mut self) {
            self.ability_points = ::std::option::Option::None;
        }

        pub fn has_ability_points(&self) -> bool {
            self.ability_points.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ability_points(&mut self, v: u32) {
            self.ability_points = ::std::option::Option::Some(v);
        }

        // optional int32 reliable_gold = 122;

        pub fn reliable_gold(&self) -> i32 {
            self.reliable_gold.unwrap_or(-1i32)
        }

        pub fn clear_reliable_gold(&mut self) {
            self.reliable_gold = ::std::option::Option::None;
        }

        pub fn has_reliable_gold(&self) -> bool {
            self.reliable_gold.is_some()
        }

        // Param is passed by value, moved
        pub fn set_reliable_gold(&mut self, v: i32) {
            self.reliable_gold = ::std::option::Option::Some(v);
        }

        // optional int32 unreliable_gold = 123;

        pub fn unreliable_gold(&self) -> i32 {
            self.unreliable_gold.unwrap_or(-1i32)
        }

        pub fn clear_unreliable_gold(&mut self) {
            self.unreliable_gold = ::std::option::Option::None;
        }

        pub fn has_unreliable_gold(&self) -> bool {
            self.unreliable_gold.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unreliable_gold(&mut self, v: i32) {
            self.unreliable_gold = ::std::option::Option::Some(v);
        }

        // optional uint32 last_hits = 124;

        pub fn last_hits(&self) -> u32 {
            self.last_hits.unwrap_or(0)
        }

        pub fn clear_last_hits(&mut self) {
            self.last_hits = ::std::option::Option::None;
        }

        pub fn has_last_hits(&self) -> bool {
            self.last_hits.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_hits(&mut self, v: u32) {
            self.last_hits = ::std::option::Option::Some(v);
        }

        // optional uint32 denies = 125;

        pub fn denies(&self) -> u32 {
            self.denies.unwrap_or(0)
        }

        pub fn clear_denies(&mut self) {
            self.denies = ::std::option::Option::None;
        }

        pub fn has_denies(&self) -> bool {
            self.denies.is_some()
        }

        // Param is passed by value, moved
        pub fn set_denies(&mut self, v: u32) {
            self.denies = ::std::option::Option::Some(v);
        }

        // optional uint32 net_worth = 126;

        pub fn net_worth(&self) -> u32 {
            self.net_worth.unwrap_or(0)
        }

        pub fn clear_net_worth(&mut self) {
            self.net_worth = ::std::option::Option::None;
        }

        pub fn has_net_worth(&self) -> bool {
            self.net_worth.is_some()
        }

        // Param is passed by value, moved
        pub fn set_net_worth(&mut self, v: u32) {
            self.net_worth = ::std::option::Option::Some(v);
        }

        // optional uint32 strength = 127;

        pub fn strength(&self) -> u32 {
            self.strength.unwrap_or(0)
        }

        pub fn clear_strength(&mut self) {
            self.strength = ::std::option::Option::None;
        }

        pub fn has_strength(&self) -> bool {
            self.strength.is_some()
        }

        // Param is passed by value, moved
        pub fn set_strength(&mut self, v: u32) {
            self.strength = ::std::option::Option::Some(v);
        }

        // optional uint32 agility = 128;

        pub fn agility(&self) -> u32 {
            self.agility.unwrap_or(0)
        }

        pub fn clear_agility(&mut self) {
            self.agility = ::std::option::Option::None;
        }

        pub fn has_agility(&self) -> bool {
            self.agility.is_some()
        }

        // Param is passed by value, moved
        pub fn set_agility(&mut self, v: u32) {
            self.agility = ::std::option::Option::Some(v);
        }

        // optional uint32 intelligence = 129;

        pub fn intelligence(&self) -> u32 {
            self.intelligence.unwrap_or(0)
        }

        pub fn clear_intelligence(&mut self) {
            self.intelligence = ::std::option::Option::None;
        }

        pub fn has_intelligence(&self) -> bool {
            self.intelligence.is_some()
        }

        // Param is passed by value, moved
        pub fn set_intelligence(&mut self, v: u32) {
            self.intelligence = ::std::option::Option::Some(v);
        }

        // optional float remaining_lifespan = 130;

        pub fn remaining_lifespan(&self) -> f32 {
            self.remaining_lifespan.unwrap_or(0.)
        }

        pub fn clear_remaining_lifespan(&mut self) {
            self.remaining_lifespan = ::std::option::Option::None;
        }

        pub fn has_remaining_lifespan(&self) -> bool {
            self.remaining_lifespan.is_some()
        }

        // Param is passed by value, moved
        pub fn set_remaining_lifespan(&mut self, v: f32) {
            self.remaining_lifespan = ::std::option::Option::Some(v);
        }

        // optional bool flying_courier = 140;

        pub fn flying_courier(&self) -> bool {
            self.flying_courier.unwrap_or(false)
        }

        pub fn clear_flying_courier(&mut self) {
            self.flying_courier = ::std::option::Option::None;
        }

        pub fn has_flying_courier(&self) -> bool {
            self.flying_courier.is_some()
        }

        // Param is passed by value, moved
        pub fn set_flying_courier(&mut self, v: bool) {
            self.flying_courier = ::std::option::Option::Some(v);
        }

        // optional float shrine_cooldown = 150;

        pub fn shrine_cooldown(&self) -> f32 {
            self.shrine_cooldown.unwrap_or(0.)
        }

        pub fn clear_shrine_cooldown(&mut self) {
            self.shrine_cooldown = ::std::option::Option::None;
        }

        pub fn has_shrine_cooldown(&self) -> bool {
            self.shrine_cooldown.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shrine_cooldown(&mut self, v: f32) {
            self.shrine_cooldown = ::std::option::Option::Some(v);
        }

        // optional bool is_shrine_healing = 151;

        pub fn is_shrine_healing(&self) -> bool {
            self.is_shrine_healing.unwrap_or(false)
        }

        pub fn clear_is_shrine_healing(&mut self) {
            self.is_shrine_healing = ::std::option::Option::None;
        }

        pub fn has_is_shrine_healing(&self) -> bool {
            self.is_shrine_healing.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_shrine_healing(&mut self, v: bool) {
            self.is_shrine_healing = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Unit {
        const NAME: &'static str = "Unit";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.unit_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    26 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.level = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    50 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    56 => {
                        self.is_alive = ::std::option::Option::Some(is.read_bool()?);
                    },
                    64 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    80 => {
                        self.bounding_radius = ::std::option::Option::Some(is.read_int32()?);
                    },
                    88 => {
                        self.facing = ::std::option::Option::Some(is.read_int32()?);
                    },
                    96 => {
                        self.ground_height = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    120 => {
                        self.vision_range_daytime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    128 => {
                        self.vision_range_nighttime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    160 => {
                        self.health = ::std::option::Option::Some(is.read_int32()?);
                    },
                    168 => {
                        self.health_max = ::std::option::Option::Some(is.read_int32()?);
                    },
                    181 => {
                        self.health_regen = ::std::option::Option::Some(is.read_float()?);
                    },
                    200 => {
                        self.mana = ::std::option::Option::Some(is.read_int32()?);
                    },
                    208 => {
                        self.mana_max = ::std::option::Option::Some(is.read_int32()?);
                    },
                    221 => {
                        self.mana_regen = ::std::option::Option::Some(is.read_float()?);
                    },
                    240 => {
                        self.base_movement_speed = ::std::option::Option::Some(is.read_int32()?);
                    },
                    248 => {
                        self.current_movement_speed = ::std::option::Option::Some(is.read_int32()?);
                    },
                    280 => {
                        self.anim_activity = ::std::option::Option::Some(is.read_int32()?);
                    },
                    293 => {
                        self.anim_cycle = ::std::option::Option::Some(is.read_float()?);
                    },
                    320 => {
                        self.base_damage = ::std::option::Option::Some(is.read_int32()?);
                    },
                    328 => {
                        self.base_damage_variance = ::std::option::Option::Some(is.read_int32()?);
                    },
                    336 => {
                        self.bonus_damage = ::std::option::Option::Some(is.read_int32()?);
                    },
                    344 => {
                        self.attack_damage = ::std::option::Option::Some(is.read_int32()?);
                    },
                    352 => {
                        self.attack_range = ::std::option::Option::Some(is.read_int32()?);
                    },
                    365 => {
                        self.attack_speed = ::std::option::Option::Some(is.read_float()?);
                    },
                    373 => {
                        self.attack_anim_point = ::std::option::Option::Some(is.read_float()?);
                    },
                    376 => {
                        self.attack_acquisition_range = ::std::option::Option::Some(is.read_int32()?);
                    },
                    384 => {
                        self.attack_projectile_speed = ::std::option::Option::Some(is.read_int32()?);
                    },
                    392 => {
                        self.attack_target_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    418 => {
                        self.attack_target_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    400 => {
                        self.attacks_per_second = ::std::option::Option::Some(is.read_int32()?);
                    },
                    413 => {
                        self.last_attack_time = ::std::option::Option::Some(is.read_float()?);
                    },
                    480 => {
                        self.bounty_xp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    488 => {
                        self.bounty_gold_min = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    496 => {
                        self.bounty_gold_max = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    520 => {
                        self.is_channeling = ::std::option::Option::Some(is.read_bool()?);
                    },
                    528 => {
                        self.active_ability_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    560 => {
                        self.is_attack_immune = ::std::option::Option::Some(is.read_bool()?);
                    },
                    568 => {
                        self.is_blind = ::std::option::Option::Some(is.read_bool()?);
                    },
                    576 => {
                        self.is_block_disabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    584 => {
                        self.is_disarmed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    592 => {
                        self.is_dominated = ::std::option::Option::Some(is.read_bool()?);
                    },
                    600 => {
                        self.is_evade_disabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    608 => {
                        self.is_hexed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    616 => {
                        self.is_invisible = ::std::option::Option::Some(is.read_bool()?);
                    },
                    624 => {
                        self.is_invulnerable = ::std::option::Option::Some(is.read_bool()?);
                    },
                    632 => {
                        self.is_magic_immune = ::std::option::Option::Some(is.read_bool()?);
                    },
                    640 => {
                        self.is_muted = ::std::option::Option::Some(is.read_bool()?);
                    },
                    656 => {
                        self.is_nightmared = ::std::option::Option::Some(is.read_bool()?);
                    },
                    664 => {
                        self.is_rooted = ::std::option::Option::Some(is.read_bool()?);
                    },
                    672 => {
                        self.is_silenced = ::std::option::Option::Some(is.read_bool()?);
                    },
                    680 => {
                        self.is_specially_deniable = ::std::option::Option::Some(is.read_bool()?);
                    },
                    688 => {
                        self.is_stunned = ::std::option::Option::Some(is.read_bool()?);
                    },
                    696 => {
                        self.is_unable_to_miss = ::std::option::Option::Some(is.read_bool()?);
                    },
                    704 => {
                        self.has_scepter = ::std::option::Option::Some(is.read_bool()?);
                    },
                    752 => {
                        self.is_specially_undeniable = ::std::option::Option::Some(is.read_bool()?);
                    },
                    722 => {
                        self.abilities.push(is.read_message()?);
                    },
                    730 => {
                        self.items.push(is.read_message()?);
                    },
                    738 => {
                        self.modifiers.push(is.read_message()?);
                    },
                    746 => {
                        self.incoming_tracking_projectiles.push(is.read_message()?);
                    },
                    800 => {
                        self.action_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    808 => {
                        self.ability_target_handle = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    826 => {
                        self.ability_target_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    816 => {
                        self.is_using_ability = ::std::option::Option::Some(is.read_bool()?);
                    },
                    880 => {
                        self.primary_attribute = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    888 => {
                        self.is_illusion = ::std::option::Option::Some(is.read_bool()?);
                    },
                    901 => {
                        self.respawn_time = ::std::option::Option::Some(is.read_float()?);
                    },
                    904 => {
                        self.buyback_cost = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    917 => {
                        self.buyback_cooldown = ::std::option::Option::Some(is.read_float()?);
                    },
                    925 => {
                        self.spell_amplification = ::std::option::Option::Some(is.read_float()?);
                    },
                    933 => {
                        self.armor = ::std::option::Option::Some(is.read_float()?);
                    },
                    941 => {
                        self.magic_resist = ::std::option::Option::Some(is.read_float()?);
                    },
                    949 => {
                        self.evasion = ::std::option::Option::Some(is.read_float()?);
                    },
                    960 => {
                        self.xp_needed_to_level = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    968 => {
                        self.ability_points = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    976 => {
                        self.reliable_gold = ::std::option::Option::Some(is.read_int32()?);
                    },
                    984 => {
                        self.unreliable_gold = ::std::option::Option::Some(is.read_int32()?);
                    },
                    992 => {
                        self.last_hits = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    1000 => {
                        self.denies = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    1008 => {
                        self.net_worth = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    1016 => {
                        self.strength = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    1024 => {
                        self.agility = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    1032 => {
                        self.intelligence = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    1045 => {
                        self.remaining_lifespan = ::std::option::Option::Some(is.read_float()?);
                    },
                    1120 => {
                        self.flying_courier = ::std::option::Option::Some(is.read_bool()?);
                    },
                    1205 => {
                        self.shrine_cooldown = ::std::option::Option::Some(is.read_float()?);
                    },
                    1208 => {
                        self.is_shrine_healing = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.unit_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.level {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.is_alive {
                my_size += 1 + 1;
            }
            if let Some(v) = self.player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(8, v);
            }
            if let Some(v) = self.bounding_radius {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(10, v);
            }
            if let Some(v) = self.facing {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(11, v);
            }
            if let Some(v) = self.ground_height {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(12, v);
            }
            if let Some(v) = self.vision_range_daytime {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(15, v);
            }
            if let Some(v) = self.vision_range_nighttime {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(16, v);
            }
            if let Some(v) = self.health {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(20, v);
            }
            if let Some(v) = self.health_max {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(21, v);
            }
            if let Some(v) = self.health_regen {
                my_size += 2 + 4;
            }
            if let Some(v) = self.mana {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(25, v);
            }
            if let Some(v) = self.mana_max {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(26, v);
            }
            if let Some(v) = self.mana_regen {
                my_size += 2 + 4;
            }
            if let Some(v) = self.base_movement_speed {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(30, v);
            }
            if let Some(v) = self.current_movement_speed {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(31, v);
            }
            if let Some(v) = self.anim_activity {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(35, v);
            }
            if let Some(v) = self.anim_cycle {
                my_size += 2 + 4;
            }
            if let Some(v) = self.base_damage {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(40, v);
            }
            if let Some(v) = self.base_damage_variance {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(41, v);
            }
            if let Some(v) = self.bonus_damage {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(42, v);
            }
            if let Some(v) = self.attack_damage {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(43, v);
            }
            if let Some(v) = self.attack_range {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(44, v);
            }
            if let Some(v) = self.attack_speed {
                my_size += 2 + 4;
            }
            if let Some(v) = self.attack_anim_point {
                my_size += 2 + 4;
            }
            if let Some(v) = self.attack_acquisition_range {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(47, v);
            }
            if let Some(v) = self.attack_projectile_speed {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(48, v);
            }
            if let Some(v) = self.attack_target_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(49, v);
            }
            if let Some(v) = self.attack_target_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(52, &v);
            }
            if let Some(v) = self.attacks_per_second {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(50, v);
            }
            if let Some(v) = self.last_attack_time {
                my_size += 2 + 4;
            }
            if let Some(v) = self.bounty_xp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(60, v);
            }
            if let Some(v) = self.bounty_gold_min {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(61, v);
            }
            if let Some(v) = self.bounty_gold_max {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(62, v);
            }
            if let Some(v) = self.is_channeling {
                my_size += 2 + 1;
            }
            if let Some(v) = self.active_ability_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(66, v);
            }
            if let Some(v) = self.is_attack_immune {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_blind {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_block_disabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_disarmed {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_dominated {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_evade_disabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_hexed {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_invisible {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_invulnerable {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_magic_immune {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_muted {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_nightmared {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_rooted {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_silenced {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_specially_deniable {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_stunned {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_unable_to_miss {
                my_size += 2 + 1;
            }
            if let Some(v) = self.has_scepter {
                my_size += 2 + 1;
            }
            if let Some(v) = self.is_specially_undeniable {
                my_size += 2 + 1;
            }
            for value in &self.abilities {
                let len = value.compute_size();
                my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.items {
                let len = value.compute_size();
                my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.modifiers {
                let len = value.compute_size();
                my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.incoming_tracking_projectiles {
                let len = value.compute_size();
                my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.action_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(100, v);
            }
            if let Some(v) = self.ability_target_handle {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(101, v);
            }
            if let Some(v) = self.ability_target_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(103, &v);
            }
            if let Some(v) = self.is_using_ability {
                my_size += 2 + 1;
            }
            if let Some(v) = self.primary_attribute {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(110, v);
            }
            if let Some(v) = self.is_illusion {
                my_size += 2 + 1;
            }
            if let Some(v) = self.respawn_time {
                my_size += 2 + 4;
            }
            if let Some(v) = self.buyback_cost {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(113, v);
            }
            if let Some(v) = self.buyback_cooldown {
                my_size += 2 + 4;
            }
            if let Some(v) = self.spell_amplification {
                my_size += 2 + 4;
            }
            if let Some(v) = self.armor {
                my_size += 2 + 4;
            }
            if let Some(v) = self.magic_resist {
                my_size += 2 + 4;
            }
            if let Some(v) = self.evasion {
                my_size += 2 + 4;
            }
            if let Some(v) = self.xp_needed_to_level {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(120, v);
            }
            if let Some(v) = self.ability_points {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(121, v);
            }
            if let Some(v) = self.reliable_gold {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(122, v);
            }
            if let Some(v) = self.unreliable_gold {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(123, v);
            }
            if let Some(v) = self.last_hits {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(124, v);
            }
            if let Some(v) = self.denies {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(125, v);
            }
            if let Some(v) = self.net_worth {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(126, v);
            }
            if let Some(v) = self.strength {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(127, v);
            }
            if let Some(v) = self.agility {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(128, v);
            }
            if let Some(v) = self.intelligence {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(129, v);
            }
            if let Some(v) = self.remaining_lifespan {
                my_size += 2 + 4;
            }
            if let Some(v) = self.flying_courier {
                my_size += 2 + 1;
            }
            if let Some(v) = self.shrine_cooldown {
                my_size += 2 + 4;
            }
            if let Some(v) = self.is_shrine_healing {
                my_size += 2 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.handle {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.unit_type {
                os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.level {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            }
            if let Some(v) = self.is_alive {
                os.write_bool(7, v)?;
            }
            if let Some(v) = self.player_id {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.bounding_radius {
                os.write_int32(10, v)?;
            }
            if let Some(v) = self.facing {
                os.write_int32(11, v)?;
            }
            if let Some(v) = self.ground_height {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.vision_range_daytime {
                os.write_uint32(15, v)?;
            }
            if let Some(v) = self.vision_range_nighttime {
                os.write_uint32(16, v)?;
            }
            if let Some(v) = self.health {
                os.write_int32(20, v)?;
            }
            if let Some(v) = self.health_max {
                os.write_int32(21, v)?;
            }
            if let Some(v) = self.health_regen {
                os.write_float(22, v)?;
            }
            if let Some(v) = self.mana {
                os.write_int32(25, v)?;
            }
            if let Some(v) = self.mana_max {
                os.write_int32(26, v)?;
            }
            if let Some(v) = self.mana_regen {
                os.write_float(27, v)?;
            }
            if let Some(v) = self.base_movement_speed {
                os.write_int32(30, v)?;
            }
            if let Some(v) = self.current_movement_speed {
                os.write_int32(31, v)?;
            }
            if let Some(v) = self.anim_activity {
                os.write_int32(35, v)?;
            }
            if let Some(v) = self.anim_cycle {
                os.write_float(36, v)?;
            }
            if let Some(v) = self.base_damage {
                os.write_int32(40, v)?;
            }
            if let Some(v) = self.base_damage_variance {
                os.write_int32(41, v)?;
            }
            if let Some(v) = self.bonus_damage {
                os.write_int32(42, v)?;
            }
            if let Some(v) = self.attack_damage {
                os.write_int32(43, v)?;
            }
            if let Some(v) = self.attack_range {
                os.write_int32(44, v)?;
            }
            if let Some(v) = self.attack_speed {
                os.write_float(45, v)?;
            }
            if let Some(v) = self.attack_anim_point {
                os.write_float(46, v)?;
            }
            if let Some(v) = self.attack_acquisition_range {
                os.write_int32(47, v)?;
            }
            if let Some(v) = self.attack_projectile_speed {
                os.write_int32(48, v)?;
            }
            if let Some(v) = self.attack_target_handle {
                os.write_uint32(49, v)?;
            }
            if let Some(v) = self.attack_target_name.as_ref() {
                os.write_string(52, v)?;
            }
            if let Some(v) = self.attacks_per_second {
                os.write_int32(50, v)?;
            }
            if let Some(v) = self.last_attack_time {
                os.write_float(51, v)?;
            }
            if let Some(v) = self.bounty_xp {
                os.write_uint32(60, v)?;
            }
            if let Some(v) = self.bounty_gold_min {
                os.write_uint32(61, v)?;
            }
            if let Some(v) = self.bounty_gold_max {
                os.write_uint32(62, v)?;
            }
            if let Some(v) = self.is_channeling {
                os.write_bool(65, v)?;
            }
            if let Some(v) = self.active_ability_handle {
                os.write_uint32(66, v)?;
            }
            if let Some(v) = self.is_attack_immune {
                os.write_bool(70, v)?;
            }
            if let Some(v) = self.is_blind {
                os.write_bool(71, v)?;
            }
            if let Some(v) = self.is_block_disabled {
                os.write_bool(72, v)?;
            }
            if let Some(v) = self.is_disarmed {
                os.write_bool(73, v)?;
            }
            if let Some(v) = self.is_dominated {
                os.write_bool(74, v)?;
            }
            if let Some(v) = self.is_evade_disabled {
                os.write_bool(75, v)?;
            }
            if let Some(v) = self.is_hexed {
                os.write_bool(76, v)?;
            }
            if let Some(v) = self.is_invisible {
                os.write_bool(77, v)?;
            }
            if let Some(v) = self.is_invulnerable {
                os.write_bool(78, v)?;
            }
            if let Some(v) = self.is_magic_immune {
                os.write_bool(79, v)?;
            }
            if let Some(v) = self.is_muted {
                os.write_bool(80, v)?;
            }
            if let Some(v) = self.is_nightmared {
                os.write_bool(82, v)?;
            }
            if let Some(v) = self.is_rooted {
                os.write_bool(83, v)?;
            }
            if let Some(v) = self.is_silenced {
                os.write_bool(84, v)?;
            }
            if let Some(v) = self.is_specially_deniable {
                os.write_bool(85, v)?;
            }
            if let Some(v) = self.is_stunned {
                os.write_bool(86, v)?;
            }
            if let Some(v) = self.is_unable_to_miss {
                os.write_bool(87, v)?;
            }
            if let Some(v) = self.has_scepter {
                os.write_bool(88, v)?;
            }
            if let Some(v) = self.is_specially_undeniable {
                os.write_bool(94, v)?;
            }
            for v in &self.abilities {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(90, v, os)?;
            };
            for v in &self.items {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(91, v, os)?;
            };
            for v in &self.modifiers {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(92, v, os)?;
            };
            for v in &self.incoming_tracking_projectiles {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(93, v, os)?;
            };
            if let Some(v) = self.action_type {
                os.write_uint32(100, v)?;
            }
            if let Some(v) = self.ability_target_handle {
                os.write_uint32(101, v)?;
            }
            if let Some(v) = self.ability_target_name.as_ref() {
                os.write_string(103, v)?;
            }
            if let Some(v) = self.is_using_ability {
                os.write_bool(102, v)?;
            }
            if let Some(v) = self.primary_attribute {
                os.write_uint32(110, v)?;
            }
            if let Some(v) = self.is_illusion {
                os.write_bool(111, v)?;
            }
            if let Some(v) = self.respawn_time {
                os.write_float(112, v)?;
            }
            if let Some(v) = self.buyback_cost {
                os.write_uint32(113, v)?;
            }
            if let Some(v) = self.buyback_cooldown {
                os.write_float(114, v)?;
            }
            if let Some(v) = self.spell_amplification {
                os.write_float(115, v)?;
            }
            if let Some(v) = self.armor {
                os.write_float(116, v)?;
            }
            if let Some(v) = self.magic_resist {
                os.write_float(117, v)?;
            }
            if let Some(v) = self.evasion {
                os.write_float(118, v)?;
            }
            if let Some(v) = self.xp_needed_to_level {
                os.write_uint32(120, v)?;
            }
            if let Some(v) = self.ability_points {
                os.write_uint32(121, v)?;
            }
            if let Some(v) = self.reliable_gold {
                os.write_int32(122, v)?;
            }
            if let Some(v) = self.unreliable_gold {
                os.write_int32(123, v)?;
            }
            if let Some(v) = self.last_hits {
                os.write_uint32(124, v)?;
            }
            if let Some(v) = self.denies {
                os.write_uint32(125, v)?;
            }
            if let Some(v) = self.net_worth {
                os.write_uint32(126, v)?;
            }
            if let Some(v) = self.strength {
                os.write_uint32(127, v)?;
            }
            if let Some(v) = self.agility {
                os.write_uint32(128, v)?;
            }
            if let Some(v) = self.intelligence {
                os.write_uint32(129, v)?;
            }
            if let Some(v) = self.remaining_lifespan {
                os.write_float(130, v)?;
            }
            if let Some(v) = self.flying_courier {
                os.write_bool(140, v)?;
            }
            if let Some(v) = self.shrine_cooldown {
                os.write_float(150, v)?;
            }
            if let Some(v) = self.is_shrine_healing {
                os.write_bool(151, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Unit {
            Unit::new()
        }

        fn clear(&mut self) {
            self.handle = ::std::option::Option::None;
            self.unit_type = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.level = ::std::option::Option::None;
            self.location.clear();
            self.is_alive = ::std::option::Option::None;
            self.player_id = ::std::option::Option::None;
            self.bounding_radius = ::std::option::Option::None;
            self.facing = ::std::option::Option::None;
            self.ground_height = ::std::option::Option::None;
            self.vision_range_daytime = ::std::option::Option::None;
            self.vision_range_nighttime = ::std::option::Option::None;
            self.health = ::std::option::Option::None;
            self.health_max = ::std::option::Option::None;
            self.health_regen = ::std::option::Option::None;
            self.mana = ::std::option::Option::None;
            self.mana_max = ::std::option::Option::None;
            self.mana_regen = ::std::option::Option::None;
            self.base_movement_speed = ::std::option::Option::None;
            self.current_movement_speed = ::std::option::Option::None;
            self.anim_activity = ::std::option::Option::None;
            self.anim_cycle = ::std::option::Option::None;
            self.base_damage = ::std::option::Option::None;
            self.base_damage_variance = ::std::option::Option::None;
            self.bonus_damage = ::std::option::Option::None;
            self.attack_damage = ::std::option::Option::None;
            self.attack_range = ::std::option::Option::None;
            self.attack_speed = ::std::option::Option::None;
            self.attack_anim_point = ::std::option::Option::None;
            self.attack_acquisition_range = ::std::option::Option::None;
            self.attack_projectile_speed = ::std::option::Option::None;
            self.attack_target_handle = ::std::option::Option::None;
            self.attack_target_name = ::std::option::Option::None;
            self.attacks_per_second = ::std::option::Option::None;
            self.last_attack_time = ::std::option::Option::None;
            self.bounty_xp = ::std::option::Option::None;
            self.bounty_gold_min = ::std::option::Option::None;
            self.bounty_gold_max = ::std::option::Option::None;
            self.is_channeling = ::std::option::Option::None;
            self.active_ability_handle = ::std::option::Option::None;
            self.is_attack_immune = ::std::option::Option::None;
            self.is_blind = ::std::option::Option::None;
            self.is_block_disabled = ::std::option::Option::None;
            self.is_disarmed = ::std::option::Option::None;
            self.is_dominated = ::std::option::Option::None;
            self.is_evade_disabled = ::std::option::Option::None;
            self.is_hexed = ::std::option::Option::None;
            self.is_invisible = ::std::option::Option::None;
            self.is_invulnerable = ::std::option::Option::None;
            self.is_magic_immune = ::std::option::Option::None;
            self.is_muted = ::std::option::Option::None;
            self.is_nightmared = ::std::option::Option::None;
            self.is_rooted = ::std::option::Option::None;
            self.is_silenced = ::std::option::Option::None;
            self.is_specially_deniable = ::std::option::Option::None;
            self.is_stunned = ::std::option::Option::None;
            self.is_unable_to_miss = ::std::option::Option::None;
            self.has_scepter = ::std::option::Option::None;
            self.is_specially_undeniable = ::std::option::Option::None;
            self.abilities.clear();
            self.items.clear();
            self.modifiers.clear();
            self.incoming_tracking_projectiles.clear();
            self.action_type = ::std::option::Option::None;
            self.ability_target_handle = ::std::option::Option::None;
            self.ability_target_name = ::std::option::Option::None;
            self.is_using_ability = ::std::option::Option::None;
            self.primary_attribute = ::std::option::Option::None;
            self.is_illusion = ::std::option::Option::None;
            self.respawn_time = ::std::option::Option::None;
            self.buyback_cost = ::std::option::Option::None;
            self.buyback_cooldown = ::std::option::Option::None;
            self.spell_amplification = ::std::option::Option::None;
            self.armor = ::std::option::Option::None;
            self.magic_resist = ::std::option::Option::None;
            self.evasion = ::std::option::Option::None;
            self.xp_needed_to_level = ::std::option::Option::None;
            self.ability_points = ::std::option::Option::None;
            self.reliable_gold = ::std::option::Option::None;
            self.unreliable_gold = ::std::option::Option::None;
            self.last_hits = ::std::option::Option::None;
            self.denies = ::std::option::Option::None;
            self.net_worth = ::std::option::Option::None;
            self.strength = ::std::option::Option::None;
            self.agility = ::std::option::Option::None;
            self.intelligence = ::std::option::Option::None;
            self.remaining_lifespan = ::std::option::Option::None;
            self.flying_courier = ::std::option::Option::None;
            self.shrine_cooldown = ::std::option::Option::None;
            self.is_shrine_healing = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Unit {
            static instance: Unit = Unit {
                handle: ::std::option::Option::None,
                unit_type: ::std::option::Option::None,
                name: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                level: ::std::option::Option::None,
                location: ::steam_vent_proto_common::protobuf::MessageField::none(),
                is_alive: ::std::option::Option::None,
                player_id: ::std::option::Option::None,
                bounding_radius: ::std::option::Option::None,
                facing: ::std::option::Option::None,
                ground_height: ::std::option::Option::None,
                vision_range_daytime: ::std::option::Option::None,
                vision_range_nighttime: ::std::option::Option::None,
                health: ::std::option::Option::None,
                health_max: ::std::option::Option::None,
                health_regen: ::std::option::Option::None,
                mana: ::std::option::Option::None,
                mana_max: ::std::option::Option::None,
                mana_regen: ::std::option::Option::None,
                base_movement_speed: ::std::option::Option::None,
                current_movement_speed: ::std::option::Option::None,
                anim_activity: ::std::option::Option::None,
                anim_cycle: ::std::option::Option::None,
                base_damage: ::std::option::Option::None,
                base_damage_variance: ::std::option::Option::None,
                bonus_damage: ::std::option::Option::None,
                attack_damage: ::std::option::Option::None,
                attack_range: ::std::option::Option::None,
                attack_speed: ::std::option::Option::None,
                attack_anim_point: ::std::option::Option::None,
                attack_acquisition_range: ::std::option::Option::None,
                attack_projectile_speed: ::std::option::Option::None,
                attack_target_handle: ::std::option::Option::None,
                attack_target_name: ::std::option::Option::None,
                attacks_per_second: ::std::option::Option::None,
                last_attack_time: ::std::option::Option::None,
                bounty_xp: ::std::option::Option::None,
                bounty_gold_min: ::std::option::Option::None,
                bounty_gold_max: ::std::option::Option::None,
                is_channeling: ::std::option::Option::None,
                active_ability_handle: ::std::option::Option::None,
                is_attack_immune: ::std::option::Option::None,
                is_blind: ::std::option::Option::None,
                is_block_disabled: ::std::option::Option::None,
                is_disarmed: ::std::option::Option::None,
                is_dominated: ::std::option::Option::None,
                is_evade_disabled: ::std::option::Option::None,
                is_hexed: ::std::option::Option::None,
                is_invisible: ::std::option::Option::None,
                is_invulnerable: ::std::option::Option::None,
                is_magic_immune: ::std::option::Option::None,
                is_muted: ::std::option::Option::None,
                is_nightmared: ::std::option::Option::None,
                is_rooted: ::std::option::Option::None,
                is_silenced: ::std::option::Option::None,
                is_specially_deniable: ::std::option::Option::None,
                is_stunned: ::std::option::Option::None,
                is_unable_to_miss: ::std::option::Option::None,
                has_scepter: ::std::option::Option::None,
                is_specially_undeniable: ::std::option::Option::None,
                abilities: ::std::vec::Vec::new(),
                items: ::std::vec::Vec::new(),
                modifiers: ::std::vec::Vec::new(),
                incoming_tracking_projectiles: ::std::vec::Vec::new(),
                action_type: ::std::option::Option::None,
                ability_target_handle: ::std::option::Option::None,
                ability_target_name: ::std::option::Option::None,
                is_using_ability: ::std::option::Option::None,
                primary_attribute: ::std::option::Option::None,
                is_illusion: ::std::option::Option::None,
                respawn_time: ::std::option::Option::None,
                buyback_cost: ::std::option::Option::None,
                buyback_cooldown: ::std::option::Option::None,
                spell_amplification: ::std::option::Option::None,
                armor: ::std::option::Option::None,
                magic_resist: ::std::option::Option::None,
                evasion: ::std::option::Option::None,
                xp_needed_to_level: ::std::option::Option::None,
                ability_points: ::std::option::Option::None,
                reliable_gold: ::std::option::Option::None,
                unreliable_gold: ::std::option::Option::None,
                last_hits: ::std::option::Option::None,
                denies: ::std::option::Option::None,
                net_worth: ::std::option::Option::None,
                strength: ::std::option::Option::None,
                agility: ::std::option::Option::None,
                intelligence: ::std::option::Option::None,
                remaining_lifespan: ::std::option::Option::None,
                flying_courier: ::std::option::Option::None,
                shrine_cooldown: ::std::option::Option::None,
                is_shrine_healing: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgBotWorldState.UnitType)
    pub enum UnitType {
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.HERO)
        HERO = 1,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.CREEP_HERO)
        CREEP_HERO = 2,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.LANE_CREEP)
        LANE_CREEP = 3,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.JUNGLE_CREEP)
        JUNGLE_CREEP = 4,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.ROSHAN)
        ROSHAN = 5,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.TOWER)
        TOWER = 6,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.BARRACKS)
        BARRACKS = 7,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.SHRINE)
        SHRINE = 8,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.FORT)
        FORT = 9,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.BUILDING)
        BUILDING = 10,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.COURIER)
        COURIER = 11,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.UnitType.WARD)
        WARD = 12,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for UnitType {
        const NAME: &'static str = "UnitType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<UnitType> {
            match value {
                0 => ::std::option::Option::Some(UnitType::INVALID),
                1 => ::std::option::Option::Some(UnitType::HERO),
                2 => ::std::option::Option::Some(UnitType::CREEP_HERO),
                3 => ::std::option::Option::Some(UnitType::LANE_CREEP),
                4 => ::std::option::Option::Some(UnitType::JUNGLE_CREEP),
                5 => ::std::option::Option::Some(UnitType::ROSHAN),
                6 => ::std::option::Option::Some(UnitType::TOWER),
                7 => ::std::option::Option::Some(UnitType::BARRACKS),
                8 => ::std::option::Option::Some(UnitType::SHRINE),
                9 => ::std::option::Option::Some(UnitType::FORT),
                10 => ::std::option::Option::Some(UnitType::BUILDING),
                11 => ::std::option::Option::Some(UnitType::COURIER),
                12 => ::std::option::Option::Some(UnitType::WARD),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<UnitType> {
            match str {
                "INVALID" => ::std::option::Option::Some(UnitType::INVALID),
                "HERO" => ::std::option::Option::Some(UnitType::HERO),
                "CREEP_HERO" => ::std::option::Option::Some(UnitType::CREEP_HERO),
                "LANE_CREEP" => ::std::option::Option::Some(UnitType::LANE_CREEP),
                "JUNGLE_CREEP" => ::std::option::Option::Some(UnitType::JUNGLE_CREEP),
                "ROSHAN" => ::std::option::Option::Some(UnitType::ROSHAN),
                "TOWER" => ::std::option::Option::Some(UnitType::TOWER),
                "BARRACKS" => ::std::option::Option::Some(UnitType::BARRACKS),
                "SHRINE" => ::std::option::Option::Some(UnitType::SHRINE),
                "FORT" => ::std::option::Option::Some(UnitType::FORT),
                "BUILDING" => ::std::option::Option::Some(UnitType::BUILDING),
                "COURIER" => ::std::option::Option::Some(UnitType::COURIER),
                "WARD" => ::std::option::Option::Some(UnitType::WARD),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [UnitType] = &[
            UnitType::INVALID,
            UnitType::HERO,
            UnitType::CREEP_HERO,
            UnitType::LANE_CREEP,
            UnitType::JUNGLE_CREEP,
            UnitType::ROSHAN,
            UnitType::TOWER,
            UnitType::BARRACKS,
            UnitType::SHRINE,
            UnitType::FORT,
            UnitType::BUILDING,
            UnitType::COURIER,
            UnitType::WARD,
        ];
    }

    impl ::std::default::Default for UnitType {
        fn default() -> Self {
            UnitType::INVALID
        }
    }


    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgBotWorldState.CourierState)
    pub enum CourierState {
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_INIT)
        COURIER_STATE_INIT = -1,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_IDLE)
        COURIER_STATE_IDLE = 0,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_AT_BASE)
        COURIER_STATE_AT_BASE = 1,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_MOVING)
        COURIER_STATE_MOVING = 2,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_DELIVERING_ITEMS)
        COURIER_STATE_DELIVERING_ITEMS = 3,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_RETURNING_TO_BASE)
        COURIER_STATE_RETURNING_TO_BASE = 4,
        // @@protoc_insertion_point(enum_value:CMsgBotWorldState.CourierState.COURIER_STATE_DEAD)
        COURIER_STATE_DEAD = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for CourierState {
        const NAME: &'static str = "CourierState";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<CourierState> {
            match value {
                -1 => ::std::option::Option::Some(CourierState::COURIER_STATE_INIT),
                0 => ::std::option::Option::Some(CourierState::COURIER_STATE_IDLE),
                1 => ::std::option::Option::Some(CourierState::COURIER_STATE_AT_BASE),
                2 => ::std::option::Option::Some(CourierState::COURIER_STATE_MOVING),
                3 => ::std::option::Option::Some(CourierState::COURIER_STATE_DELIVERING_ITEMS),
                4 => ::std::option::Option::Some(CourierState::COURIER_STATE_RETURNING_TO_BASE),
                5 => ::std::option::Option::Some(CourierState::COURIER_STATE_DEAD),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<CourierState> {
            match str {
                "COURIER_STATE_INIT" => ::std::option::Option::Some(CourierState::COURIER_STATE_INIT),
                "COURIER_STATE_IDLE" => ::std::option::Option::Some(CourierState::COURIER_STATE_IDLE),
                "COURIER_STATE_AT_BASE" => ::std::option::Option::Some(CourierState::COURIER_STATE_AT_BASE),
                "COURIER_STATE_MOVING" => ::std::option::Option::Some(CourierState::COURIER_STATE_MOVING),
                "COURIER_STATE_DELIVERING_ITEMS" => ::std::option::Option::Some(CourierState::COURIER_STATE_DELIVERING_ITEMS),
                "COURIER_STATE_RETURNING_TO_BASE" => ::std::option::Option::Some(CourierState::COURIER_STATE_RETURNING_TO_BASE),
                "COURIER_STATE_DEAD" => ::std::option::Option::Some(CourierState::COURIER_STATE_DEAD),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [CourierState] = &[
            CourierState::COURIER_STATE_INIT,
            CourierState::COURIER_STATE_IDLE,
            CourierState::COURIER_STATE_AT_BASE,
            CourierState::COURIER_STATE_MOVING,
            CourierState::COURIER_STATE_DELIVERING_ITEMS,
            CourierState::COURIER_STATE_RETURNING_TO_BASE,
            CourierState::COURIER_STATE_DEAD,
        ];
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for CourierState {
        fn default() -> Self {
            CourierState::COURIER_STATE_INIT
        }
    }

}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::valveextensions::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgBotWorldState {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
