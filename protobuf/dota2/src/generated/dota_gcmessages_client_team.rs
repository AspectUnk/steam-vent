// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_team.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgDOTATeamInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.members)
    pub members: ::std::vec::Vec<cmsg_dotateam_info::Member>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.tag)
    pub tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.pro)
    pub pro: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.pickup_team)
    pub pickup_team: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.ugc_logo)
    pub ugc_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.ugc_base_logo)
    pub ugc_base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.ugc_banner_logo)
    pub ugc_banner_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.ugc_sponsor_logo)
    pub ugc_sponsor_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.wins)
    pub wins: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.losses)
    pub losses: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.games_played_total)
    pub games_played_total: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.games_played_matchmaking)
    pub games_played_matchmaking: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.url_logo)
    pub url_logo: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.registered_member_account_ids)
    pub registered_member_account_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.coach_account_id)
    pub coach_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.audit_entries)
    pub audit_entries: ::std::vec::Vec<cmsg_dotateam_info::AuditEntry>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.region)
    pub region: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::ELeagueRegion>>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.abbreviation)
    pub abbreviation: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.member_stats)
    pub member_stats: ::std::vec::Vec<cmsg_dotateam_info::MemberStats>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.team_stats)
    pub team_stats: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotateam_info::TeamStats>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.dpc_results)
    pub dpc_results: ::std::vec::Vec<cmsg_dotateam_info::DPCResult>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.color_primary)
    pub color_primary: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.color_secondary)
    pub color_secondary: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfo.team_captain)
    pub team_captain: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInfo {
    fn default() -> &'a CMsgDOTATeamInfo {
        <CMsgDOTATeamInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInfo {
    pub fn new() -> CMsgDOTATeamInfo {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string name = 3;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string tag = 4;

    pub fn tag(&self) -> &str {
        match self.tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tag(&mut self) {
        self.tag = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        if self.tag.is_none() {
            self.tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_created = 5;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional bool pro = 6;

    pub fn pro(&self) -> bool {
        self.pro.unwrap_or(false)
    }

    pub fn clear_pro(&mut self) {
        self.pro = ::std::option::Option::None;
    }

    pub fn has_pro(&self) -> bool {
        self.pro.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pro(&mut self, v: bool) {
        self.pro = ::std::option::Option::Some(v);
    }

    // optional bool pickup_team = 8;

    pub fn pickup_team(&self) -> bool {
        self.pickup_team.unwrap_or(false)
    }

    pub fn clear_pickup_team(&mut self) {
        self.pickup_team = ::std::option::Option::None;
    }

    pub fn has_pickup_team(&self) -> bool {
        self.pickup_team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team(&mut self, v: bool) {
        self.pickup_team = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_logo = 9;

    pub fn ugc_logo(&self) -> u64 {
        self.ugc_logo.unwrap_or(0)
    }

    pub fn clear_ugc_logo(&mut self) {
        self.ugc_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_logo(&self) -> bool {
        self.ugc_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_logo(&mut self, v: u64) {
        self.ugc_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_base_logo = 10;

    pub fn ugc_base_logo(&self) -> u64 {
        self.ugc_base_logo.unwrap_or(0)
    }

    pub fn clear_ugc_base_logo(&mut self) {
        self.ugc_base_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_base_logo(&self) -> bool {
        self.ugc_base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_base_logo(&mut self, v: u64) {
        self.ugc_base_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_banner_logo = 11;

    pub fn ugc_banner_logo(&self) -> u64 {
        self.ugc_banner_logo.unwrap_or(0)
    }

    pub fn clear_ugc_banner_logo(&mut self) {
        self.ugc_banner_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_banner_logo(&self) -> bool {
        self.ugc_banner_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_banner_logo(&mut self, v: u64) {
        self.ugc_banner_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_sponsor_logo = 12;

    pub fn ugc_sponsor_logo(&self) -> u64 {
        self.ugc_sponsor_logo.unwrap_or(0)
    }

    pub fn clear_ugc_sponsor_logo(&mut self) {
        self.ugc_sponsor_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_sponsor_logo(&self) -> bool {
        self.ugc_sponsor_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_sponsor_logo(&mut self, v: u64) {
        self.ugc_sponsor_logo = ::std::option::Option::Some(v);
    }

    // optional string country_code = 13;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 14;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 wins = 15;

    pub fn wins(&self) -> u32 {
        self.wins.unwrap_or(0)
    }

    pub fn clear_wins(&mut self) {
        self.wins = ::std::option::Option::None;
    }

    pub fn has_wins(&self) -> bool {
        self.wins.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wins(&mut self, v: u32) {
        self.wins = ::std::option::Option::Some(v);
    }

    // optional uint32 losses = 16;

    pub fn losses(&self) -> u32 {
        self.losses.unwrap_or(0)
    }

    pub fn clear_losses(&mut self) {
        self.losses = ::std::option::Option::None;
    }

    pub fn has_losses(&self) -> bool {
        self.losses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_losses(&mut self, v: u32) {
        self.losses = ::std::option::Option::Some(v);
    }

    // optional uint32 games_played_total = 19;

    pub fn games_played_total(&self) -> u32 {
        self.games_played_total.unwrap_or(0)
    }

    pub fn clear_games_played_total(&mut self) {
        self.games_played_total = ::std::option::Option::None;
    }

    pub fn has_games_played_total(&self) -> bool {
        self.games_played_total.is_some()
    }

    // Param is passed by value, moved
    pub fn set_games_played_total(&mut self, v: u32) {
        self.games_played_total = ::std::option::Option::Some(v);
    }

    // optional uint32 games_played_matchmaking = 20;

    pub fn games_played_matchmaking(&self) -> u32 {
        self.games_played_matchmaking.unwrap_or(0)
    }

    pub fn clear_games_played_matchmaking(&mut self) {
        self.games_played_matchmaking = ::std::option::Option::None;
    }

    pub fn has_games_played_matchmaking(&self) -> bool {
        self.games_played_matchmaking.is_some()
    }

    // Param is passed by value, moved
    pub fn set_games_played_matchmaking(&mut self, v: u32) {
        self.games_played_matchmaking = ::std::option::Option::Some(v);
    }

    // optional string url_logo = 24;

    pub fn url_logo(&self) -> &str {
        match self.url_logo.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url_logo(&mut self) {
        self.url_logo = ::std::option::Option::None;
    }

    pub fn has_url_logo(&self) -> bool {
        self.url_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url_logo(&mut self, v: ::std::string::String) {
        self.url_logo = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url_logo(&mut self) -> &mut ::std::string::String {
        if self.url_logo.is_none() {
            self.url_logo = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url_logo.as_mut().unwrap()
    }

    // Take field
    pub fn take_url_logo(&mut self) -> ::std::string::String {
        self.url_logo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 coach_account_id = 36;

    pub fn coach_account_id(&self) -> u32 {
        self.coach_account_id.unwrap_or(0)
    }

    pub fn clear_coach_account_id(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
    }

    pub fn has_coach_account_id(&self) -> bool {
        self.coach_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_account_id(&mut self, v: u32) {
        self.coach_account_id = ::std::option::Option::Some(v);
    }

    // optional .ELeagueRegion region = 29;

    pub fn region(&self) -> super::dota_shared_enums::ELeagueRegion {
        match self.region {
            Some(e) => e.enum_value_or(super::dota_shared_enums::ELeagueRegion::LEAGUE_REGION_UNSET),
            None => super::dota_shared_enums::ELeagueRegion::LEAGUE_REGION_UNSET,
        }
    }

    pub fn clear_region(&mut self) {
        self.region = ::std::option::Option::None;
    }

    pub fn has_region(&self) -> bool {
        self.region.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: super::dota_shared_enums::ELeagueRegion) {
        self.region = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string abbreviation = 32;

    pub fn abbreviation(&self) -> &str {
        match self.abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_abbreviation(&mut self) {
        self.abbreviation = ::std::option::Option::None;
    }

    pub fn has_abbreviation(&self) -> bool {
        self.abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abbreviation(&mut self, v: ::std::string::String) {
        self.abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.abbreviation.is_none() {
            self.abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_abbreviation(&mut self) -> ::std::string::String {
        self.abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string color_primary = 37;

    pub fn color_primary(&self) -> &str {
        match self.color_primary.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_color_primary(&mut self) {
        self.color_primary = ::std::option::Option::None;
    }

    pub fn has_color_primary(&self) -> bool {
        self.color_primary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color_primary(&mut self, v: ::std::string::String) {
        self.color_primary = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color_primary(&mut self) -> &mut ::std::string::String {
        if self.color_primary.is_none() {
            self.color_primary = ::std::option::Option::Some(::std::string::String::new());
        }
        self.color_primary.as_mut().unwrap()
    }

    // Take field
    pub fn take_color_primary(&mut self) -> ::std::string::String {
        self.color_primary.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string color_secondary = 38;

    pub fn color_secondary(&self) -> &str {
        match self.color_secondary.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_color_secondary(&mut self) {
        self.color_secondary = ::std::option::Option::None;
    }

    pub fn has_color_secondary(&self) -> bool {
        self.color_secondary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color_secondary(&mut self, v: ::std::string::String) {
        self.color_secondary = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color_secondary(&mut self) -> &mut ::std::string::String {
        if self.color_secondary.is_none() {
            self.color_secondary = ::std::option::Option::Some(::std::string::String::new());
        }
        self.color_secondary.as_mut().unwrap()
    }

    // Take field
    pub fn take_color_secondary(&mut self) -> ::std::string::String {
        self.color_secondary.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 team_captain = 39;

    pub fn team_captain(&self) -> u32 {
        self.team_captain.unwrap_or(0)
    }

    pub fn clear_team_captain(&mut self) {
        self.team_captain = ::std::option::Option::None;
    }

    pub fn has_team_captain(&self) -> bool {
        self.team_captain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_captain(&mut self, v: u32) {
        self.team_captain = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInfo {
    const NAME: &'static str = "CMsgDOTATeamInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.members.push(is.read_message()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.tag = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.pro = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.pickup_team = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.ugc_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.ugc_base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                88 => {
                    self.ugc_banner_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                96 => {
                    self.ugc_sponsor_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                106 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                114 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                120 => {
                    self.wins = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.losses = ::std::option::Option::Some(is.read_uint32()?);
                },
                152 => {
                    self.games_played_total = ::std::option::Option::Some(is.read_uint32()?);
                },
                160 => {
                    self.games_played_matchmaking = ::std::option::Option::Some(is.read_uint32()?);
                },
                194 => {
                    self.url_logo = ::std::option::Option::Some(is.read_string()?);
                },
                242 => {
                    is.read_repeated_packed_uint32_into(&mut self.registered_member_account_ids)?;
                },
                240 => {
                    self.registered_member_account_ids.push(is.read_uint32()?);
                },
                288 => {
                    self.coach_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                250 => {
                    self.audit_entries.push(is.read_message()?);
                },
                232 => {
                    self.region = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                258 => {
                    self.abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                266 => {
                    self.member_stats.push(is.read_message()?);
                },
                274 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.team_stats)?;
                },
                282 => {
                    self.dpc_results.push(is.read_message()?);
                },
                298 => {
                    self.color_primary = ::std::option::Option::Some(is.read_string()?);
                },
                306 => {
                    self.color_secondary = ::std::option::Option::Some(is.read_string()?);
                },
                312 => {
                    self.team_captain = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.tag.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.time_created {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.pro {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pickup_team {
            my_size += 1 + 1;
        }
        if let Some(v) = self.ugc_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.ugc_base_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(10, v);
        }
        if let Some(v) = self.ugc_banner_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(11, v);
        }
        if let Some(v) = self.ugc_sponsor_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(13, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.wins {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.losses {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(16, v);
        }
        if let Some(v) = self.games_played_total {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.games_played_matchmaking {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.url_logo.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(24, &v);
        }
        for value in &self.registered_member_account_ids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(30, *value);
        };
        if let Some(v) = self.coach_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(36, v);
        }
        for value in &self.audit_entries {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.region {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(29, v.value());
        }
        if let Some(v) = self.abbreviation.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(32, &v);
        }
        for value in &self.member_stats {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_stats.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.dpc_results {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.color_primary.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(37, &v);
        }
        if let Some(v) = self.color_secondary.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(38, &v);
        }
        if let Some(v) = self.team_captain {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(39, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.tag.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.pro {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.pickup_team {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.ugc_logo {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.ugc_base_logo {
            os.write_uint64(10, v)?;
        }
        if let Some(v) = self.ugc_banner_logo {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.ugc_sponsor_logo {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.wins {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.losses {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.games_played_total {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.games_played_matchmaking {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.url_logo.as_ref() {
            os.write_string(24, v)?;
        }
        for v in &self.registered_member_account_ids {
            os.write_uint32(30, *v)?;
        };
        if let Some(v) = self.coach_account_id {
            os.write_uint32(36, v)?;
        }
        for v in &self.audit_entries {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        };
        if let Some(v) = self.region {
            os.write_enum(29, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            os.write_string(32, v)?;
        }
        for v in &self.member_stats {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        };
        if let Some(v) = self.team_stats.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        }
        for v in &self.dpc_results {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(35, v, os)?;
        };
        if let Some(v) = self.color_primary.as_ref() {
            os.write_string(37, v)?;
        }
        if let Some(v) = self.color_secondary.as_ref() {
            os.write_string(38, v)?;
        }
        if let Some(v) = self.team_captain {
            os.write_uint32(39, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInfo {
        CMsgDOTATeamInfo::new()
    }

    fn clear(&mut self) {
        self.members.clear();
        self.team_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.tag = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.pro = ::std::option::Option::None;
        self.pickup_team = ::std::option::Option::None;
        self.ugc_logo = ::std::option::Option::None;
        self.ugc_base_logo = ::std::option::Option::None;
        self.ugc_banner_logo = ::std::option::Option::None;
        self.ugc_sponsor_logo = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.wins = ::std::option::Option::None;
        self.losses = ::std::option::Option::None;
        self.games_played_total = ::std::option::Option::None;
        self.games_played_matchmaking = ::std::option::Option::None;
        self.url_logo = ::std::option::Option::None;
        self.registered_member_account_ids.clear();
        self.coach_account_id = ::std::option::Option::None;
        self.audit_entries.clear();
        self.region = ::std::option::Option::None;
        self.abbreviation = ::std::option::Option::None;
        self.member_stats.clear();
        self.team_stats.clear();
        self.dpc_results.clear();
        self.color_primary = ::std::option::Option::None;
        self.color_secondary = ::std::option::Option::None;
        self.team_captain = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInfo {
        static instance: CMsgDOTATeamInfo = CMsgDOTATeamInfo {
            members: ::std::vec::Vec::new(),
            team_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            tag: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            pro: ::std::option::Option::None,
            pickup_team: ::std::option::Option::None,
            ugc_logo: ::std::option::Option::None,
            ugc_base_logo: ::std::option::Option::None,
            ugc_banner_logo: ::std::option::Option::None,
            ugc_sponsor_logo: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            url: ::std::option::Option::None,
            wins: ::std::option::Option::None,
            losses: ::std::option::Option::None,
            games_played_total: ::std::option::Option::None,
            games_played_matchmaking: ::std::option::Option::None,
            url_logo: ::std::option::Option::None,
            registered_member_account_ids: ::std::vec::Vec::new(),
            coach_account_id: ::std::option::Option::None,
            audit_entries: ::std::vec::Vec::new(),
            region: ::std::option::Option::None,
            abbreviation: ::std::option::Option::None,
            member_stats: ::std::vec::Vec::new(),
            team_stats: ::steam_vent_proto_common::protobuf::MessageField::none(),
            dpc_results: ::std::vec::Vec::new(),
            color_primary: ::std::option::Option::None,
            color_secondary: ::std::option::Option::None,
            team_captain: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTATeamInfo`
pub mod cmsg_dotateam_info {
    // @@protoc_insertion_point(message:CMsgDOTATeamInfo.HeroStats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct HeroStats {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.hero_id)
        pub hero_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.picks)
        pub picks: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.wins)
        pub wins: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.bans)
        pub bans: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.avg_kills)
        pub avg_kills: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.avg_deaths)
        pub avg_deaths: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.avg_assists)
        pub avg_assists: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.avg_gpm)
        pub avg_gpm: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.HeroStats.avg_xpm)
        pub avg_xpm: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.HeroStats.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a HeroStats {
        fn default() -> &'a HeroStats {
            <HeroStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl HeroStats {
        pub fn new() -> HeroStats {
            ::std::default::Default::default()
        }

        // optional int32 hero_id = 1;

        pub fn hero_id(&self) -> i32 {
            self.hero_id.unwrap_or(0)
        }

        pub fn clear_hero_id(&mut self) {
            self.hero_id = ::std::option::Option::None;
        }

        pub fn has_hero_id(&self) -> bool {
            self.hero_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hero_id(&mut self, v: i32) {
            self.hero_id = ::std::option::Option::Some(v);
        }

        // optional uint32 picks = 2;

        pub fn picks(&self) -> u32 {
            self.picks.unwrap_or(0)
        }

        pub fn clear_picks(&mut self) {
            self.picks = ::std::option::Option::None;
        }

        pub fn has_picks(&self) -> bool {
            self.picks.is_some()
        }

        // Param is passed by value, moved
        pub fn set_picks(&mut self, v: u32) {
            self.picks = ::std::option::Option::Some(v);
        }

        // optional uint32 wins = 3;

        pub fn wins(&self) -> u32 {
            self.wins.unwrap_or(0)
        }

        pub fn clear_wins(&mut self) {
            self.wins = ::std::option::Option::None;
        }

        pub fn has_wins(&self) -> bool {
            self.wins.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wins(&mut self, v: u32) {
            self.wins = ::std::option::Option::Some(v);
        }

        // optional uint32 bans = 4;

        pub fn bans(&self) -> u32 {
            self.bans.unwrap_or(0)
        }

        pub fn clear_bans(&mut self) {
            self.bans = ::std::option::Option::None;
        }

        pub fn has_bans(&self) -> bool {
            self.bans.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bans(&mut self, v: u32) {
            self.bans = ::std::option::Option::Some(v);
        }

        // optional float avg_kills = 5;

        pub fn avg_kills(&self) -> f32 {
            self.avg_kills.unwrap_or(0.)
        }

        pub fn clear_avg_kills(&mut self) {
            self.avg_kills = ::std::option::Option::None;
        }

        pub fn has_avg_kills(&self) -> bool {
            self.avg_kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_kills(&mut self, v: f32) {
            self.avg_kills = ::std::option::Option::Some(v);
        }

        // optional float avg_deaths = 6;

        pub fn avg_deaths(&self) -> f32 {
            self.avg_deaths.unwrap_or(0.)
        }

        pub fn clear_avg_deaths(&mut self) {
            self.avg_deaths = ::std::option::Option::None;
        }

        pub fn has_avg_deaths(&self) -> bool {
            self.avg_deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_deaths(&mut self, v: f32) {
            self.avg_deaths = ::std::option::Option::Some(v);
        }

        // optional float avg_assists = 7;

        pub fn avg_assists(&self) -> f32 {
            self.avg_assists.unwrap_or(0.)
        }

        pub fn clear_avg_assists(&mut self) {
            self.avg_assists = ::std::option::Option::None;
        }

        pub fn has_avg_assists(&self) -> bool {
            self.avg_assists.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_assists(&mut self, v: f32) {
            self.avg_assists = ::std::option::Option::Some(v);
        }

        // optional float avg_gpm = 8;

        pub fn avg_gpm(&self) -> f32 {
            self.avg_gpm.unwrap_or(0.)
        }

        pub fn clear_avg_gpm(&mut self) {
            self.avg_gpm = ::std::option::Option::None;
        }

        pub fn has_avg_gpm(&self) -> bool {
            self.avg_gpm.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_gpm(&mut self, v: f32) {
            self.avg_gpm = ::std::option::Option::Some(v);
        }

        // optional float avg_xpm = 9;

        pub fn avg_xpm(&self) -> f32 {
            self.avg_xpm.unwrap_or(0.)
        }

        pub fn clear_avg_xpm(&mut self) {
            self.avg_xpm = ::std::option::Option::None;
        }

        pub fn has_avg_xpm(&self) -> bool {
            self.avg_xpm.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_xpm(&mut self, v: f32) {
            self.avg_xpm = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for HeroStats {
        const NAME: &'static str = "HeroStats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.hero_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.picks = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.wins = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.bans = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    45 => {
                        self.avg_kills = ::std::option::Option::Some(is.read_float()?);
                    },
                    53 => {
                        self.avg_deaths = ::std::option::Option::Some(is.read_float()?);
                    },
                    61 => {
                        self.avg_assists = ::std::option::Option::Some(is.read_float()?);
                    },
                    69 => {
                        self.avg_gpm = ::std::option::Option::Some(is.read_float()?);
                    },
                    77 => {
                        self.avg_xpm = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hero_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.picks {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.wins {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.bans {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.avg_kills {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_deaths {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_assists {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_gpm {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_xpm {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.hero_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.picks {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.wins {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.bans {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.avg_kills {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.avg_deaths {
                os.write_float(6, v)?;
            }
            if let Some(v) = self.avg_assists {
                os.write_float(7, v)?;
            }
            if let Some(v) = self.avg_gpm {
                os.write_float(8, v)?;
            }
            if let Some(v) = self.avg_xpm {
                os.write_float(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> HeroStats {
            HeroStats::new()
        }

        fn clear(&mut self) {
            self.hero_id = ::std::option::Option::None;
            self.picks = ::std::option::Option::None;
            self.wins = ::std::option::Option::None;
            self.bans = ::std::option::Option::None;
            self.avg_kills = ::std::option::Option::None;
            self.avg_deaths = ::std::option::Option::None;
            self.avg_assists = ::std::option::Option::None;
            self.avg_gpm = ::std::option::Option::None;
            self.avg_xpm = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static HeroStats {
            static instance: HeroStats = HeroStats {
                hero_id: ::std::option::Option::None,
                picks: ::std::option::Option::None,
                wins: ::std::option::Option::None,
                bans: ::std::option::Option::None,
                avg_kills: ::std::option::Option::None,
                avg_deaths: ::std::option::Option::None,
                avg_assists: ::std::option::Option::None,
                avg_gpm: ::std::option::Option::None,
                avg_xpm: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATeamInfo.MemberStats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MemberStats {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.wins_with_team)
        pub wins_with_team: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.losses_with_team)
        pub losses_with_team: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.top_heroes)
        pub top_heroes: ::std::vec::Vec<HeroStats>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.avg_kills)
        pub avg_kills: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.avg_deaths)
        pub avg_deaths: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.MemberStats.avg_assists)
        pub avg_assists: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.MemberStats.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MemberStats {
        fn default() -> &'a MemberStats {
            <MemberStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl MemberStats {
        pub fn new() -> MemberStats {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 wins_with_team = 2;

        pub fn wins_with_team(&self) -> u32 {
            self.wins_with_team.unwrap_or(0)
        }

        pub fn clear_wins_with_team(&mut self) {
            self.wins_with_team = ::std::option::Option::None;
        }

        pub fn has_wins_with_team(&self) -> bool {
            self.wins_with_team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wins_with_team(&mut self, v: u32) {
            self.wins_with_team = ::std::option::Option::Some(v);
        }

        // optional uint32 losses_with_team = 3;

        pub fn losses_with_team(&self) -> u32 {
            self.losses_with_team.unwrap_or(0)
        }

        pub fn clear_losses_with_team(&mut self) {
            self.losses_with_team = ::std::option::Option::None;
        }

        pub fn has_losses_with_team(&self) -> bool {
            self.losses_with_team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_losses_with_team(&mut self, v: u32) {
            self.losses_with_team = ::std::option::Option::Some(v);
        }

        // optional float avg_kills = 5;

        pub fn avg_kills(&self) -> f32 {
            self.avg_kills.unwrap_or(0.)
        }

        pub fn clear_avg_kills(&mut self) {
            self.avg_kills = ::std::option::Option::None;
        }

        pub fn has_avg_kills(&self) -> bool {
            self.avg_kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_kills(&mut self, v: f32) {
            self.avg_kills = ::std::option::Option::Some(v);
        }

        // optional float avg_deaths = 6;

        pub fn avg_deaths(&self) -> f32 {
            self.avg_deaths.unwrap_or(0.)
        }

        pub fn clear_avg_deaths(&mut self) {
            self.avg_deaths = ::std::option::Option::None;
        }

        pub fn has_avg_deaths(&self) -> bool {
            self.avg_deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_deaths(&mut self, v: f32) {
            self.avg_deaths = ::std::option::Option::Some(v);
        }

        // optional float avg_assists = 7;

        pub fn avg_assists(&self) -> f32 {
            self.avg_assists.unwrap_or(0.)
        }

        pub fn clear_avg_assists(&mut self) {
            self.avg_assists = ::std::option::Option::None;
        }

        pub fn has_avg_assists(&self) -> bool {
            self.avg_assists.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_assists(&mut self, v: f32) {
            self.avg_assists = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for MemberStats {
        const NAME: &'static str = "MemberStats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.wins_with_team = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.losses_with_team = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    34 => {
                        self.top_heroes.push(is.read_message()?);
                    },
                    45 => {
                        self.avg_kills = ::std::option::Option::Some(is.read_float()?);
                    },
                    53 => {
                        self.avg_deaths = ::std::option::Option::Some(is.read_float()?);
                    },
                    61 => {
                        self.avg_assists = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.wins_with_team {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.losses_with_team {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            for value in &self.top_heroes {
                let len = value.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.avg_kills {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_deaths {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_assists {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.wins_with_team {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.losses_with_team {
                os.write_uint32(3, v)?;
            }
            for v in &self.top_heroes {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            if let Some(v) = self.avg_kills {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.avg_deaths {
                os.write_float(6, v)?;
            }
            if let Some(v) = self.avg_assists {
                os.write_float(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MemberStats {
            MemberStats::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.wins_with_team = ::std::option::Option::None;
            self.losses_with_team = ::std::option::Option::None;
            self.top_heroes.clear();
            self.avg_kills = ::std::option::Option::None;
            self.avg_deaths = ::std::option::Option::None;
            self.avg_assists = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MemberStats {
            static instance: MemberStats = MemberStats {
                account_id: ::std::option::Option::None,
                wins_with_team: ::std::option::Option::None,
                losses_with_team: ::std::option::Option::None,
                top_heroes: ::std::vec::Vec::new(),
                avg_kills: ::std::option::Option::None,
                avg_deaths: ::std::option::Option::None,
                avg_assists: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATeamInfo.TeamStats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeamStats {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.played_heroes)
        pub played_heroes: ::std::vec::Vec<HeroStats>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.farming)
        pub farming: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.fighting)
        pub fighting: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.versatility)
        pub versatility: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.avg_kills)
        pub avg_kills: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.avg_deaths)
        pub avg_deaths: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.TeamStats.avg_duration)
        pub avg_duration: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.TeamStats.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeamStats {
        fn default() -> &'a TeamStats {
            <TeamStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TeamStats {
        pub fn new() -> TeamStats {
            ::std::default::Default::default()
        }

        // optional float farming = 2;

        pub fn farming(&self) -> f32 {
            self.farming.unwrap_or(0.)
        }

        pub fn clear_farming(&mut self) {
            self.farming = ::std::option::Option::None;
        }

        pub fn has_farming(&self) -> bool {
            self.farming.is_some()
        }

        // Param is passed by value, moved
        pub fn set_farming(&mut self, v: f32) {
            self.farming = ::std::option::Option::Some(v);
        }

        // optional float fighting = 3;

        pub fn fighting(&self) -> f32 {
            self.fighting.unwrap_or(0.)
        }

        pub fn clear_fighting(&mut self) {
            self.fighting = ::std::option::Option::None;
        }

        pub fn has_fighting(&self) -> bool {
            self.fighting.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fighting(&mut self, v: f32) {
            self.fighting = ::std::option::Option::Some(v);
        }

        // optional float versatility = 4;

        pub fn versatility(&self) -> f32 {
            self.versatility.unwrap_or(0.)
        }

        pub fn clear_versatility(&mut self) {
            self.versatility = ::std::option::Option::None;
        }

        pub fn has_versatility(&self) -> bool {
            self.versatility.is_some()
        }

        // Param is passed by value, moved
        pub fn set_versatility(&mut self, v: f32) {
            self.versatility = ::std::option::Option::Some(v);
        }

        // optional float avg_kills = 5;

        pub fn avg_kills(&self) -> f32 {
            self.avg_kills.unwrap_or(0.)
        }

        pub fn clear_avg_kills(&mut self) {
            self.avg_kills = ::std::option::Option::None;
        }

        pub fn has_avg_kills(&self) -> bool {
            self.avg_kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_kills(&mut self, v: f32) {
            self.avg_kills = ::std::option::Option::Some(v);
        }

        // optional float avg_deaths = 6;

        pub fn avg_deaths(&self) -> f32 {
            self.avg_deaths.unwrap_or(0.)
        }

        pub fn clear_avg_deaths(&mut self) {
            self.avg_deaths = ::std::option::Option::None;
        }

        pub fn has_avg_deaths(&self) -> bool {
            self.avg_deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_deaths(&mut self, v: f32) {
            self.avg_deaths = ::std::option::Option::Some(v);
        }

        // optional float avg_duration = 7;

        pub fn avg_duration(&self) -> f32 {
            self.avg_duration.unwrap_or(0.)
        }

        pub fn clear_avg_duration(&mut self) {
            self.avg_duration = ::std::option::Option::None;
        }

        pub fn has_avg_duration(&self) -> bool {
            self.avg_duration.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_duration(&mut self, v: f32) {
            self.avg_duration = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TeamStats {
        const NAME: &'static str = "TeamStats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.played_heroes.push(is.read_message()?);
                    },
                    21 => {
                        self.farming = ::std::option::Option::Some(is.read_float()?);
                    },
                    29 => {
                        self.fighting = ::std::option::Option::Some(is.read_float()?);
                    },
                    37 => {
                        self.versatility = ::std::option::Option::Some(is.read_float()?);
                    },
                    45 => {
                        self.avg_kills = ::std::option::Option::Some(is.read_float()?);
                    },
                    53 => {
                        self.avg_deaths = ::std::option::Option::Some(is.read_float()?);
                    },
                    61 => {
                        self.avg_duration = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.played_heroes {
                let len = value.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.farming {
                my_size += 1 + 4;
            }
            if let Some(v) = self.fighting {
                my_size += 1 + 4;
            }
            if let Some(v) = self.versatility {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_kills {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_deaths {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_duration {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            for v in &self.played_heroes {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            if let Some(v) = self.farming {
                os.write_float(2, v)?;
            }
            if let Some(v) = self.fighting {
                os.write_float(3, v)?;
            }
            if let Some(v) = self.versatility {
                os.write_float(4, v)?;
            }
            if let Some(v) = self.avg_kills {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.avg_deaths {
                os.write_float(6, v)?;
            }
            if let Some(v) = self.avg_duration {
                os.write_float(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeamStats {
            TeamStats::new()
        }

        fn clear(&mut self) {
            self.played_heroes.clear();
            self.farming = ::std::option::Option::None;
            self.fighting = ::std::option::Option::None;
            self.versatility = ::std::option::Option::None;
            self.avg_kills = ::std::option::Option::None;
            self.avg_deaths = ::std::option::Option::None;
            self.avg_duration = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeamStats {
            static instance: TeamStats = TeamStats {
                played_heroes: ::std::vec::Vec::new(),
                farming: ::std::option::Option::None,
                fighting: ::std::option::Option::None,
                versatility: ::std::option::Option::None,
                avg_kills: ::std::option::Option::None,
                avg_deaths: ::std::option::Option::None,
                avg_duration: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATeamInfo.DPCResult)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DPCResult {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.DPCResult.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.DPCResult.standing)
        pub standing: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.DPCResult.points)
        pub points: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.DPCResult.earnings)
        pub earnings: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.DPCResult.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.DPCResult.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DPCResult {
        fn default() -> &'a DPCResult {
            <DPCResult as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl DPCResult {
        pub fn new() -> DPCResult {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 standing = 2;

        pub fn standing(&self) -> u32 {
            self.standing.unwrap_or(0)
        }

        pub fn clear_standing(&mut self) {
            self.standing = ::std::option::Option::None;
        }

        pub fn has_standing(&self) -> bool {
            self.standing.is_some()
        }

        // Param is passed by value, moved
        pub fn set_standing(&mut self, v: u32) {
            self.standing = ::std::option::Option::Some(v);
        }

        // optional uint32 points = 3;

        pub fn points(&self) -> u32 {
            self.points.unwrap_or(0)
        }

        pub fn clear_points(&mut self) {
            self.points = ::std::option::Option::None;
        }

        pub fn has_points(&self) -> bool {
            self.points.is_some()
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: u32) {
            self.points = ::std::option::Option::Some(v);
        }

        // optional uint32 earnings = 4;

        pub fn earnings(&self) -> u32 {
            self.earnings.unwrap_or(0)
        }

        pub fn clear_earnings(&mut self) {
            self.earnings = ::std::option::Option::None;
        }

        pub fn has_earnings(&self) -> bool {
            self.earnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_earnings(&mut self, v: u32) {
            self.earnings = ::std::option::Option::Some(v);
        }

        // optional uint32 timestamp = 5;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for DPCResult {
        const NAME: &'static str = "DPCResult";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.standing = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.points = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.earnings = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.standing {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.points {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.earnings {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.standing {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.points {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.earnings {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.timestamp {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DPCResult {
            DPCResult::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.standing = ::std::option::Option::None;
            self.points = ::std::option::Option::None;
            self.earnings = ::std::option::Option::None;
            self.timestamp = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DPCResult {
            static instance: DPCResult = DPCResult {
                league_id: ::std::option::Option::None,
                standing: ::std::option::Option::None,
                points: ::std::option::Option::None,
                earnings: ::std::option::Option::None,
                timestamp: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATeamInfo.Member)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Member {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.Member.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.Member.time_joined)
        pub time_joined: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.Member.admin)
        pub admin: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.Member.pro_name)
        pub pro_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.Member.role)
        pub role: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_shared_enums::Fantasy_Roles>>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.Member.real_name)
        pub real_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.Member.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Member {
        fn default() -> &'a Member {
            <Member as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Member {
        pub fn new() -> Member {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 time_joined = 2;

        pub fn time_joined(&self) -> u32 {
            self.time_joined.unwrap_or(0)
        }

        pub fn clear_time_joined(&mut self) {
            self.time_joined = ::std::option::Option::None;
        }

        pub fn has_time_joined(&self) -> bool {
            self.time_joined.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_joined(&mut self, v: u32) {
            self.time_joined = ::std::option::Option::Some(v);
        }

        // optional bool admin = 3;

        pub fn admin(&self) -> bool {
            self.admin.unwrap_or(false)
        }

        pub fn clear_admin(&mut self) {
            self.admin = ::std::option::Option::None;
        }

        pub fn has_admin(&self) -> bool {
            self.admin.is_some()
        }

        // Param is passed by value, moved
        pub fn set_admin(&mut self, v: bool) {
            self.admin = ::std::option::Option::Some(v);
        }

        // optional string pro_name = 6;

        pub fn pro_name(&self) -> &str {
            match self.pro_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_pro_name(&mut self) {
            self.pro_name = ::std::option::Option::None;
        }

        pub fn has_pro_name(&self) -> bool {
            self.pro_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_pro_name(&mut self, v: ::std::string::String) {
            self.pro_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_pro_name(&mut self) -> &mut ::std::string::String {
            if self.pro_name.is_none() {
                self.pro_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.pro_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_pro_name(&mut self) -> ::std::string::String {
            self.pro_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional .Fantasy_Roles role = 8;

        pub fn role(&self) -> super::super::dota_shared_enums::Fantasy_Roles {
            match self.role {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED),
                None => super::super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED,
            }
        }

        pub fn clear_role(&mut self) {
            self.role = ::std::option::Option::None;
        }

        pub fn has_role(&self) -> bool {
            self.role.is_some()
        }

        // Param is passed by value, moved
        pub fn set_role(&mut self, v: super::super::dota_shared_enums::Fantasy_Roles) {
            self.role = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional string real_name = 9;

        pub fn real_name(&self) -> &str {
            match self.real_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_real_name(&mut self) {
            self.real_name = ::std::option::Option::None;
        }

        pub fn has_real_name(&self) -> bool {
            self.real_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_real_name(&mut self, v: ::std::string::String) {
            self.real_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
            if self.real_name.is_none() {
                self.real_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.real_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_real_name(&mut self) -> ::std::string::String {
            self.real_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Member {
        const NAME: &'static str = "Member";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.time_joined = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.admin = ::std::option::Option::Some(is.read_bool()?);
                    },
                    50 => {
                        self.pro_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    64 => {
                        self.role = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    74 => {
                        self.real_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.time_joined {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.admin {
                my_size += 1 + 1;
            }
            if let Some(v) = self.pro_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(6, &v);
            }
            if let Some(v) = self.role {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(8, v.value());
            }
            if let Some(v) = self.real_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(9, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.time_joined {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.admin {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.pro_name.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.role {
                os.write_enum(8, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.real_name.as_ref() {
                os.write_string(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Member {
            Member::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.time_joined = ::std::option::Option::None;
            self.admin = ::std::option::Option::None;
            self.pro_name = ::std::option::Option::None;
            self.role = ::std::option::Option::None;
            self.real_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Member {
            static instance: Member = Member {
                account_id: ::std::option::Option::None,
                time_joined: ::std::option::Option::None,
                admin: ::std::option::Option::None,
                pro_name: ::std::option::Option::None,
                role: ::std::option::Option::None,
                real_name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTATeamInfo.AuditEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AuditEntry {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.AuditEntry.audit_action)
        pub audit_action: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.AuditEntry.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTATeamInfo.AuditEntry.account_id)
        pub account_id: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTATeamInfo.AuditEntry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AuditEntry {
        fn default() -> &'a AuditEntry {
            <AuditEntry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl AuditEntry {
        pub fn new() -> AuditEntry {
            ::std::default::Default::default()
        }

        // optional uint32 audit_action = 1;

        pub fn audit_action(&self) -> u32 {
            self.audit_action.unwrap_or(0)
        }

        pub fn clear_audit_action(&mut self) {
            self.audit_action = ::std::option::Option::None;
        }

        pub fn has_audit_action(&self) -> bool {
            self.audit_action.is_some()
        }

        // Param is passed by value, moved
        pub fn set_audit_action(&mut self, v: u32) {
            self.audit_action = ::std::option::Option::Some(v);
        }

        // optional uint32 timestamp = 2;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 account_id = 3;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for AuditEntry {
        const NAME: &'static str = "AuditEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.audit_action = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.audit_action {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.audit_action {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.timestamp {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.account_id {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AuditEntry {
            AuditEntry::new()
        }

        fn clear(&mut self) {
            self.audit_action = ::std::option::Option::None;
            self.timestamp = ::std::option::Option::None;
            self.account_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AuditEntry {
            static instance: AuditEntry = AuditEntry {
                audit_action: ::std::option::Option::None,
                timestamp: ::std::option::Option::None,
                account_id: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamsInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamsInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamsInfo.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamsInfo.teams)
    pub teams: ::std::vec::Vec<CMsgDOTATeamInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamsInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamsInfo {
    fn default() -> &'a CMsgDOTATeamsInfo {
        <CMsgDOTATeamsInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamsInfo {
    pub fn new() -> CMsgDOTATeamsInfo {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamsInfo {
    const NAME: &'static str = "CMsgDOTATeamsInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.teams {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamsInfo {
        CMsgDOTATeamsInfo::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamsInfo {
        static instance: CMsgDOTATeamsInfo = CMsgDOTATeamsInfo {
            league_id: ::std::option::Option::None,
            teams: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInfoList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInfoList {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInfoList.teams)
    pub teams: ::std::vec::Vec<CMsgDOTATeamInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInfoList.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInfoList {
    fn default() -> &'a CMsgDOTATeamInfoList {
        <CMsgDOTATeamInfoList as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInfoList {
    pub fn new() -> CMsgDOTATeamInfoList {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInfoList {
    const NAME: &'static str = "CMsgDOTATeamInfoList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.teams {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInfoList {
        CMsgDOTATeamInfoList::new()
    }

    fn clear(&mut self) {
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInfoList {
        static instance: CMsgDOTATeamInfoList = CMsgDOTATeamInfoList {
            teams: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInfoCache)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInfoCache {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInfoCache.cache_timestamp)
    pub cache_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInfoCache.team_list)
    pub team_list: ::steam_vent_proto_common::protobuf::MessageField<CMsgDOTATeamInfoList>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInfoCache.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInfoCache {
    fn default() -> &'a CMsgDOTATeamInfoCache {
        <CMsgDOTATeamInfoCache as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInfoCache {
    pub fn new() -> CMsgDOTATeamInfoCache {
        ::std::default::Default::default()
    }

    // optional uint32 cache_timestamp = 1;

    pub fn cache_timestamp(&self) -> u32 {
        self.cache_timestamp.unwrap_or(0)
    }

    pub fn clear_cache_timestamp(&mut self) {
        self.cache_timestamp = ::std::option::Option::None;
    }

    pub fn has_cache_timestamp(&self) -> bool {
        self.cache_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_timestamp(&mut self, v: u32) {
        self.cache_timestamp = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInfoCache {
    const NAME: &'static str = "CMsgDOTATeamInfoCache";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cache_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.team_list)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cache_timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.cache_timestamp {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_list.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInfoCache {
        CMsgDOTATeamInfoCache::new()
    }

    fn clear(&mut self) {
        self.cache_timestamp = ::std::option::Option::None;
        self.team_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInfoCache {
        static instance: CMsgDOTATeamInfoCache = CMsgDOTATeamInfoCache {
            cache_timestamp: ::std::option::Option::None,
            team_list: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAMyTeamInfoRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAMyTeamInfoRequest {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAMyTeamInfoRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAMyTeamInfoRequest {
    fn default() -> &'a CMsgDOTAMyTeamInfoRequest {
        <CMsgDOTAMyTeamInfoRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAMyTeamInfoRequest {
    pub fn new() -> CMsgDOTAMyTeamInfoRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAMyTeamInfoRequest {
    const NAME: &'static str = "CMsgDOTAMyTeamInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAMyTeamInfoRequest {
        CMsgDOTAMyTeamInfoRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAMyTeamInfoRequest {
        static instance: CMsgDOTAMyTeamInfoRequest = CMsgDOTAMyTeamInfoRequest {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTACreateTeam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTACreateTeam {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.tag)
    pub tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.logo)
    pub logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.base_logo)
    pub base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.banner_logo)
    pub banner_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.sponsor_logo)
    pub sponsor_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.pickup_team)
    pub pickup_team: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeam.abbreviation)
    pub abbreviation: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTACreateTeam.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTACreateTeam {
    fn default() -> &'a CMsgDOTACreateTeam {
        <CMsgDOTACreateTeam as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTACreateTeam {
    pub fn new() -> CMsgDOTACreateTeam {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string tag = 2;

    pub fn tag(&self) -> &str {
        match self.tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tag(&mut self) {
        self.tag = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        if self.tag.is_none() {
            self.tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 logo = 3;

    pub fn logo(&self) -> u64 {
        self.logo.unwrap_or(0)
    }

    pub fn clear_logo(&mut self) {
        self.logo = ::std::option::Option::None;
    }

    pub fn has_logo(&self) -> bool {
        self.logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: u64) {
        self.logo = ::std::option::Option::Some(v);
    }

    // optional uint64 base_logo = 4;

    pub fn base_logo(&self) -> u64 {
        self.base_logo.unwrap_or(0)
    }

    pub fn clear_base_logo(&mut self) {
        self.base_logo = ::std::option::Option::None;
    }

    pub fn has_base_logo(&self) -> bool {
        self.base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_logo(&mut self, v: u64) {
        self.base_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 banner_logo = 5;

    pub fn banner_logo(&self) -> u64 {
        self.banner_logo.unwrap_or(0)
    }

    pub fn clear_banner_logo(&mut self) {
        self.banner_logo = ::std::option::Option::None;
    }

    pub fn has_banner_logo(&self) -> bool {
        self.banner_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_banner_logo(&mut self, v: u64) {
        self.banner_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 sponsor_logo = 6;

    pub fn sponsor_logo(&self) -> u64 {
        self.sponsor_logo.unwrap_or(0)
    }

    pub fn clear_sponsor_logo(&mut self) {
        self.sponsor_logo = ::std::option::Option::None;
    }

    pub fn has_sponsor_logo(&self) -> bool {
        self.sponsor_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sponsor_logo(&mut self, v: u64) {
        self.sponsor_logo = ::std::option::Option::Some(v);
    }

    // optional string country_code = 7;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 8;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool pickup_team = 9;

    pub fn pickup_team(&self) -> bool {
        self.pickup_team.unwrap_or(false)
    }

    pub fn clear_pickup_team(&mut self) {
        self.pickup_team = ::std::option::Option::None;
    }

    pub fn has_pickup_team(&self) -> bool {
        self.pickup_team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team(&mut self, v: bool) {
        self.pickup_team = ::std::option::Option::Some(v);
    }

    // optional string abbreviation = 10;

    pub fn abbreviation(&self) -> &str {
        match self.abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_abbreviation(&mut self) {
        self.abbreviation = ::std::option::Option::None;
    }

    pub fn has_abbreviation(&self) -> bool {
        self.abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abbreviation(&mut self, v: ::std::string::String) {
        self.abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.abbreviation.is_none() {
            self.abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_abbreviation(&mut self) -> ::std::string::String {
        self.abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTACreateTeam {
    const NAME: &'static str = "CMsgDOTACreateTeam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.tag = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.banner_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.sponsor_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                58 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.pickup_team = ::std::option::Option::Some(is.read_bool()?);
                },
                82 => {
                    self.abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.tag.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.base_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.banner_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.sponsor_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.pickup_team {
            my_size += 1 + 1;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(10, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.tag.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.logo {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.base_logo {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.banner_logo {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.sponsor_logo {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.pickup_team {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            os.write_string(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTACreateTeam {
        CMsgDOTACreateTeam::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.tag = ::std::option::Option::None;
        self.logo = ::std::option::Option::None;
        self.base_logo = ::std::option::Option::None;
        self.banner_logo = ::std::option::Option::None;
        self.sponsor_logo = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.pickup_team = ::std::option::Option::None;
        self.abbreviation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTACreateTeam {
        static instance: CMsgDOTACreateTeam = CMsgDOTACreateTeam {
            name: ::std::option::Option::None,
            tag: ::std::option::Option::None,
            logo: ::std::option::Option::None,
            base_logo: ::std::option::Option::None,
            banner_logo: ::std::option::Option::None,
            sponsor_logo: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            url: ::std::option::Option::None,
            pickup_team: ::std::option::Option::None,
            abbreviation: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTACreateTeamResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTACreateTeamResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTACreateTeamResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dotacreate_team_response::Result>>,
    // @@protoc_insertion_point(field:CMsgDOTACreateTeamResponse.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTACreateTeamResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTACreateTeamResponse {
    fn default() -> &'a CMsgDOTACreateTeamResponse {
        <CMsgDOTACreateTeamResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTACreateTeamResponse {
    pub fn new() -> CMsgDOTACreateTeamResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgDOTACreateTeamResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotacreate_team_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotacreate_team_response::Result::INVALID),
            None => cmsg_dotacreate_team_response::Result::INVALID,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotacreate_team_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTACreateTeamResponse {
    const NAME: &'static str = "CMsgDOTACreateTeamResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTACreateTeamResponse {
        CMsgDOTACreateTeamResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTACreateTeamResponse {
        static instance: CMsgDOTACreateTeamResponse = CMsgDOTACreateTeamResponse {
            result: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTACreateTeamResponse`
pub mod cmsg_dotacreate_team_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTACreateTeamResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.INVALID)
        INVALID = -1,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.NAME_EMPTY)
        NAME_EMPTY = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.NAME_BAD_CHARACTERS)
        NAME_BAD_CHARACTERS = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.NAME_TAKEN)
        NAME_TAKEN = 3,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.NAME_TOO_LONG)
        NAME_TOO_LONG = 4,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.TAG_EMPTY)
        TAG_EMPTY = 5,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.TAG_BAD_CHARACTERS)
        TAG_BAD_CHARACTERS = 6,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.TAG_TAKEN)
        TAG_TAKEN = 7,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.TAG_TOO_LONG)
        TAG_TOO_LONG = 8,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.CREATOR_BUSY)
        CREATOR_BUSY = 9,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.UNSPECIFIED_ERROR)
        UNSPECIFIED_ERROR = 10,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.CREATOR_TEAM_LIMIT_REACHED)
        CREATOR_TEAM_LIMIT_REACHED = 11,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.NO_LOGO)
        NO_LOGO = 12,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.CREATOR_TEAM_CREATION_COOLDOWN)
        CREATOR_TEAM_CREATION_COOLDOWN = 13,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.LOGO_UPLOAD_FAILED)
        LOGO_UPLOAD_FAILED = 14,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.NAME_CHANGED_TOO_RECENTLY)
        NAME_CHANGED_TOO_RECENTLY = 15,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.CREATOR_INSUFFICIENT_LEVEL)
        CREATOR_INSUFFICIENT_LEVEL = 16,
        // @@protoc_insertion_point(enum_value:CMsgDOTACreateTeamResponse.Result.INVALID_ACCOUNT_TYPE)
        INVALID_ACCOUNT_TYPE = 17,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                -1 => ::std::option::Option::Some(Result::INVALID),
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::NAME_EMPTY),
                2 => ::std::option::Option::Some(Result::NAME_BAD_CHARACTERS),
                3 => ::std::option::Option::Some(Result::NAME_TAKEN),
                4 => ::std::option::Option::Some(Result::NAME_TOO_LONG),
                5 => ::std::option::Option::Some(Result::TAG_EMPTY),
                6 => ::std::option::Option::Some(Result::TAG_BAD_CHARACTERS),
                7 => ::std::option::Option::Some(Result::TAG_TAKEN),
                8 => ::std::option::Option::Some(Result::TAG_TOO_LONG),
                9 => ::std::option::Option::Some(Result::CREATOR_BUSY),
                10 => ::std::option::Option::Some(Result::UNSPECIFIED_ERROR),
                11 => ::std::option::Option::Some(Result::CREATOR_TEAM_LIMIT_REACHED),
                12 => ::std::option::Option::Some(Result::NO_LOGO),
                13 => ::std::option::Option::Some(Result::CREATOR_TEAM_CREATION_COOLDOWN),
                14 => ::std::option::Option::Some(Result::LOGO_UPLOAD_FAILED),
                15 => ::std::option::Option::Some(Result::NAME_CHANGED_TOO_RECENTLY),
                16 => ::std::option::Option::Some(Result::CREATOR_INSUFFICIENT_LEVEL),
                17 => ::std::option::Option::Some(Result::INVALID_ACCOUNT_TYPE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "INVALID" => ::std::option::Option::Some(Result::INVALID),
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "NAME_EMPTY" => ::std::option::Option::Some(Result::NAME_EMPTY),
                "NAME_BAD_CHARACTERS" => ::std::option::Option::Some(Result::NAME_BAD_CHARACTERS),
                "NAME_TAKEN" => ::std::option::Option::Some(Result::NAME_TAKEN),
                "NAME_TOO_LONG" => ::std::option::Option::Some(Result::NAME_TOO_LONG),
                "TAG_EMPTY" => ::std::option::Option::Some(Result::TAG_EMPTY),
                "TAG_BAD_CHARACTERS" => ::std::option::Option::Some(Result::TAG_BAD_CHARACTERS),
                "TAG_TAKEN" => ::std::option::Option::Some(Result::TAG_TAKEN),
                "TAG_TOO_LONG" => ::std::option::Option::Some(Result::TAG_TOO_LONG),
                "CREATOR_BUSY" => ::std::option::Option::Some(Result::CREATOR_BUSY),
                "UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::UNSPECIFIED_ERROR),
                "CREATOR_TEAM_LIMIT_REACHED" => ::std::option::Option::Some(Result::CREATOR_TEAM_LIMIT_REACHED),
                "NO_LOGO" => ::std::option::Option::Some(Result::NO_LOGO),
                "CREATOR_TEAM_CREATION_COOLDOWN" => ::std::option::Option::Some(Result::CREATOR_TEAM_CREATION_COOLDOWN),
                "LOGO_UPLOAD_FAILED" => ::std::option::Option::Some(Result::LOGO_UPLOAD_FAILED),
                "NAME_CHANGED_TOO_RECENTLY" => ::std::option::Option::Some(Result::NAME_CHANGED_TOO_RECENTLY),
                "CREATOR_INSUFFICIENT_LEVEL" => ::std::option::Option::Some(Result::CREATOR_INSUFFICIENT_LEVEL),
                "INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::INVALID_ACCOUNT_TYPE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::INVALID,
            Result::SUCCESS,
            Result::NAME_EMPTY,
            Result::NAME_BAD_CHARACTERS,
            Result::NAME_TAKEN,
            Result::NAME_TOO_LONG,
            Result::TAG_EMPTY,
            Result::TAG_BAD_CHARACTERS,
            Result::TAG_TAKEN,
            Result::TAG_TOO_LONG,
            Result::CREATOR_BUSY,
            Result::UNSPECIFIED_ERROR,
            Result::CREATOR_TEAM_LIMIT_REACHED,
            Result::NO_LOGO,
            Result::CREATOR_TEAM_CREATION_COOLDOWN,
            Result::LOGO_UPLOAD_FAILED,
            Result::NAME_CHANGED_TOO_RECENTLY,
            Result::CREATOR_INSUFFICIENT_LEVEL,
            Result::INVALID_ACCOUNT_TYPE,
        ];
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::INVALID
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTAEditTeamDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAEditTeamDetails {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.tag)
    pub tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.logo)
    pub logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.base_logo)
    pub base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.banner_logo)
    pub banner_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.sponsor_logo)
    pub sponsor_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.in_use_by_party)
    pub in_use_by_party: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetails.abbreviation)
    pub abbreviation: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAEditTeamDetails.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAEditTeamDetails {
    fn default() -> &'a CMsgDOTAEditTeamDetails {
        <CMsgDOTAEditTeamDetails as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAEditTeamDetails {
    pub fn new() -> CMsgDOTAEditTeamDetails {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 1;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string tag = 3;

    pub fn tag(&self) -> &str {
        match self.tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tag(&mut self) {
        self.tag = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        if self.tag.is_none() {
            self.tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 logo = 4;

    pub fn logo(&self) -> u64 {
        self.logo.unwrap_or(0)
    }

    pub fn clear_logo(&mut self) {
        self.logo = ::std::option::Option::None;
    }

    pub fn has_logo(&self) -> bool {
        self.logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: u64) {
        self.logo = ::std::option::Option::Some(v);
    }

    // optional uint64 base_logo = 5;

    pub fn base_logo(&self) -> u64 {
        self.base_logo.unwrap_or(0)
    }

    pub fn clear_base_logo(&mut self) {
        self.base_logo = ::std::option::Option::None;
    }

    pub fn has_base_logo(&self) -> bool {
        self.base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_logo(&mut self, v: u64) {
        self.base_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 banner_logo = 6;

    pub fn banner_logo(&self) -> u64 {
        self.banner_logo.unwrap_or(0)
    }

    pub fn clear_banner_logo(&mut self) {
        self.banner_logo = ::std::option::Option::None;
    }

    pub fn has_banner_logo(&self) -> bool {
        self.banner_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_banner_logo(&mut self, v: u64) {
        self.banner_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 sponsor_logo = 7;

    pub fn sponsor_logo(&self) -> u64 {
        self.sponsor_logo.unwrap_or(0)
    }

    pub fn clear_sponsor_logo(&mut self) {
        self.sponsor_logo = ::std::option::Option::None;
    }

    pub fn has_sponsor_logo(&self) -> bool {
        self.sponsor_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sponsor_logo(&mut self, v: u64) {
        self.sponsor_logo = ::std::option::Option::Some(v);
    }

    // optional string country_code = 8;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 9;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool in_use_by_party = 10;

    pub fn in_use_by_party(&self) -> bool {
        self.in_use_by_party.unwrap_or(false)
    }

    pub fn clear_in_use_by_party(&mut self) {
        self.in_use_by_party = ::std::option::Option::None;
    }

    pub fn has_in_use_by_party(&self) -> bool {
        self.in_use_by_party.is_some()
    }

    // Param is passed by value, moved
    pub fn set_in_use_by_party(&mut self, v: bool) {
        self.in_use_by_party = ::std::option::Option::Some(v);
    }

    // optional string abbreviation = 11;

    pub fn abbreviation(&self) -> &str {
        match self.abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_abbreviation(&mut self) {
        self.abbreviation = ::std::option::Option::None;
    }

    pub fn has_abbreviation(&self) -> bool {
        self.abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abbreviation(&mut self, v: ::std::string::String) {
        self.abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.abbreviation.is_none() {
            self.abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_abbreviation(&mut self) -> ::std::string::String {
        self.abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAEditTeamDetails {
    const NAME: &'static str = "CMsgDOTAEditTeamDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.tag = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.banner_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.sponsor_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                66 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.in_use_by_party = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.tag.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.base_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.banner_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.sponsor_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.in_use_by_party {
            my_size += 1 + 1;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(11, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.team_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.tag.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.logo {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.base_logo {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.banner_logo {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.sponsor_logo {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.in_use_by_party {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            os.write_string(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAEditTeamDetails {
        CMsgDOTAEditTeamDetails::new()
    }

    fn clear(&mut self) {
        self.team_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.tag = ::std::option::Option::None;
        self.logo = ::std::option::Option::None;
        self.base_logo = ::std::option::Option::None;
        self.banner_logo = ::std::option::Option::None;
        self.sponsor_logo = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.in_use_by_party = ::std::option::Option::None;
        self.abbreviation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAEditTeamDetails {
        static instance: CMsgDOTAEditTeamDetails = CMsgDOTAEditTeamDetails {
            team_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            tag: ::std::option::Option::None,
            logo: ::std::option::Option::None,
            base_logo: ::std::option::Option::None,
            banner_logo: ::std::option::Option::None,
            sponsor_logo: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            url: ::std::option::Option::None,
            in_use_by_party: ::std::option::Option::None,
            abbreviation: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAEditTeamDetailsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAEditTeamDetailsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAEditTeamDetailsResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dotaedit_team_details_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAEditTeamDetailsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAEditTeamDetailsResponse {
    fn default() -> &'a CMsgDOTAEditTeamDetailsResponse {
        <CMsgDOTAEditTeamDetailsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAEditTeamDetailsResponse {
    pub fn new() -> CMsgDOTAEditTeamDetailsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotaedit_team_details_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotaedit_team_details_response::Result::SUCCESS),
            None => cmsg_dotaedit_team_details_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotaedit_team_details_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAEditTeamDetailsResponse {
    const NAME: &'static str = "CMsgDOTAEditTeamDetailsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAEditTeamDetailsResponse {
        CMsgDOTAEditTeamDetailsResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAEditTeamDetailsResponse {
        static instance: CMsgDOTAEditTeamDetailsResponse = CMsgDOTAEditTeamDetailsResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAEditTeamDetailsResponse`
pub mod cmsg_dotaedit_team_details_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTAEditTeamDetailsResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgDOTAEditTeamDetailsResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_INVALID_ACCOUNT_TYPE)
        FAILURE_INVALID_ACCOUNT_TYPE = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_NOT_MEMBER)
        FAILURE_NOT_MEMBER = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_TEAM_LOCKED)
        FAILURE_TEAM_LOCKED = 3,
        // @@protoc_insertion_point(enum_value:CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 4,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                2 => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                3 => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                4 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                "FAILURE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                "FAILURE_TEAM_LOCKED" => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_INVALID_ACCOUNT_TYPE,
            Result::FAILURE_NOT_MEMBER,
            Result::FAILURE_TEAM_LOCKED,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTATeamInvite_InviterToGC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_InviterToGC {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_InviterToGC.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_InviterToGC.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInvite_InviterToGC.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_InviterToGC {
    fn default() -> &'a CMsgDOTATeamInvite_InviterToGC {
        <CMsgDOTATeamInvite_InviterToGC as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_InviterToGC {
    pub fn new() -> CMsgDOTATeamInvite_InviterToGC {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInvite_InviterToGC {
    const NAME: &'static str = "CMsgDOTATeamInvite_InviterToGC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_InviterToGC {
        CMsgDOTATeamInvite_InviterToGC::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_InviterToGC {
        static instance: CMsgDOTATeamInvite_InviterToGC = CMsgDOTATeamInvite_InviterToGC {
            account_id: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
    pub invitee_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCImmediateResponseToInviter.required_play_time)
    pub required_play_time: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInvite_GCImmediateResponseToInviter.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    fn default() -> &'a CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        <CMsgDOTATeamInvite_GCImmediateResponseToInviter as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    pub fn new() -> CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        ::std::default::Default::default()
    }

    // optional .ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string invitee_name = 2;

    pub fn invitee_name(&self) -> &str {
        match self.invitee_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitee_name(&mut self) {
        self.invitee_name = ::std::option::Option::None;
    }

    pub fn has_invitee_name(&self) -> bool {
        self.invitee_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitee_name(&mut self, v: ::std::string::String) {
        self.invitee_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitee_name(&mut self) -> &mut ::std::string::String {
        if self.invitee_name.is_none() {
            self.invitee_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitee_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitee_name(&mut self) -> ::std::string::String {
        self.invitee_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 required_play_time = 3;

    pub fn required_play_time(&self) -> u32 {
        self.required_play_time.unwrap_or(0)
    }

    pub fn clear_required_play_time(&mut self) {
        self.required_play_time = ::std::option::Option::None;
    }

    pub fn has_required_play_time(&self) -> bool {
        self.required_play_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required_play_time(&mut self, v: u32) {
        self.required_play_time = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCImmediateResponseToInviter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.invitee_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.required_play_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.invitee_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.required_play_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.invitee_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.required_play_time {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        CMsgDOTATeamInvite_GCImmediateResponseToInviter::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.invitee_name = ::std::option::Option::None;
        self.required_play_time = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        static instance: CMsgDOTATeamInvite_GCImmediateResponseToInviter = CMsgDOTATeamInvite_GCImmediateResponseToInviter {
            result: ::std::option::Option::None,
            invitee_name: ::std::option::Option::None,
            required_play_time: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInvite_GCRequestToInvitee)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCRequestToInvitee {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
    pub inviter_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
    pub team_tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCRequestToInvitee.logo)
    pub logo: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInvite_GCRequestToInvitee.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCRequestToInvitee {
    fn default() -> &'a CMsgDOTATeamInvite_GCRequestToInvitee {
        <CMsgDOTATeamInvite_GCRequestToInvitee as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCRequestToInvitee {
    pub fn new() -> CMsgDOTATeamInvite_GCRequestToInvitee {
        ::std::default::Default::default()
    }

    // optional uint32 inviter_account_id = 1;

    pub fn inviter_account_id(&self) -> u32 {
        self.inviter_account_id.unwrap_or(0)
    }

    pub fn clear_inviter_account_id(&mut self) {
        self.inviter_account_id = ::std::option::Option::None;
    }

    pub fn has_inviter_account_id(&self) -> bool {
        self.inviter_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inviter_account_id(&mut self, v: u32) {
        self.inviter_account_id = ::std::option::Option::Some(v);
    }

    // optional string team_name = 2;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_tag = 3;

    pub fn team_tag(&self) -> &str {
        match self.team_tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_tag(&mut self) {
        self.team_tag = ::std::option::Option::None;
    }

    pub fn has_team_tag(&self) -> bool {
        self.team_tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_tag(&mut self, v: ::std::string::String) {
        self.team_tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_tag(&mut self) -> &mut ::std::string::String {
        if self.team_tag.is_none() {
            self.team_tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_tag(&mut self) -> ::std::string::String {
        self.team_tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 logo = 4;

    pub fn logo(&self) -> u64 {
        self.logo.unwrap_or(0)
    }

    pub fn clear_logo(&mut self) {
        self.logo = ::std::option::Option::None;
    }

    pub fn has_logo(&self) -> bool {
        self.logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: u64) {
        self.logo = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInvite_GCRequestToInvitee {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCRequestToInvitee";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.inviter_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.team_tag = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.inviter_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.team_tag.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.inviter_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.team_tag.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.logo {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCRequestToInvitee {
        CMsgDOTATeamInvite_GCRequestToInvitee::new()
    }

    fn clear(&mut self) {
        self.inviter_account_id = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.team_tag = ::std::option::Option::None;
        self.logo = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCRequestToInvitee {
        static instance: CMsgDOTATeamInvite_GCRequestToInvitee = CMsgDOTATeamInvite_GCRequestToInvitee {
            inviter_account_id: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            team_tag: ::std::option::Option::None,
            logo: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInvite_InviteeResponseToGC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_InviteeResponseToGC {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_InviteeResponseToGC.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInvite_InviteeResponseToGC.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_InviteeResponseToGC {
    fn default() -> &'a CMsgDOTATeamInvite_InviteeResponseToGC {
        <CMsgDOTATeamInvite_InviteeResponseToGC as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_InviteeResponseToGC {
    pub fn new() -> CMsgDOTATeamInvite_InviteeResponseToGC {
        ::std::default::Default::default()
    }

    // optional .ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInvite_InviteeResponseToGC {
    const NAME: &'static str = "CMsgDOTATeamInvite_InviteeResponseToGC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_InviteeResponseToGC {
        CMsgDOTATeamInvite_InviteeResponseToGC::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_InviteeResponseToGC {
        static instance: CMsgDOTATeamInvite_InviteeResponseToGC = CMsgDOTATeamInvite_InviteeResponseToGC {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInvite_GCResponseToInviter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCResponseToInviter {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCResponseToInviter.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
    pub invitee_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInvite_GCResponseToInviter.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCResponseToInviter {
    fn default() -> &'a CMsgDOTATeamInvite_GCResponseToInviter {
        <CMsgDOTATeamInvite_GCResponseToInviter as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCResponseToInviter {
    pub fn new() -> CMsgDOTATeamInvite_GCResponseToInviter {
        ::std::default::Default::default()
    }

    // optional .ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string invitee_name = 2;

    pub fn invitee_name(&self) -> &str {
        match self.invitee_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitee_name(&mut self) {
        self.invitee_name = ::std::option::Option::None;
    }

    pub fn has_invitee_name(&self) -> bool {
        self.invitee_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitee_name(&mut self, v: ::std::string::String) {
        self.invitee_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitee_name(&mut self) -> &mut ::std::string::String {
        if self.invitee_name.is_none() {
            self.invitee_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitee_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitee_name(&mut self) -> ::std::string::String {
        self.invitee_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInvite_GCResponseToInviter {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCResponseToInviter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.invitee_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.invitee_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.invitee_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCResponseToInviter {
        CMsgDOTATeamInvite_GCResponseToInviter::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.invitee_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCResponseToInviter {
        static instance: CMsgDOTATeamInvite_GCResponseToInviter = CMsgDOTATeamInvite_GCResponseToInviter {
            result: ::std::option::Option::None,
            invitee_name: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamInvite_GCResponseToInvitee)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCResponseToInvitee {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCResponseToInvitee.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // @@protoc_insertion_point(field:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamInvite_GCResponseToInvitee.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCResponseToInvitee {
    fn default() -> &'a CMsgDOTATeamInvite_GCResponseToInvitee {
        <CMsgDOTATeamInvite_GCResponseToInvitee as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCResponseToInvitee {
    pub fn new() -> CMsgDOTATeamInvite_GCResponseToInvitee {
        ::std::default::Default::default()
    }

    // optional .ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string team_name = 2;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamInvite_GCResponseToInvitee {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCResponseToInvitee";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCResponseToInvitee {
        CMsgDOTATeamInvite_GCResponseToInvitee::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCResponseToInvitee {
        static instance: CMsgDOTATeamInvite_GCResponseToInvitee = CMsgDOTATeamInvite_GCResponseToInvitee {
            result: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAKickTeamMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAKickTeamMember {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAKickTeamMember.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAKickTeamMember.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAKickTeamMember.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAKickTeamMember {
    fn default() -> &'a CMsgDOTAKickTeamMember {
        <CMsgDOTAKickTeamMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAKickTeamMember {
    pub fn new() -> CMsgDOTAKickTeamMember {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAKickTeamMember {
    const NAME: &'static str = "CMsgDOTAKickTeamMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAKickTeamMember {
        CMsgDOTAKickTeamMember::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAKickTeamMember {
        static instance: CMsgDOTAKickTeamMember = CMsgDOTAKickTeamMember {
            account_id: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAKickTeamMemberResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAKickTeamMemberResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAKickTeamMemberResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dotakick_team_member_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAKickTeamMemberResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAKickTeamMemberResponse {
    fn default() -> &'a CMsgDOTAKickTeamMemberResponse {
        <CMsgDOTAKickTeamMemberResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAKickTeamMemberResponse {
    pub fn new() -> CMsgDOTAKickTeamMemberResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotakick_team_member_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotakick_team_member_response::Result::SUCCESS),
            None => cmsg_dotakick_team_member_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotakick_team_member_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAKickTeamMemberResponse {
    const NAME: &'static str = "CMsgDOTAKickTeamMemberResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAKickTeamMemberResponse {
        CMsgDOTAKickTeamMemberResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAKickTeamMemberResponse {
        static instance: CMsgDOTAKickTeamMemberResponse = CMsgDOTAKickTeamMemberResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAKickTeamMemberResponse`
pub mod cmsg_dotakick_team_member_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTAKickTeamMemberResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgDOTAKickTeamMemberResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTAKickTeamMemberResponse.Result.FAILURE_INVALID_ACCOUNT_TYPE)
        FAILURE_INVALID_ACCOUNT_TYPE = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTAKickTeamMemberResponse.Result.FAILURE_KICKER_NOT_ADMIN)
        FAILURE_KICKER_NOT_ADMIN = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTAKickTeamMemberResponse.Result.FAILURE_KICKEE_NOT_MEMBER)
        FAILURE_KICKEE_NOT_MEMBER = 3,
        // @@protoc_insertion_point(enum_value:CMsgDOTAKickTeamMemberResponse.Result.FAILURE_TEAM_LOCKED)
        FAILURE_TEAM_LOCKED = 4,
        // @@protoc_insertion_point(enum_value:CMsgDOTAKickTeamMemberResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                2 => ::std::option::Option::Some(Result::FAILURE_KICKER_NOT_ADMIN),
                3 => ::std::option::Option::Some(Result::FAILURE_KICKEE_NOT_MEMBER),
                4 => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                5 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                "FAILURE_KICKER_NOT_ADMIN" => ::std::option::Option::Some(Result::FAILURE_KICKER_NOT_ADMIN),
                "FAILURE_KICKEE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_KICKEE_NOT_MEMBER),
                "FAILURE_TEAM_LOCKED" => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_INVALID_ACCOUNT_TYPE,
            Result::FAILURE_KICKER_NOT_ADMIN,
            Result::FAILURE_KICKEE_NOT_MEMBER,
            Result::FAILURE_TEAM_LOCKED,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTATransferTeamAdmin)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATransferTeamAdmin {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATransferTeamAdmin.new_admin_account_id)
    pub new_admin_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATransferTeamAdmin.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATransferTeamAdmin.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATransferTeamAdmin {
    fn default() -> &'a CMsgDOTATransferTeamAdmin {
        <CMsgDOTATransferTeamAdmin as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATransferTeamAdmin {
    pub fn new() -> CMsgDOTATransferTeamAdmin {
        ::std::default::Default::default()
    }

    // optional uint32 new_admin_account_id = 1;

    pub fn new_admin_account_id(&self) -> u32 {
        self.new_admin_account_id.unwrap_or(0)
    }

    pub fn clear_new_admin_account_id(&mut self) {
        self.new_admin_account_id = ::std::option::Option::None;
    }

    pub fn has_new_admin_account_id(&self) -> bool {
        self.new_admin_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_admin_account_id(&mut self, v: u32) {
        self.new_admin_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATransferTeamAdmin {
    const NAME: &'static str = "CMsgDOTATransferTeamAdmin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.new_admin_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.new_admin_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.new_admin_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATransferTeamAdmin {
        CMsgDOTATransferTeamAdmin::new()
    }

    fn clear(&mut self) {
        self.new_admin_account_id = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATransferTeamAdmin {
        static instance: CMsgDOTATransferTeamAdmin = CMsgDOTATransferTeamAdmin {
            new_admin_account_id: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATransferTeamAdminResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATransferTeamAdminResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATransferTeamAdminResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dotatransfer_team_admin_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATransferTeamAdminResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATransferTeamAdminResponse {
    fn default() -> &'a CMsgDOTATransferTeamAdminResponse {
        <CMsgDOTATransferTeamAdminResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATransferTeamAdminResponse {
    pub fn new() -> CMsgDOTATransferTeamAdminResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotatransfer_team_admin_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotatransfer_team_admin_response::Result::SUCCESS),
            None => cmsg_dotatransfer_team_admin_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotatransfer_team_admin_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATransferTeamAdminResponse {
    const NAME: &'static str = "CMsgDOTATransferTeamAdminResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATransferTeamAdminResponse {
        CMsgDOTATransferTeamAdminResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATransferTeamAdminResponse {
        static instance: CMsgDOTATransferTeamAdminResponse = CMsgDOTATransferTeamAdminResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTATransferTeamAdminResponse`
pub mod cmsg_dotatransfer_team_admin_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTATransferTeamAdminResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgDOTATransferTeamAdminResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTATransferTeamAdminResponse.Result.FAILURE_INVALID_ACCOUNT_TYPE)
        FAILURE_INVALID_ACCOUNT_TYPE = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTATransferTeamAdminResponse.Result.FAILURE_NOT_ADMIN)
        FAILURE_NOT_ADMIN = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTATransferTeamAdminResponse.Result.FAILURE_SAME_ACCOUNT)
        FAILURE_SAME_ACCOUNT = 3,
        // @@protoc_insertion_point(enum_value:CMsgDOTATransferTeamAdminResponse.Result.FAILURE_NOT_MEMBER)
        FAILURE_NOT_MEMBER = 4,
        // @@protoc_insertion_point(enum_value:CMsgDOTATransferTeamAdminResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                2 => ::std::option::Option::Some(Result::FAILURE_NOT_ADMIN),
                3 => ::std::option::Option::Some(Result::FAILURE_SAME_ACCOUNT),
                4 => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                5 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                "FAILURE_NOT_ADMIN" => ::std::option::Option::Some(Result::FAILURE_NOT_ADMIN),
                "FAILURE_SAME_ACCOUNT" => ::std::option::Option::Some(Result::FAILURE_SAME_ACCOUNT),
                "FAILURE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_INVALID_ACCOUNT_TYPE,
            Result::FAILURE_NOT_ADMIN,
            Result::FAILURE_SAME_ACCOUNT,
            Result::FAILURE_NOT_MEMBER,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTALeaveTeam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaveTeam {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTALeaveTeam.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTALeaveTeam.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaveTeam {
    fn default() -> &'a CMsgDOTALeaveTeam {
        <CMsgDOTALeaveTeam as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaveTeam {
    pub fn new() -> CMsgDOTALeaveTeam {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 1;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTALeaveTeam {
    const NAME: &'static str = "CMsgDOTALeaveTeam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.team_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaveTeam {
        CMsgDOTALeaveTeam::new()
    }

    fn clear(&mut self) {
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaveTeam {
        static instance: CMsgDOTALeaveTeam = CMsgDOTALeaveTeam {
            team_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTALeaveTeamResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaveTeamResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTALeaveTeamResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dotaleave_team_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTALeaveTeamResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaveTeamResponse {
    fn default() -> &'a CMsgDOTALeaveTeamResponse {
        <CMsgDOTALeaveTeamResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaveTeamResponse {
    pub fn new() -> CMsgDOTALeaveTeamResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgDOTALeaveTeamResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotaleave_team_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotaleave_team_response::Result::SUCCESS),
            None => cmsg_dotaleave_team_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotaleave_team_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTALeaveTeamResponse {
    const NAME: &'static str = "CMsgDOTALeaveTeamResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaveTeamResponse {
        CMsgDOTALeaveTeamResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaveTeamResponse {
        static instance: CMsgDOTALeaveTeamResponse = CMsgDOTALeaveTeamResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTALeaveTeamResponse`
pub mod cmsg_dotaleave_team_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTALeaveTeamResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgDOTALeaveTeamResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTALeaveTeamResponse.Result.FAILURE_NOT_MEMBER)
        FAILURE_NOT_MEMBER = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTALeaveTeamResponse.Result.FAILURE_TEAM_LOCKED)
        FAILURE_TEAM_LOCKED = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTALeaveTeamResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                2 => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                3 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                "FAILURE_TEAM_LOCKED" => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_NOT_MEMBER,
            Result::FAILURE_TEAM_LOCKED,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTABetaParticipation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTABetaParticipation {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTABetaParticipation.access_rights)
    pub access_rights: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTABetaParticipation.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTABetaParticipation {
    fn default() -> &'a CMsgDOTABetaParticipation {
        <CMsgDOTABetaParticipation as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTABetaParticipation {
    pub fn new() -> CMsgDOTABetaParticipation {
        ::std::default::Default::default()
    }

    // optional uint32 access_rights = 1;

    pub fn access_rights(&self) -> u32 {
        self.access_rights.unwrap_or(0)
    }

    pub fn clear_access_rights(&mut self) {
        self.access_rights = ::std::option::Option::None;
    }

    pub fn has_access_rights(&self) -> bool {
        self.access_rights.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_rights(&mut self, v: u32) {
        self.access_rights = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTABetaParticipation {
    const NAME: &'static str = "CMsgDOTABetaParticipation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.access_rights = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.access_rights {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.access_rights {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTABetaParticipation {
        CMsgDOTABetaParticipation::new()
    }

    fn clear(&mut self) {
        self.access_rights = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTABetaParticipation {
        static instance: CMsgDOTABetaParticipation = CMsgDOTABetaParticipation {
            access_rights: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETeamInviteResult)
pub enum ETeamInviteResult {
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_SUCCESS)
    TEAM_INVITE_SUCCESS = 0,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_FAILURE_INVITE_REJECTED)
    TEAM_INVITE_FAILURE_INVITE_REJECTED = 1,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_FAILURE_INVITE_TIMEOUT)
    TEAM_INVITE_FAILURE_INVITE_TIMEOUT = 2,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT)
    TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT = 3,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_TEAM_LOCKED)
    TEAM_INVITE_ERROR_TEAM_LOCKED = 4,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE)
    TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE = 5,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_BUSY)
    TEAM_INVITE_ERROR_INVITEE_BUSY = 6,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER)
    TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER = 7,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT)
    TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT = 8,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME)
    TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME = 9,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE)
    TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE = 10,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INVITER_NOT_ADMIN)
    TEAM_INVITE_ERROR_INVITER_NOT_ADMIN = 11,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED)
    TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED = 12,
    // @@protoc_insertion_point(enum_value:ETeamInviteResult.TEAM_INVITE_ERROR_UNSPECIFIED)
    TEAM_INVITE_ERROR_UNSPECIFIED = 13,
}

impl ::steam_vent_proto_common::protobuf::Enum for ETeamInviteResult {
    const NAME: &'static str = "ETeamInviteResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETeamInviteResult> {
        match value {
            0 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            1 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_REJECTED),
            2 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_TIMEOUT),
            3 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT),
            4 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_LOCKED),
            5 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE),
            6 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_BUSY),
            7 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER),
            8 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT),
            9 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME),
            10 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE),
            11 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_NOT_ADMIN),
            12 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED),
            13 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_UNSPECIFIED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETeamInviteResult> {
        match str {
            "TEAM_INVITE_SUCCESS" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            "TEAM_INVITE_FAILURE_INVITE_REJECTED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_REJECTED),
            "TEAM_INVITE_FAILURE_INVITE_TIMEOUT" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_TIMEOUT),
            "TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT),
            "TEAM_INVITE_ERROR_TEAM_LOCKED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_LOCKED),
            "TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE),
            "TEAM_INVITE_ERROR_INVITEE_BUSY" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_BUSY),
            "TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER),
            "TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT),
            "TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME),
            "TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE),
            "TEAM_INVITE_ERROR_INVITER_NOT_ADMIN" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_NOT_ADMIN),
            "TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED),
            "TEAM_INVITE_ERROR_UNSPECIFIED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_UNSPECIFIED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETeamInviteResult] = &[
        ETeamInviteResult::TEAM_INVITE_SUCCESS,
        ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_REJECTED,
        ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_TIMEOUT,
        ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT,
        ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_LOCKED,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_BUSY,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_NOT_ADMIN,
        ETeamInviteResult::TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED,
        ETeamInviteResult::TEAM_INVITE_ERROR_UNSPECIFIED,
    ];
}

impl ::std::default::Default for ETeamInviteResult {
    fn default() -> Self {
        ETeamInviteResult::TEAM_INVITE_SUCCESS
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::dota_shared_enums::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamsInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInfoList {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInfoCache {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAMyTeamInfoRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTACreateTeam {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTACreateTeamResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAEditTeamDetails {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAEditTeamDetailsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInvite_InviterToGC {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInvite_GCRequestToInvitee {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInvite_InviteeResponseToGC {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInvite_GCResponseToInviter {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamInvite_GCResponseToInvitee {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAKickTeamMember {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAKickTeamMemberResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATransferTeamAdmin {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATransferTeamAdminResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTALeaveTeam {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTALeaveTeamResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTABetaParticipation {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
