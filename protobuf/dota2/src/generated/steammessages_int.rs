// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_int.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CMsgWebAPIKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWebAPIKey {
    // message fields
    // @@protoc_insertion_point(field:CMsgWebAPIKey.status)
    pub status: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWebAPIKey.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWebAPIKey.publisher_group_id)
    pub publisher_group_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWebAPIKey.key_id)
    pub key_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWebAPIKey.domain)
    pub domain: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWebAPIKey.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWebAPIKey {
    fn default() -> &'a CMsgWebAPIKey {
        <CMsgWebAPIKey as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWebAPIKey {
    pub fn new() -> CMsgWebAPIKey {
        ::std::default::Default::default()
    }

    // optional uint32 status = 1;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(255u32)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }

    // optional uint32 account_id = 2;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0u32)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 publisher_group_id = 3;

    pub fn publisher_group_id(&self) -> u32 {
        self.publisher_group_id.unwrap_or(0u32)
    }

    pub fn clear_publisher_group_id(&mut self) {
        self.publisher_group_id = ::std::option::Option::None;
    }

    pub fn has_publisher_group_id(&self) -> bool {
        self.publisher_group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publisher_group_id(&mut self, v: u32) {
        self.publisher_group_id = ::std::option::Option::Some(v);
    }

    // optional uint32 key_id = 4;

    pub fn key_id(&self) -> u32 {
        self.key_id.unwrap_or(0)
    }

    pub fn clear_key_id(&mut self) {
        self.key_id = ::std::option::Option::None;
    }

    pub fn has_key_id(&self) -> bool {
        self.key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: u32) {
        self.key_id = ::std::option::Option::Some(v);
    }

    // optional string domain = 5;

    pub fn domain(&self) -> &str {
        match self.domain.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_domain(&mut self) {
        self.domain = ::std::option::Option::None;
    }

    pub fn has_domain(&self) -> bool {
        self.domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        if self.domain.is_none() {
            self.domain = ::std::option::Option::Some(::std::string::String::new());
        }
        self.domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        self.domain.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWebAPIKey {
    const NAME: &'static str = "CMsgWebAPIKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.publisher_group_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.key_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.domain = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.status {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.publisher_group_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.key_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.domain.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.status {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.publisher_group_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.key_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.domain.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWebAPIKey {
        CMsgWebAPIKey::new()
    }

    fn clear(&mut self) {
        self.status = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.publisher_group_id = ::std::option::Option::None;
        self.key_id = ::std::option::Option::None;
        self.domain = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWebAPIKey {
        static instance: CMsgWebAPIKey = CMsgWebAPIKey {
            status: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            publisher_group_id: ::std::option::Option::None,
            key_id: ::std::option::Option::None,
            domain: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgHttpRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgHttpRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgHttpRequest.request_method)
    pub request_method: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.hostname)
    pub hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.headers)
    pub headers: ::std::vec::Vec<cmsg_http_request::RequestHeader>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.get_params)
    pub get_params: ::std::vec::Vec<cmsg_http_request::QueryParam>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.post_params)
    pub post_params: ::std::vec::Vec<cmsg_http_request::QueryParam>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.body)
    pub body: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.absolute_timeout)
    pub absolute_timeout: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgHttpRequest.use_https)
    pub use_https: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgHttpRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgHttpRequest {
    fn default() -> &'a CMsgHttpRequest {
        <CMsgHttpRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgHttpRequest {
    pub fn new() -> CMsgHttpRequest {
        ::std::default::Default::default()
    }

    // optional uint32 request_method = 1;

    pub fn request_method(&self) -> u32 {
        self.request_method.unwrap_or(0)
    }

    pub fn clear_request_method(&mut self) {
        self.request_method = ::std::option::Option::None;
    }

    pub fn has_request_method(&self) -> bool {
        self.request_method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_method(&mut self, v: u32) {
        self.request_method = ::std::option::Option::Some(v);
    }

    // optional string hostname = 2;

    pub fn hostname(&self) -> &str {
        match self.hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostname(&mut self) {
        self.hostname = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        self.hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        if self.hostname.is_none() {
            self.hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        self.hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 3;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes body = 7;

    pub fn body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 absolute_timeout = 8;

    pub fn absolute_timeout(&self) -> u32 {
        self.absolute_timeout.unwrap_or(0)
    }

    pub fn clear_absolute_timeout(&mut self) {
        self.absolute_timeout = ::std::option::Option::None;
    }

    pub fn has_absolute_timeout(&self) -> bool {
        self.absolute_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_absolute_timeout(&mut self, v: u32) {
        self.absolute_timeout = ::std::option::Option::Some(v);
    }

    // optional bool use_https = 9;

    pub fn use_https(&self) -> bool {
        self.use_https.unwrap_or(false)
    }

    pub fn clear_use_https(&mut self) {
        self.use_https = ::std::option::Option::None;
    }

    pub fn has_use_https(&self) -> bool {
        self.use_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_https(&mut self, v: bool) {
        self.use_https = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgHttpRequest {
    const NAME: &'static str = "CMsgHttpRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.request_method = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.hostname = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.headers.push(is.read_message()?);
                },
                42 => {
                    self.get_params.push(is.read_message()?);
                },
                50 => {
                    self.post_params.push(is.read_message()?);
                },
                58 => {
                    self.body = ::std::option::Option::Some(is.read_bytes()?);
                },
                64 => {
                    self.absolute_timeout = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.use_https = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request_method {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.hostname.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.get_params {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.post_params {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.body.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.absolute_timeout {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.use_https {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.request_method {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.hostname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.headers {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.get_params {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.post_params {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.body.as_ref() {
            os.write_bytes(7, v)?;
        }
        if let Some(v) = self.absolute_timeout {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.use_https {
            os.write_bool(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgHttpRequest {
        CMsgHttpRequest::new()
    }

    fn clear(&mut self) {
        self.request_method = ::std::option::Option::None;
        self.hostname = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.headers.clear();
        self.get_params.clear();
        self.post_params.clear();
        self.body = ::std::option::Option::None;
        self.absolute_timeout = ::std::option::Option::None;
        self.use_https = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgHttpRequest {
        static instance: CMsgHttpRequest = CMsgHttpRequest {
            request_method: ::std::option::Option::None,
            hostname: ::std::option::Option::None,
            url: ::std::option::Option::None,
            headers: ::std::vec::Vec::new(),
            get_params: ::std::vec::Vec::new(),
            post_params: ::std::vec::Vec::new(),
            body: ::std::option::Option::None,
            absolute_timeout: ::std::option::Option::None,
            use_https: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgHttpRequest`
pub mod cmsg_http_request {
    // @@protoc_insertion_point(message:CMsgHttpRequest.RequestHeader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestHeader {
        // message fields
        // @@protoc_insertion_point(field:CMsgHttpRequest.RequestHeader.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgHttpRequest.RequestHeader.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgHttpRequest.RequestHeader.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestHeader {
        fn default() -> &'a RequestHeader {
            <RequestHeader as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl RequestHeader {
        pub fn new() -> RequestHeader {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for RequestHeader {
        const NAME: &'static str = "RequestHeader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestHeader {
            RequestHeader::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestHeader {
            static instance: RequestHeader = RequestHeader {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgHttpRequest.QueryParam)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct QueryParam {
        // message fields
        // @@protoc_insertion_point(field:CMsgHttpRequest.QueryParam.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgHttpRequest.QueryParam.value)
        pub value: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgHttpRequest.QueryParam.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a QueryParam {
        fn default() -> &'a QueryParam {
            <QueryParam as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl QueryParam {
        pub fn new() -> QueryParam {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes value = 2;

        pub fn value(&self) -> &[u8] {
            match self.value.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
            self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for QueryParam {
        const NAME: &'static str = "QueryParam";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> QueryParam {
            QueryParam::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static QueryParam {
            static instance: QueryParam = QueryParam {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgWebAPIRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWebAPIRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgWebAPIRequest.interface_name)
    pub interface_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgWebAPIRequest.method_name)
    pub method_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgWebAPIRequest.version)
    pub version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWebAPIRequest.api_key)
    pub api_key: ::steam_vent_proto_common::protobuf::MessageField<CMsgWebAPIKey>,
    // @@protoc_insertion_point(field:CMsgWebAPIRequest.request)
    pub request: ::steam_vent_proto_common::protobuf::MessageField<CMsgHttpRequest>,
    // @@protoc_insertion_point(field:CMsgWebAPIRequest.routing_app_id)
    pub routing_app_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWebAPIRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWebAPIRequest {
    fn default() -> &'a CMsgWebAPIRequest {
        <CMsgWebAPIRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWebAPIRequest {
    pub fn new() -> CMsgWebAPIRequest {
        ::std::default::Default::default()
    }

    // optional string interface_name = 2;

    pub fn interface_name(&self) -> &str {
        match self.interface_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_interface_name(&mut self) {
        self.interface_name = ::std::option::Option::None;
    }

    pub fn has_interface_name(&self) -> bool {
        self.interface_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interface_name(&mut self, v: ::std::string::String) {
        self.interface_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface_name(&mut self) -> &mut ::std::string::String {
        if self.interface_name.is_none() {
            self.interface_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.interface_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_interface_name(&mut self) -> ::std::string::String {
        self.interface_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string method_name = 3;

    pub fn method_name(&self) -> &str {
        match self.method_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_method_name(&mut self) {
        self.method_name = ::std::option::Option::None;
    }

    pub fn has_method_name(&self) -> bool {
        self.method_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::string::String) {
        self.method_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
        if self.method_name.is_none() {
            self.method_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.method_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::string::String {
        self.method_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 version = 4;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 routing_app_id = 7;

    pub fn routing_app_id(&self) -> u32 {
        self.routing_app_id.unwrap_or(0)
    }

    pub fn clear_routing_app_id(&mut self) {
        self.routing_app_id = ::std::option::Option::None;
    }

    pub fn has_routing_app_id(&self) -> bool {
        self.routing_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_app_id(&mut self, v: u32) {
        self.routing_app_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWebAPIRequest {
    const NAME: &'static str = "CMsgWebAPIRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.interface_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.method_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.api_key)?;
                },
                50 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                56 => {
                    self.routing_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.interface_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.method_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.version {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.api_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.routing_app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.interface_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.method_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.version {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.api_key.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.request.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.routing_app_id {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWebAPIRequest {
        CMsgWebAPIRequest::new()
    }

    fn clear(&mut self) {
        self.interface_name = ::std::option::Option::None;
        self.method_name = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.api_key.clear();
        self.request.clear();
        self.routing_app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWebAPIRequest {
        static instance: CMsgWebAPIRequest = CMsgWebAPIRequest {
            interface_name: ::std::option::Option::None,
            method_name: ::std::option::Option::None,
            version: ::std::option::Option::None,
            api_key: ::steam_vent_proto_common::protobuf::MessageField::none(),
            request: ::steam_vent_proto_common::protobuf::MessageField::none(),
            routing_app_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgHttpResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgHttpResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgHttpResponse.status_code)
    pub status_code: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgHttpResponse.headers)
    pub headers: ::std::vec::Vec<cmsg_http_response::ResponseHeader>,
    // @@protoc_insertion_point(field:CMsgHttpResponse.body)
    pub body: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgHttpResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgHttpResponse {
    fn default() -> &'a CMsgHttpResponse {
        <CMsgHttpResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgHttpResponse {
    pub fn new() -> CMsgHttpResponse {
        ::std::default::Default::default()
    }

    // optional uint32 status_code = 1;

    pub fn status_code(&self) -> u32 {
        self.status_code.unwrap_or(0)
    }

    pub fn clear_status_code(&mut self) {
        self.status_code = ::std::option::Option::None;
    }

    pub fn has_status_code(&self) -> bool {
        self.status_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: u32) {
        self.status_code = ::std::option::Option::Some(v);
    }

    // optional bytes body = 3;

    pub fn body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgHttpResponse {
    const NAME: &'static str = "CMsgHttpResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.headers.push(is.read_message()?);
                },
                26 => {
                    self.body = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.status_code {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.body.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.status_code {
            os.write_uint32(1, v)?;
        }
        for v in &self.headers {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.body.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgHttpResponse {
        CMsgHttpResponse::new()
    }

    fn clear(&mut self) {
        self.status_code = ::std::option::Option::None;
        self.headers.clear();
        self.body = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgHttpResponse {
        static instance: CMsgHttpResponse = CMsgHttpResponse {
            status_code: ::std::option::Option::None,
            headers: ::std::vec::Vec::new(),
            body: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgHttpResponse`
pub mod cmsg_http_response {
    // @@protoc_insertion_point(message:CMsgHttpResponse.ResponseHeader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ResponseHeader {
        // message fields
        // @@protoc_insertion_point(field:CMsgHttpResponse.ResponseHeader.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgHttpResponse.ResponseHeader.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgHttpResponse.ResponseHeader.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ResponseHeader {
        fn default() -> &'a ResponseHeader {
            <ResponseHeader as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ResponseHeader {
        pub fn new() -> ResponseHeader {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ResponseHeader {
        const NAME: &'static str = "ResponseHeader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ResponseHeader {
            ResponseHeader::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ResponseHeader {
            static instance: ResponseHeader = ResponseHeader {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgAMFindAccounts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMFindAccounts {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMFindAccounts.search_type)
    pub search_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMFindAccounts.search_string)
    pub search_string: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMFindAccounts.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMFindAccounts {
    fn default() -> &'a CMsgAMFindAccounts {
        <CMsgAMFindAccounts as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMFindAccounts {
    pub fn new() -> CMsgAMFindAccounts {
        ::std::default::Default::default()
    }

    // optional uint32 search_type = 1;

    pub fn search_type(&self) -> u32 {
        self.search_type.unwrap_or(0)
    }

    pub fn clear_search_type(&mut self) {
        self.search_type = ::std::option::Option::None;
    }

    pub fn has_search_type(&self) -> bool {
        self.search_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_type(&mut self, v: u32) {
        self.search_type = ::std::option::Option::Some(v);
    }

    // optional string search_string = 2;

    pub fn search_string(&self) -> &str {
        match self.search_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_search_string(&mut self) {
        self.search_string = ::std::option::Option::None;
    }

    pub fn has_search_string(&self) -> bool {
        self.search_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_string(&mut self, v: ::std::string::String) {
        self.search_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search_string(&mut self) -> &mut ::std::string::String {
        if self.search_string.is_none() {
            self.search_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.search_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_search_string(&mut self) -> ::std::string::String {
        self.search_string.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMFindAccounts {
    const NAME: &'static str = "CMsgAMFindAccounts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.search_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.search_string = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.search_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.search_string.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.search_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.search_string.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMFindAccounts {
        CMsgAMFindAccounts::new()
    }

    fn clear(&mut self) {
        self.search_type = ::std::option::Option::None;
        self.search_string = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMFindAccounts {
        static instance: CMsgAMFindAccounts = CMsgAMFindAccounts {
            search_type: ::std::option::Option::None,
            search_string: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMFindAccountsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMFindAccountsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMFindAccountsResponse.steam_id)
    pub steam_id: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMFindAccountsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMFindAccountsResponse {
    fn default() -> &'a CMsgAMFindAccountsResponse {
        <CMsgAMFindAccountsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMFindAccountsResponse {
    pub fn new() -> CMsgAMFindAccountsResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMFindAccountsResponse {
    const NAME: &'static str = "CMsgAMFindAccountsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steam_id)?;
                },
                9 => {
                    self.steam_id.push(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.steam_id.len() as u64;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.steam_id {
            os.write_fixed64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMFindAccountsResponse {
        CMsgAMFindAccountsResponse::new()
    }

    fn clear(&mut self) {
        self.steam_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMFindAccountsResponse {
        static instance: CMsgAMFindAccountsResponse = CMsgAMFindAccountsResponse {
            steam_id: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgNotifyWatchdog)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgNotifyWatchdog {
    // message fields
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.source)
    pub source: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.alert_type)
    pub alert_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.critical)
    pub critical: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.time)
    pub time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.text)
    pub text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgNotifyWatchdog.recipient)
    pub recipient: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgNotifyWatchdog.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgNotifyWatchdog {
    fn default() -> &'a CMsgNotifyWatchdog {
        <CMsgNotifyWatchdog as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgNotifyWatchdog {
    pub fn new() -> CMsgNotifyWatchdog {
        ::std::default::Default::default()
    }

    // optional uint32 source = 1;

    pub fn source(&self) -> u32 {
        self.source.unwrap_or(0)
    }

    pub fn clear_source(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: u32) {
        self.source = ::std::option::Option::Some(v);
    }

    // optional uint32 alert_type = 2;

    pub fn alert_type(&self) -> u32 {
        self.alert_type.unwrap_or(0)
    }

    pub fn clear_alert_type(&mut self) {
        self.alert_type = ::std::option::Option::None;
    }

    pub fn has_alert_type(&self) -> bool {
        self.alert_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert_type(&mut self, v: u32) {
        self.alert_type = ::std::option::Option::Some(v);
    }

    // optional bool critical = 4;

    pub fn critical(&self) -> bool {
        self.critical.unwrap_or(false)
    }

    pub fn clear_critical(&mut self) {
        self.critical = ::std::option::Option::None;
    }

    pub fn has_critical(&self) -> bool {
        self.critical.is_some()
    }

    // Param is passed by value, moved
    pub fn set_critical(&mut self, v: bool) {
        self.critical = ::std::option::Option::Some(v);
    }

    // optional uint32 time = 5;

    pub fn time(&self) -> u32 {
        self.time.unwrap_or(0)
    }

    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 6;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string text = 7;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string recipient = 12;

    pub fn recipient(&self) -> &str {
        match self.recipient.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recipient(&mut self) {
        self.recipient = ::std::option::Option::None;
    }

    pub fn has_recipient(&self) -> bool {
        self.recipient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        if self.recipient.is_none() {
            self.recipient = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recipient.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        self.recipient.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgNotifyWatchdog {
    const NAME: &'static str = "CMsgNotifyWatchdog";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.source = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.alert_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.critical = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.time = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.recipient = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.alert_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.critical {
            my_size += 1 + 1;
        }
        if let Some(v) = self.time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.text.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.recipient.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(12, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.source {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.alert_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.critical {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.time {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.text.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.recipient.as_ref() {
            os.write_string(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgNotifyWatchdog {
        CMsgNotifyWatchdog::new()
    }

    fn clear(&mut self) {
        self.source = ::std::option::Option::None;
        self.alert_type = ::std::option::Option::None;
        self.critical = ::std::option::Option::None;
        self.time = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.text = ::std::option::Option::None;
        self.recipient = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgNotifyWatchdog {
        static instance: CMsgNotifyWatchdog = CMsgNotifyWatchdog {
            source: ::std::option::Option::None,
            alert_type: ::std::option::Option::None,
            critical: ::std::option::Option::None,
            time: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            text: ::std::option::Option::None,
            recipient: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMGetLicenses)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetLicenses {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMGetLicenses.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMGetLicenses.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetLicenses {
    fn default() -> &'a CMsgAMGetLicenses {
        <CMsgAMGetLicenses as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetLicenses {
    pub fn new() -> CMsgAMGetLicenses {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMGetLicenses {
    const NAME: &'static str = "CMsgAMGetLicenses";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetLicenses {
        CMsgAMGetLicenses::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetLicenses {
        static instance: CMsgAMGetLicenses = CMsgAMGetLicenses {
            steamid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgPackageLicense)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPackageLicense {
    // message fields
    // @@protoc_insertion_point(field:CMsgPackageLicense.package_id)
    pub package_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPackageLicense.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPackageLicense.owner_id)
    pub owner_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPackageLicense.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPackageLicense {
    fn default() -> &'a CMsgPackageLicense {
        <CMsgPackageLicense as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPackageLicense {
    pub fn new() -> CMsgPackageLicense {
        ::std::default::Default::default()
    }

    // optional uint32 package_id = 1;

    pub fn package_id(&self) -> u32 {
        self.package_id.unwrap_or(0)
    }

    pub fn clear_package_id(&mut self) {
        self.package_id = ::std::option::Option::None;
    }

    pub fn has_package_id(&self) -> bool {
        self.package_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package_id(&mut self, v: u32) {
        self.package_id = ::std::option::Option::Some(v);
    }

    // optional uint32 time_created = 2;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 owner_id = 3;

    pub fn owner_id(&self) -> u32 {
        self.owner_id.unwrap_or(0)
    }

    pub fn clear_owner_id(&mut self) {
        self.owner_id = ::std::option::Option::None;
    }

    pub fn has_owner_id(&self) -> bool {
        self.owner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: u32) {
        self.owner_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPackageLicense {
    const NAME: &'static str = "CMsgPackageLicense";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.package_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.owner_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.package_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.time_created {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.owner_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.package_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.owner_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPackageLicense {
        CMsgPackageLicense::new()
    }

    fn clear(&mut self) {
        self.package_id = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.owner_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPackageLicense {
        static instance: CMsgPackageLicense = CMsgPackageLicense {
            package_id: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            owner_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMGetLicensesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetLicensesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMGetLicensesResponse.license)
    pub license: ::std::vec::Vec<CMsgPackageLicense>,
    // @@protoc_insertion_point(field:CMsgAMGetLicensesResponse.result)
    pub result: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMGetLicensesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetLicensesResponse {
    fn default() -> &'a CMsgAMGetLicensesResponse {
        <CMsgAMGetLicensesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetLicensesResponse {
    pub fn new() -> CMsgAMGetLicensesResponse {
        ::std::default::Default::default()
    }

    // optional uint32 result = 2;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMGetLicensesResponse {
    const NAME: &'static str = "CMsgAMGetLicensesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.license.push(is.read_message()?);
                },
                16 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.license {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.license {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.result {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetLicensesResponse {
        CMsgAMGetLicensesResponse::new()
    }

    fn clear(&mut self) {
        self.license.clear();
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetLicensesResponse {
        static instance: CMsgAMGetLicensesResponse = CMsgAMGetLicensesResponse {
            license: ::std::vec::Vec::new(),
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMGetUserGameStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetUserGameStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStats.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStats.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStats.stats)
    pub stats: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMGetUserGameStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetUserGameStats {
    fn default() -> &'a CMsgAMGetUserGameStats {
        <CMsgAMGetUserGameStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetUserGameStats {
    pub fn new() -> CMsgAMGetUserGameStats {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_id = 2;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMGetUserGameStats {
    const NAME: &'static str = "CMsgAMGetUserGameStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.stats)?;
                },
                24 => {
                    self.stats.push(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        for value in &self.stats {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.game_id {
            os.write_fixed64(2, v)?;
        }
        for v in &self.stats {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetUserGameStats {
        CMsgAMGetUserGameStats::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.game_id = ::std::option::Option::None;
        self.stats.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetUserGameStats {
        static instance: CMsgAMGetUserGameStats = CMsgAMGetUserGameStats {
            steam_id: ::std::option::Option::None,
            game_id: ::std::option::Option::None,
            stats: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMGetUserGameStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetUserGameStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.stats)
    pub stats: ::std::vec::Vec<cmsg_amget_user_game_stats_response::Stats>,
    // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.achievement_blocks)
    pub achievement_blocks: ::std::vec::Vec<cmsg_amget_user_game_stats_response::Achievement_Blocks>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMGetUserGameStatsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetUserGameStatsResponse {
    fn default() -> &'a CMsgAMGetUserGameStatsResponse {
        <CMsgAMGetUserGameStatsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetUserGameStatsResponse {
    pub fn new() -> CMsgAMGetUserGameStatsResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_id = 2;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional int32 eresult = 3;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMGetUserGameStatsResponse {
    const NAME: &'static str = "CMsgAMGetUserGameStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.stats.push(is.read_message()?);
                },
                42 => {
                    self.achievement_blocks.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        for value in &self.stats {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.achievement_blocks {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.game_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(3, v)?;
        }
        for v in &self.stats {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.achievement_blocks {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetUserGameStatsResponse {
        CMsgAMGetUserGameStatsResponse::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.game_id = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.stats.clear();
        self.achievement_blocks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetUserGameStatsResponse {
        static instance: CMsgAMGetUserGameStatsResponse = CMsgAMGetUserGameStatsResponse {
            steam_id: ::std::option::Option::None,
            game_id: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            stats: ::std::vec::Vec::new(),
            achievement_blocks: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgAMGetUserGameStatsResponse`
pub mod cmsg_amget_user_game_stats_response {
    // @@protoc_insertion_point(message:CMsgAMGetUserGameStatsResponse.Stats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stats {
        // message fields
        // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.Stats.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.Stats.stat_value)
        pub stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgAMGetUserGameStatsResponse.Stats.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stats {
        fn default() -> &'a Stats {
            <Stats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Stats {
        pub fn new() -> Stats {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 stat_value = 2;

        pub fn stat_value(&self) -> u32 {
            self.stat_value.unwrap_or(0)
        }

        pub fn clear_stat_value(&mut self) {
            self.stat_value = ::std::option::Option::None;
        }

        pub fn has_stat_value(&self) -> bool {
            self.stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_value(&mut self, v: u32) {
            self.stat_value = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Stats {
        const NAME: &'static str = "Stats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.stat_value {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stats {
            Stats::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stats {
            static instance: Stats = Stats {
                stat_id: ::std::option::Option::None,
                stat_value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Achievement_Blocks {
        // message fields
        // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_id)
        pub achievement_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_bit_id)
        pub achievement_bit_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.unlock_time)
        pub unlock_time: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Achievement_Blocks {
        fn default() -> &'a Achievement_Blocks {
            <Achievement_Blocks as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Achievement_Blocks {
        pub fn new() -> Achievement_Blocks {
            ::std::default::Default::default()
        }

        // optional uint32 achievement_id = 1;

        pub fn achievement_id(&self) -> u32 {
            self.achievement_id.unwrap_or(0)
        }

        pub fn clear_achievement_id(&mut self) {
            self.achievement_id = ::std::option::Option::None;
        }

        pub fn has_achievement_id(&self) -> bool {
            self.achievement_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_achievement_id(&mut self, v: u32) {
            self.achievement_id = ::std::option::Option::Some(v);
        }

        // optional uint32 achievement_bit_id = 2;

        pub fn achievement_bit_id(&self) -> u32 {
            self.achievement_bit_id.unwrap_or(0)
        }

        pub fn clear_achievement_bit_id(&mut self) {
            self.achievement_bit_id = ::std::option::Option::None;
        }

        pub fn has_achievement_bit_id(&self) -> bool {
            self.achievement_bit_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_achievement_bit_id(&mut self, v: u32) {
            self.achievement_bit_id = ::std::option::Option::Some(v);
        }

        // optional fixed32 unlock_time = 3;

        pub fn unlock_time(&self) -> u32 {
            self.unlock_time.unwrap_or(0)
        }

        pub fn clear_unlock_time(&mut self) {
            self.unlock_time = ::std::option::Option::None;
        }

        pub fn has_unlock_time(&self) -> bool {
            self.unlock_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unlock_time(&mut self, v: u32) {
            self.unlock_time = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Achievement_Blocks {
        const NAME: &'static str = "Achievement_Blocks";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.achievement_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.achievement_bit_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    29 => {
                        self.unlock_time = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.achievement_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.achievement_bit_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.unlock_time {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.achievement_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.achievement_bit_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.unlock_time {
                os.write_fixed32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Achievement_Blocks {
            Achievement_Blocks::new()
        }

        fn clear(&mut self) {
            self.achievement_id = ::std::option::Option::None;
            self.achievement_bit_id = ::std::option::Option::None;
            self.unlock_time = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Achievement_Blocks {
            static instance: Achievement_Blocks = Achievement_Blocks {
                achievement_id: ::std::option::Option::None,
                achievement_bit_id: ::std::option::Option::None,
                unlock_time: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgGCGetCommandList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetCommandList {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetCommandList.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetCommandList.command_prefix)
    pub command_prefix: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetCommandList.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetCommandList {
    fn default() -> &'a CMsgGCGetCommandList {
        <CMsgGCGetCommandList as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetCommandList {
    pub fn new() -> CMsgGCGetCommandList {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string command_prefix = 2;

    pub fn command_prefix(&self) -> &str {
        match self.command_prefix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_command_prefix(&mut self) {
        self.command_prefix = ::std::option::Option::None;
    }

    pub fn has_command_prefix(&self) -> bool {
        self.command_prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_prefix(&mut self, v: ::std::string::String) {
        self.command_prefix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command_prefix(&mut self) -> &mut ::std::string::String {
        if self.command_prefix.is_none() {
            self.command_prefix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.command_prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_command_prefix(&mut self) -> ::std::string::String {
        self.command_prefix.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetCommandList {
    const NAME: &'static str = "CMsgGCGetCommandList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.command_prefix = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.command_prefix.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.command_prefix.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetCommandList {
        CMsgGCGetCommandList::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.command_prefix = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetCommandList {
        static instance: CMsgGCGetCommandList = CMsgGCGetCommandList {
            app_id: ::std::option::Option::None,
            command_prefix: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetCommandListResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetCommandListResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetCommandListResponse.command_name)
    pub command_name: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetCommandListResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetCommandListResponse {
    fn default() -> &'a CMsgGCGetCommandListResponse {
        <CMsgGCGetCommandListResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetCommandListResponse {
    pub fn new() -> CMsgGCGetCommandListResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetCommandListResponse {
    const NAME: &'static str = "CMsgGCGetCommandListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.command_name.push(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.command_name {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.command_name {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetCommandListResponse {
        CMsgGCGetCommandListResponse::new()
    }

    fn clear(&mut self) {
        self.command_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetCommandListResponse {
        static instance: CMsgGCGetCommandListResponse = CMsgGCGetCommandListResponse {
            command_name: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgMemCachedGet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedGet {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgMemCachedGet.keys)
    pub keys: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgMemCachedGet.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedGet {
    fn default() -> &'a CGCMsgMemCachedGet {
        <CGCMsgMemCachedGet as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedGet {
    pub fn new() -> CGCMsgMemCachedGet {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgMemCachedGet {
    const NAME: &'static str = "CGCMsgMemCachedGet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedGet {
        CGCMsgMemCachedGet::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedGet {
        static instance: CGCMsgMemCachedGet = CGCMsgMemCachedGet {
            keys: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgMemCachedGetResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedGetResponse {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgMemCachedGetResponse.values)
    pub values: ::std::vec::Vec<cgcmsg_mem_cached_get_response::ValueTag>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgMemCachedGetResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedGetResponse {
    fn default() -> &'a CGCMsgMemCachedGetResponse {
        <CGCMsgMemCachedGetResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedGetResponse {
    pub fn new() -> CGCMsgMemCachedGetResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgMemCachedGetResponse {
    const NAME: &'static str = "CGCMsgMemCachedGetResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.values {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedGetResponse {
        CGCMsgMemCachedGetResponse::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedGetResponse {
        static instance: CGCMsgMemCachedGetResponse = CGCMsgMemCachedGetResponse {
            values: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CGCMsgMemCachedGetResponse`
pub mod cgcmsg_mem_cached_get_response {
    // @@protoc_insertion_point(message:CGCMsgMemCachedGetResponse.ValueTag)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ValueTag {
        // message fields
        // @@protoc_insertion_point(field:CGCMsgMemCachedGetResponse.ValueTag.found)
        pub found: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CGCMsgMemCachedGetResponse.ValueTag.value)
        pub value: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CGCMsgMemCachedGetResponse.ValueTag.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ValueTag {
        fn default() -> &'a ValueTag {
            <ValueTag as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ValueTag {
        pub fn new() -> ValueTag {
            ::std::default::Default::default()
        }

        // optional bool found = 1;

        pub fn found(&self) -> bool {
            self.found.unwrap_or(false)
        }

        pub fn clear_found(&mut self) {
            self.found = ::std::option::Option::None;
        }

        pub fn has_found(&self) -> bool {
            self.found.is_some()
        }

        // Param is passed by value, moved
        pub fn set_found(&mut self, v: bool) {
            self.found = ::std::option::Option::Some(v);
        }

        // optional bytes value = 2;

        pub fn value(&self) -> &[u8] {
            match self.value.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
            self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ValueTag {
        const NAME: &'static str = "ValueTag";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.found = ::std::option::Option::Some(is.read_bool()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.found {
                my_size += 1 + 1;
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.found {
                os.write_bool(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ValueTag {
            ValueTag::new()
        }

        fn clear(&mut self) {
            self.found = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ValueTag {
            static instance: ValueTag = ValueTag {
                found: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CGCMsgMemCachedSet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedSet {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgMemCachedSet.keys)
    pub keys: ::std::vec::Vec<cgcmsg_mem_cached_set::KeyPair>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgMemCachedSet.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedSet {
    fn default() -> &'a CGCMsgMemCachedSet {
        <CGCMsgMemCachedSet as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedSet {
    pub fn new() -> CGCMsgMemCachedSet {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgMemCachedSet {
    const NAME: &'static str = "CGCMsgMemCachedSet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.keys {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedSet {
        CGCMsgMemCachedSet::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedSet {
        static instance: CGCMsgMemCachedSet = CGCMsgMemCachedSet {
            keys: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CGCMsgMemCachedSet`
pub mod cgcmsg_mem_cached_set {
    // @@protoc_insertion_point(message:CGCMsgMemCachedSet.KeyPair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct KeyPair {
        // message fields
        // @@protoc_insertion_point(field:CGCMsgMemCachedSet.KeyPair.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGCMsgMemCachedSet.KeyPair.value)
        pub value: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CGCMsgMemCachedSet.KeyPair.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a KeyPair {
        fn default() -> &'a KeyPair {
            <KeyPair as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl KeyPair {
        pub fn new() -> KeyPair {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes value = 2;

        pub fn value(&self) -> &[u8] {
            match self.value.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
            self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for KeyPair {
        const NAME: &'static str = "KeyPair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> KeyPair {
            KeyPair::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static KeyPair {
            static instance: KeyPair = KeyPair {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CGCMsgMemCachedDelete)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedDelete {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgMemCachedDelete.keys)
    pub keys: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgMemCachedDelete.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedDelete {
    fn default() -> &'a CGCMsgMemCachedDelete {
        <CGCMsgMemCachedDelete as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedDelete {
    pub fn new() -> CGCMsgMemCachedDelete {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgMemCachedDelete {
    const NAME: &'static str = "CGCMsgMemCachedDelete";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedDelete {
        CGCMsgMemCachedDelete::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedDelete {
        static instance: CGCMsgMemCachedDelete = CGCMsgMemCachedDelete {
            keys: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgMemCachedStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedStats {
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgMemCachedStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedStats {
    fn default() -> &'a CGCMsgMemCachedStats {
        <CGCMsgMemCachedStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedStats {
    pub fn new() -> CGCMsgMemCachedStats {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgMemCachedStats {
    const NAME: &'static str = "CGCMsgMemCachedStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedStats {
        CGCMsgMemCachedStats::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedStats {
        static instance: CGCMsgMemCachedStats = CGCMsgMemCachedStats {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgMemCachedStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.curr_connections)
    pub curr_connections: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.cmd_get)
    pub cmd_get: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.cmd_set)
    pub cmd_set: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.cmd_flush)
    pub cmd_flush: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.get_hits)
    pub get_hits: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.get_misses)
    pub get_misses: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.delete_hits)
    pub delete_hits: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.delete_misses)
    pub delete_misses: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.bytes_read)
    pub bytes_read: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.bytes_written)
    pub bytes_written: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.limit_maxbytes)
    pub limit_maxbytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.curr_items)
    pub curr_items: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.evictions)
    pub evictions: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCMsgMemCachedStatsResponse.bytes)
    pub bytes: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgMemCachedStatsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedStatsResponse {
    fn default() -> &'a CGCMsgMemCachedStatsResponse {
        <CGCMsgMemCachedStatsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedStatsResponse {
    pub fn new() -> CGCMsgMemCachedStatsResponse {
        ::std::default::Default::default()
    }

    // optional uint64 curr_connections = 1;

    pub fn curr_connections(&self) -> u64 {
        self.curr_connections.unwrap_or(0)
    }

    pub fn clear_curr_connections(&mut self) {
        self.curr_connections = ::std::option::Option::None;
    }

    pub fn has_curr_connections(&self) -> bool {
        self.curr_connections.is_some()
    }

    // Param is passed by value, moved
    pub fn set_curr_connections(&mut self, v: u64) {
        self.curr_connections = ::std::option::Option::Some(v);
    }

    // optional uint64 cmd_get = 2;

    pub fn cmd_get(&self) -> u64 {
        self.cmd_get.unwrap_or(0)
    }

    pub fn clear_cmd_get(&mut self) {
        self.cmd_get = ::std::option::Option::None;
    }

    pub fn has_cmd_get(&self) -> bool {
        self.cmd_get.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_get(&mut self, v: u64) {
        self.cmd_get = ::std::option::Option::Some(v);
    }

    // optional uint64 cmd_set = 3;

    pub fn cmd_set(&self) -> u64 {
        self.cmd_set.unwrap_or(0)
    }

    pub fn clear_cmd_set(&mut self) {
        self.cmd_set = ::std::option::Option::None;
    }

    pub fn has_cmd_set(&self) -> bool {
        self.cmd_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_set(&mut self, v: u64) {
        self.cmd_set = ::std::option::Option::Some(v);
    }

    // optional uint64 cmd_flush = 4;

    pub fn cmd_flush(&self) -> u64 {
        self.cmd_flush.unwrap_or(0)
    }

    pub fn clear_cmd_flush(&mut self) {
        self.cmd_flush = ::std::option::Option::None;
    }

    pub fn has_cmd_flush(&self) -> bool {
        self.cmd_flush.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_flush(&mut self, v: u64) {
        self.cmd_flush = ::std::option::Option::Some(v);
    }

    // optional uint64 get_hits = 5;

    pub fn get_hits(&self) -> u64 {
        self.get_hits.unwrap_or(0)
    }

    pub fn clear_get_hits(&mut self) {
        self.get_hits = ::std::option::Option::None;
    }

    pub fn has_get_hits(&self) -> bool {
        self.get_hits.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_hits(&mut self, v: u64) {
        self.get_hits = ::std::option::Option::Some(v);
    }

    // optional uint64 get_misses = 6;

    pub fn get_misses(&self) -> u64 {
        self.get_misses.unwrap_or(0)
    }

    pub fn clear_get_misses(&mut self) {
        self.get_misses = ::std::option::Option::None;
    }

    pub fn has_get_misses(&self) -> bool {
        self.get_misses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_misses(&mut self, v: u64) {
        self.get_misses = ::std::option::Option::Some(v);
    }

    // optional uint64 delete_hits = 7;

    pub fn delete_hits(&self) -> u64 {
        self.delete_hits.unwrap_or(0)
    }

    pub fn clear_delete_hits(&mut self) {
        self.delete_hits = ::std::option::Option::None;
    }

    pub fn has_delete_hits(&self) -> bool {
        self.delete_hits.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_hits(&mut self, v: u64) {
        self.delete_hits = ::std::option::Option::Some(v);
    }

    // optional uint64 delete_misses = 8;

    pub fn delete_misses(&self) -> u64 {
        self.delete_misses.unwrap_or(0)
    }

    pub fn clear_delete_misses(&mut self) {
        self.delete_misses = ::std::option::Option::None;
    }

    pub fn has_delete_misses(&self) -> bool {
        self.delete_misses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_misses(&mut self, v: u64) {
        self.delete_misses = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_read = 9;

    pub fn bytes_read(&self) -> u64 {
        self.bytes_read.unwrap_or(0)
    }

    pub fn clear_bytes_read(&mut self) {
        self.bytes_read = ::std::option::Option::None;
    }

    pub fn has_bytes_read(&self) -> bool {
        self.bytes_read.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_read(&mut self, v: u64) {
        self.bytes_read = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_written = 10;

    pub fn bytes_written(&self) -> u64 {
        self.bytes_written.unwrap_or(0)
    }

    pub fn clear_bytes_written(&mut self) {
        self.bytes_written = ::std::option::Option::None;
    }

    pub fn has_bytes_written(&self) -> bool {
        self.bytes_written.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_written(&mut self, v: u64) {
        self.bytes_written = ::std::option::Option::Some(v);
    }

    // optional uint64 limit_maxbytes = 11;

    pub fn limit_maxbytes(&self) -> u64 {
        self.limit_maxbytes.unwrap_or(0)
    }

    pub fn clear_limit_maxbytes(&mut self) {
        self.limit_maxbytes = ::std::option::Option::None;
    }

    pub fn has_limit_maxbytes(&self) -> bool {
        self.limit_maxbytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit_maxbytes(&mut self, v: u64) {
        self.limit_maxbytes = ::std::option::Option::Some(v);
    }

    // optional uint64 curr_items = 12;

    pub fn curr_items(&self) -> u64 {
        self.curr_items.unwrap_or(0)
    }

    pub fn clear_curr_items(&mut self) {
        self.curr_items = ::std::option::Option::None;
    }

    pub fn has_curr_items(&self) -> bool {
        self.curr_items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_curr_items(&mut self, v: u64) {
        self.curr_items = ::std::option::Option::Some(v);
    }

    // optional uint64 evictions = 13;

    pub fn evictions(&self) -> u64 {
        self.evictions.unwrap_or(0)
    }

    pub fn clear_evictions(&mut self) {
        self.evictions = ::std::option::Option::None;
    }

    pub fn has_evictions(&self) -> bool {
        self.evictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_evictions(&mut self, v: u64) {
        self.evictions = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes = 14;

    pub fn bytes(&self) -> u64 {
        self.bytes.unwrap_or(0)
    }

    pub fn clear_bytes(&mut self) {
        self.bytes = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        self.bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: u64) {
        self.bytes = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgMemCachedStatsResponse {
    const NAME: &'static str = "CGCMsgMemCachedStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.curr_connections = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.cmd_get = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.cmd_set = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.cmd_flush = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.get_hits = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.get_misses = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.delete_hits = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.delete_misses = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.bytes_read = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.bytes_written = ::std::option::Option::Some(is.read_uint64()?);
                },
                88 => {
                    self.limit_maxbytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                96 => {
                    self.curr_items = ::std::option::Option::Some(is.read_uint64()?);
                },
                104 => {
                    self.evictions = ::std::option::Option::Some(is.read_uint64()?);
                },
                112 => {
                    self.bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.curr_connections {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.cmd_get {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.cmd_set {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.cmd_flush {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.get_hits {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.get_misses {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.delete_hits {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.delete_misses {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.bytes_read {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.bytes_written {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(10, v);
        }
        if let Some(v) = self.limit_maxbytes {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(11, v);
        }
        if let Some(v) = self.curr_items {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.evictions {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(13, v);
        }
        if let Some(v) = self.bytes {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(14, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.curr_connections {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.cmd_get {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.cmd_set {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.cmd_flush {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.get_hits {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.get_misses {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.delete_hits {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.delete_misses {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.bytes_read {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.bytes_written {
            os.write_uint64(10, v)?;
        }
        if let Some(v) = self.limit_maxbytes {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.curr_items {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.evictions {
            os.write_uint64(13, v)?;
        }
        if let Some(v) = self.bytes {
            os.write_uint64(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedStatsResponse {
        CGCMsgMemCachedStatsResponse::new()
    }

    fn clear(&mut self) {
        self.curr_connections = ::std::option::Option::None;
        self.cmd_get = ::std::option::Option::None;
        self.cmd_set = ::std::option::Option::None;
        self.cmd_flush = ::std::option::Option::None;
        self.get_hits = ::std::option::Option::None;
        self.get_misses = ::std::option::Option::None;
        self.delete_hits = ::std::option::Option::None;
        self.delete_misses = ::std::option::Option::None;
        self.bytes_read = ::std::option::Option::None;
        self.bytes_written = ::std::option::Option::None;
        self.limit_maxbytes = ::std::option::Option::None;
        self.curr_items = ::std::option::Option::None;
        self.evictions = ::std::option::Option::None;
        self.bytes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedStatsResponse {
        static instance: CGCMsgMemCachedStatsResponse = CGCMsgMemCachedStatsResponse {
            curr_connections: ::std::option::Option::None,
            cmd_get: ::std::option::Option::None,
            cmd_set: ::std::option::Option::None,
            cmd_flush: ::std::option::Option::None,
            get_hits: ::std::option::Option::None,
            get_misses: ::std::option::Option::None,
            delete_hits: ::std::option::Option::None,
            delete_misses: ::std::option::Option::None,
            bytes_read: ::std::option::Option::None,
            bytes_written: ::std::option::Option::None,
            limit_maxbytes: ::std::option::Option::None,
            curr_items: ::std::option::Option::None,
            evictions: ::std::option::Option::None,
            bytes: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgSQLStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgSQLStats {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgSQLStats.schema_catalog)
    pub schema_catalog: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgSQLStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgSQLStats {
    fn default() -> &'a CGCMsgSQLStats {
        <CGCMsgSQLStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgSQLStats {
    pub fn new() -> CGCMsgSQLStats {
        ::std::default::Default::default()
    }

    // optional uint32 schema_catalog = 1;

    pub fn schema_catalog(&self) -> u32 {
        self.schema_catalog.unwrap_or(0)
    }

    pub fn clear_schema_catalog(&mut self) {
        self.schema_catalog = ::std::option::Option::None;
    }

    pub fn has_schema_catalog(&self) -> bool {
        self.schema_catalog.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_catalog(&mut self, v: u32) {
        self.schema_catalog = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgSQLStats {
    const NAME: &'static str = "CGCMsgSQLStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.schema_catalog = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema_catalog {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.schema_catalog {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgSQLStats {
        CGCMsgSQLStats::new()
    }

    fn clear(&mut self) {
        self.schema_catalog = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgSQLStats {
        static instance: CGCMsgSQLStats = CGCMsgSQLStats {
            schema_catalog: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgSQLStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgSQLStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.threads)
    pub threads: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.threads_connected)
    pub threads_connected: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.threads_active)
    pub threads_active: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.operations_submitted)
    pub operations_submitted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.prepared_statements_executed)
    pub prepared_statements_executed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.non_prepared_statements_executed)
    pub non_prepared_statements_executed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.deadlock_retries)
    pub deadlock_retries: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.operations_timed_out_in_queue)
    pub operations_timed_out_in_queue: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSQLStatsResponse.errors)
    pub errors: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgSQLStatsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgSQLStatsResponse {
    fn default() -> &'a CGCMsgSQLStatsResponse {
        <CGCMsgSQLStatsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgSQLStatsResponse {
    pub fn new() -> CGCMsgSQLStatsResponse {
        ::std::default::Default::default()
    }

    // optional uint32 threads = 1;

    pub fn threads(&self) -> u32 {
        self.threads.unwrap_or(0)
    }

    pub fn clear_threads(&mut self) {
        self.threads = ::std::option::Option::None;
    }

    pub fn has_threads(&self) -> bool {
        self.threads.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threads(&mut self, v: u32) {
        self.threads = ::std::option::Option::Some(v);
    }

    // optional uint32 threads_connected = 2;

    pub fn threads_connected(&self) -> u32 {
        self.threads_connected.unwrap_or(0)
    }

    pub fn clear_threads_connected(&mut self) {
        self.threads_connected = ::std::option::Option::None;
    }

    pub fn has_threads_connected(&self) -> bool {
        self.threads_connected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threads_connected(&mut self, v: u32) {
        self.threads_connected = ::std::option::Option::Some(v);
    }

    // optional uint32 threads_active = 3;

    pub fn threads_active(&self) -> u32 {
        self.threads_active.unwrap_or(0)
    }

    pub fn clear_threads_active(&mut self) {
        self.threads_active = ::std::option::Option::None;
    }

    pub fn has_threads_active(&self) -> bool {
        self.threads_active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threads_active(&mut self, v: u32) {
        self.threads_active = ::std::option::Option::Some(v);
    }

    // optional uint32 operations_submitted = 4;

    pub fn operations_submitted(&self) -> u32 {
        self.operations_submitted.unwrap_or(0)
    }

    pub fn clear_operations_submitted(&mut self) {
        self.operations_submitted = ::std::option::Option::None;
    }

    pub fn has_operations_submitted(&self) -> bool {
        self.operations_submitted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operations_submitted(&mut self, v: u32) {
        self.operations_submitted = ::std::option::Option::Some(v);
    }

    // optional uint32 prepared_statements_executed = 5;

    pub fn prepared_statements_executed(&self) -> u32 {
        self.prepared_statements_executed.unwrap_or(0)
    }

    pub fn clear_prepared_statements_executed(&mut self) {
        self.prepared_statements_executed = ::std::option::Option::None;
    }

    pub fn has_prepared_statements_executed(&self) -> bool {
        self.prepared_statements_executed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prepared_statements_executed(&mut self, v: u32) {
        self.prepared_statements_executed = ::std::option::Option::Some(v);
    }

    // optional uint32 non_prepared_statements_executed = 6;

    pub fn non_prepared_statements_executed(&self) -> u32 {
        self.non_prepared_statements_executed.unwrap_or(0)
    }

    pub fn clear_non_prepared_statements_executed(&mut self) {
        self.non_prepared_statements_executed = ::std::option::Option::None;
    }

    pub fn has_non_prepared_statements_executed(&self) -> bool {
        self.non_prepared_statements_executed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_non_prepared_statements_executed(&mut self, v: u32) {
        self.non_prepared_statements_executed = ::std::option::Option::Some(v);
    }

    // optional uint32 deadlock_retries = 7;

    pub fn deadlock_retries(&self) -> u32 {
        self.deadlock_retries.unwrap_or(0)
    }

    pub fn clear_deadlock_retries(&mut self) {
        self.deadlock_retries = ::std::option::Option::None;
    }

    pub fn has_deadlock_retries(&self) -> bool {
        self.deadlock_retries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deadlock_retries(&mut self, v: u32) {
        self.deadlock_retries = ::std::option::Option::Some(v);
    }

    // optional uint32 operations_timed_out_in_queue = 8;

    pub fn operations_timed_out_in_queue(&self) -> u32 {
        self.operations_timed_out_in_queue.unwrap_or(0)
    }

    pub fn clear_operations_timed_out_in_queue(&mut self) {
        self.operations_timed_out_in_queue = ::std::option::Option::None;
    }

    pub fn has_operations_timed_out_in_queue(&self) -> bool {
        self.operations_timed_out_in_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operations_timed_out_in_queue(&mut self, v: u32) {
        self.operations_timed_out_in_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 errors = 9;

    pub fn errors(&self) -> u32 {
        self.errors.unwrap_or(0)
    }

    pub fn clear_errors(&mut self) {
        self.errors = ::std::option::Option::None;
    }

    pub fn has_errors(&self) -> bool {
        self.errors.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errors(&mut self, v: u32) {
        self.errors = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgSQLStatsResponse {
    const NAME: &'static str = "CGCMsgSQLStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.threads = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.threads_connected = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.threads_active = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.operations_submitted = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.prepared_statements_executed = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.non_prepared_statements_executed = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.deadlock_retries = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.operations_timed_out_in_queue = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.errors = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.threads {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.threads_connected {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.threads_active {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.operations_submitted {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.prepared_statements_executed {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.non_prepared_statements_executed {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.deadlock_retries {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.operations_timed_out_in_queue {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.errors {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.threads {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.threads_connected {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.threads_active {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.operations_submitted {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.prepared_statements_executed {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.non_prepared_statements_executed {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.deadlock_retries {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.operations_timed_out_in_queue {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.errors {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgSQLStatsResponse {
        CGCMsgSQLStatsResponse::new()
    }

    fn clear(&mut self) {
        self.threads = ::std::option::Option::None;
        self.threads_connected = ::std::option::Option::None;
        self.threads_active = ::std::option::Option::None;
        self.operations_submitted = ::std::option::Option::None;
        self.prepared_statements_executed = ::std::option::Option::None;
        self.non_prepared_statements_executed = ::std::option::Option::None;
        self.deadlock_retries = ::std::option::Option::None;
        self.operations_timed_out_in_queue = ::std::option::Option::None;
        self.errors = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgSQLStatsResponse {
        static instance: CGCMsgSQLStatsResponse = CGCMsgSQLStatsResponse {
            threads: ::std::option::Option::None,
            threads_connected: ::std::option::Option::None,
            threads_active: ::std::option::Option::None,
            operations_submitted: ::std::option::Option::None,
            prepared_statements_executed: ::std::option::Option::None,
            non_prepared_statements_executed: ::std::option::Option::None,
            deadlock_retries: ::std::option::Option::None,
            operations_timed_out_in_queue: ::std::option::Option::None,
            errors: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMAddFreeLicense)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMAddFreeLicense {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicense.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicense.ip_public)
    pub ip_public: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicense.packageid)
    pub packageid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicense.store_country_code)
    pub store_country_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMAddFreeLicense.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMAddFreeLicense {
    fn default() -> &'a CMsgAMAddFreeLicense {
        <CMsgAMAddFreeLicense as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMAddFreeLicense {
    pub fn new() -> CMsgAMAddFreeLicense {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 ip_public = 2;

    pub fn ip_public(&self) -> u32 {
        self.ip_public.unwrap_or(0)
    }

    pub fn clear_ip_public(&mut self) {
        self.ip_public = ::std::option::Option::None;
    }

    pub fn has_ip_public(&self) -> bool {
        self.ip_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_public(&mut self, v: u32) {
        self.ip_public = ::std::option::Option::Some(v);
    }

    // optional uint32 packageid = 3;

    pub fn packageid(&self) -> u32 {
        self.packageid.unwrap_or(0)
    }

    pub fn clear_packageid(&mut self) {
        self.packageid = ::std::option::Option::None;
    }

    pub fn has_packageid(&self) -> bool {
        self.packageid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packageid(&mut self, v: u32) {
        self.packageid = ::std::option::Option::Some(v);
    }

    // optional string store_country_code = 4;

    pub fn store_country_code(&self) -> &str {
        match self.store_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_store_country_code(&mut self) {
        self.store_country_code = ::std::option::Option::None;
    }

    pub fn has_store_country_code(&self) -> bool {
        self.store_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_store_country_code(&mut self, v: ::std::string::String) {
        self.store_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_store_country_code(&mut self) -> &mut ::std::string::String {
        if self.store_country_code.is_none() {
            self.store_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.store_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_store_country_code(&mut self) -> ::std::string::String {
        self.store_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMAddFreeLicense {
    const NAME: &'static str = "CMsgAMAddFreeLicense";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.ip_public = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.store_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ip_public {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.packageid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.store_country_code.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.ip_public {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.packageid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.store_country_code.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMAddFreeLicense {
        CMsgAMAddFreeLicense::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.ip_public = ::std::option::Option::None;
        self.packageid = ::std::option::Option::None;
        self.store_country_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMAddFreeLicense {
        static instance: CMsgAMAddFreeLicense = CMsgAMAddFreeLicense {
            steamid: ::std::option::Option::None,
            ip_public: ::std::option::Option::None,
            packageid: ::std::option::Option::None,
            store_country_code: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMAddFreeLicenseResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMAddFreeLicenseResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicenseResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicenseResponse.purchase_result_detail)
    pub purchase_result_detail: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgAMAddFreeLicenseResponse.transid)
    pub transid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMAddFreeLicenseResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMAddFreeLicenseResponse {
    fn default() -> &'a CMsgAMAddFreeLicenseResponse {
        <CMsgAMAddFreeLicenseResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMAddFreeLicenseResponse {
    pub fn new() -> CMsgAMAddFreeLicenseResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional int32 purchase_result_detail = 2;

    pub fn purchase_result_detail(&self) -> i32 {
        self.purchase_result_detail.unwrap_or(0)
    }

    pub fn clear_purchase_result_detail(&mut self) {
        self.purchase_result_detail = ::std::option::Option::None;
    }

    pub fn has_purchase_result_detail(&self) -> bool {
        self.purchase_result_detail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_purchase_result_detail(&mut self, v: i32) {
        self.purchase_result_detail = ::std::option::Option::Some(v);
    }

    // optional fixed64 transid = 3;

    pub fn transid(&self) -> u64 {
        self.transid.unwrap_or(0)
    }

    pub fn clear_transid(&mut self) {
        self.transid = ::std::option::Option::None;
    }

    pub fn has_transid(&self) -> bool {
        self.transid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transid(&mut self, v: u64) {
        self.transid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMAddFreeLicenseResponse {
    const NAME: &'static str = "CMsgAMAddFreeLicenseResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.purchase_result_detail = ::std::option::Option::Some(is.read_int32()?);
                },
                25 => {
                    self.transid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.purchase_result_detail {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.transid {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.purchase_result_detail {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.transid {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMAddFreeLicenseResponse {
        CMsgAMAddFreeLicenseResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.purchase_result_detail = ::std::option::Option::None;
        self.transid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMAddFreeLicenseResponse {
        static instance: CMsgAMAddFreeLicenseResponse = CMsgAMAddFreeLicenseResponse {
            eresult: ::std::option::Option::None,
            purchase_result_detail: ::std::option::Option::None,
            transid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgGetIPLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPLocation {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgGetIPLocation.ips)
    pub ips: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgGetIPLocation.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPLocation {
    fn default() -> &'a CGCMsgGetIPLocation {
        <CGCMsgGetIPLocation as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPLocation {
    pub fn new() -> CGCMsgGetIPLocation {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgGetIPLocation {
    const NAME: &'static str = "CGCMsgGetIPLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ips)?;
                },
                13 => {
                    self.ips.push(is.read_fixed32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 5 * self.ips.len() as u64;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.ips {
            os.write_fixed32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPLocation {
        CGCMsgGetIPLocation::new()
    }

    fn clear(&mut self) {
        self.ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPLocation {
        static instance: CGCMsgGetIPLocation = CGCMsgGetIPLocation {
            ips: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgGetIPASN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPASN {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgGetIPASN.ips)
    pub ips: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgGetIPASN.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPASN {
    fn default() -> &'a CGCMsgGetIPASN {
        <CGCMsgGetIPASN as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPASN {
    pub fn new() -> CGCMsgGetIPASN {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgGetIPASN {
    const NAME: &'static str = "CGCMsgGetIPASN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ips)?;
                },
                13 => {
                    self.ips.push(is.read_fixed32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 5 * self.ips.len() as u64;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.ips {
            os.write_fixed32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPASN {
        CGCMsgGetIPASN::new()
    }

    fn clear(&mut self) {
        self.ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPASN {
        static instance: CGCMsgGetIPASN = CGCMsgGetIPASN {
            ips: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CIPASNInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CIPASNInfo {
    // message fields
    // @@protoc_insertion_point(field:CIPASNInfo.ip)
    pub ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CIPASNInfo.asn)
    pub asn: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CIPASNInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CIPASNInfo {
    fn default() -> &'a CIPASNInfo {
        <CIPASNInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CIPASNInfo {
    pub fn new() -> CIPASNInfo {
        ::std::default::Default::default()
    }

    // optional fixed32 ip = 1;

    pub fn ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional uint32 asn = 2;

    pub fn asn(&self) -> u32 {
        self.asn.unwrap_or(0)
    }

    pub fn clear_asn(&mut self) {
        self.asn = ::std::option::Option::None;
    }

    pub fn has_asn(&self) -> bool {
        self.asn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asn(&mut self, v: u32) {
        self.asn = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CIPASNInfo {
    const NAME: &'static str = "CIPASNInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                16 => {
                    self.asn = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.asn {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ip {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.asn {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CIPASNInfo {
        CIPASNInfo::new()
    }

    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.asn = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CIPASNInfo {
        static instance: CIPASNInfo = CIPASNInfo {
            ip: ::std::option::Option::None,
            asn: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgGetIPASNResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPASNResponse {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgGetIPASNResponse.infos)
    pub infos: ::std::vec::Vec<CIPASNInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgGetIPASNResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPASNResponse {
    fn default() -> &'a CGCMsgGetIPASNResponse {
        <CGCMsgGetIPASNResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPASNResponse {
    pub fn new() -> CGCMsgGetIPASNResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgGetIPASNResponse {
    const NAME: &'static str = "CGCMsgGetIPASNResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infos.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.infos {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.infos {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPASNResponse {
        CGCMsgGetIPASNResponse::new()
    }

    fn clear(&mut self) {
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPASNResponse {
        static instance: CGCMsgGetIPASNResponse = CGCMsgGetIPASNResponse {
            infos: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgSystemStatsSchema)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgSystemStatsSchema {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgSystemStatsSchema.gc_app_id)
    pub gc_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgSystemStatsSchema.schema_kv)
    pub schema_kv: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgSystemStatsSchema.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgSystemStatsSchema {
    fn default() -> &'a CGCMsgSystemStatsSchema {
        <CGCMsgSystemStatsSchema as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgSystemStatsSchema {
    pub fn new() -> CGCMsgSystemStatsSchema {
        ::std::default::Default::default()
    }

    // optional uint32 gc_app_id = 1;

    pub fn gc_app_id(&self) -> u32 {
        self.gc_app_id.unwrap_or(0)
    }

    pub fn clear_gc_app_id(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
    }

    pub fn has_gc_app_id(&self) -> bool {
        self.gc_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_app_id(&mut self, v: u32) {
        self.gc_app_id = ::std::option::Option::Some(v);
    }

    // optional bytes schema_kv = 2;

    pub fn schema_kv(&self) -> &[u8] {
        match self.schema_kv.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_schema_kv(&mut self) {
        self.schema_kv = ::std::option::Option::None;
    }

    pub fn has_schema_kv(&self) -> bool {
        self.schema_kv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_kv(&mut self, v: ::std::vec::Vec<u8>) {
        self.schema_kv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema_kv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.schema_kv.is_none() {
            self.schema_kv = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.schema_kv.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema_kv(&mut self) -> ::std::vec::Vec<u8> {
        self.schema_kv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgSystemStatsSchema {
    const NAME: &'static str = "CGCMsgSystemStatsSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gc_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.schema_kv = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gc_app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.schema_kv.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.gc_app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.schema_kv.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgSystemStatsSchema {
        CGCMsgSystemStatsSchema::new()
    }

    fn clear(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
        self.schema_kv = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgSystemStatsSchema {
        static instance: CGCMsgSystemStatsSchema = CGCMsgSystemStatsSchema {
            gc_app_id: ::std::option::Option::None,
            schema_kv: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgGetSystemStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetSystemStats {
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgGetSystemStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetSystemStats {
    fn default() -> &'a CGCMsgGetSystemStats {
        <CGCMsgGetSystemStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetSystemStats {
    pub fn new() -> CGCMsgGetSystemStats {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgGetSystemStats {
    const NAME: &'static str = "CGCMsgGetSystemStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetSystemStats {
        CGCMsgGetSystemStats::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetSystemStats {
        static instance: CGCMsgGetSystemStats = CGCMsgGetSystemStats {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgGetSystemStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetSystemStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.gc_app_id)
    pub gc_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.stats_kv)
    pub stats_kv: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.active_jobs)
    pub active_jobs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.yielding_jobs)
    pub yielding_jobs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.user_sessions)
    pub user_sessions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.game_server_sessions)
    pub game_server_sessions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.socaches)
    pub socaches: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.socaches_to_unload)
    pub socaches_to_unload: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.socaches_loading)
    pub socaches_loading: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.writeback_queue)
    pub writeback_queue: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.steamid_locks)
    pub steamid_locks: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.logon_queue)
    pub logon_queue: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCMsgGetSystemStatsResponse.logon_jobs)
    pub logon_jobs: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgGetSystemStatsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetSystemStatsResponse {
    fn default() -> &'a CGCMsgGetSystemStatsResponse {
        <CGCMsgGetSystemStatsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetSystemStatsResponse {
    pub fn new() -> CGCMsgGetSystemStatsResponse {
        ::std::default::Default::default()
    }

    // optional uint32 gc_app_id = 1;

    pub fn gc_app_id(&self) -> u32 {
        self.gc_app_id.unwrap_or(0)
    }

    pub fn clear_gc_app_id(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
    }

    pub fn has_gc_app_id(&self) -> bool {
        self.gc_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_app_id(&mut self, v: u32) {
        self.gc_app_id = ::std::option::Option::Some(v);
    }

    // optional bytes stats_kv = 2;

    pub fn stats_kv(&self) -> &[u8] {
        match self.stats_kv.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_stats_kv(&mut self) {
        self.stats_kv = ::std::option::Option::None;
    }

    pub fn has_stats_kv(&self) -> bool {
        self.stats_kv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_kv(&mut self, v: ::std::vec::Vec<u8>) {
        self.stats_kv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats_kv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.stats_kv.is_none() {
            self.stats_kv = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.stats_kv.as_mut().unwrap()
    }

    // Take field
    pub fn take_stats_kv(&mut self) -> ::std::vec::Vec<u8> {
        self.stats_kv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 active_jobs = 3;

    pub fn active_jobs(&self) -> u32 {
        self.active_jobs.unwrap_or(0)
    }

    pub fn clear_active_jobs(&mut self) {
        self.active_jobs = ::std::option::Option::None;
    }

    pub fn has_active_jobs(&self) -> bool {
        self.active_jobs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_jobs(&mut self, v: u32) {
        self.active_jobs = ::std::option::Option::Some(v);
    }

    // optional uint32 yielding_jobs = 4;

    pub fn yielding_jobs(&self) -> u32 {
        self.yielding_jobs.unwrap_or(0)
    }

    pub fn clear_yielding_jobs(&mut self) {
        self.yielding_jobs = ::std::option::Option::None;
    }

    pub fn has_yielding_jobs(&self) -> bool {
        self.yielding_jobs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yielding_jobs(&mut self, v: u32) {
        self.yielding_jobs = ::std::option::Option::Some(v);
    }

    // optional uint32 user_sessions = 5;

    pub fn user_sessions(&self) -> u32 {
        self.user_sessions.unwrap_or(0)
    }

    pub fn clear_user_sessions(&mut self) {
        self.user_sessions = ::std::option::Option::None;
    }

    pub fn has_user_sessions(&self) -> bool {
        self.user_sessions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_sessions(&mut self, v: u32) {
        self.user_sessions = ::std::option::Option::Some(v);
    }

    // optional uint32 game_server_sessions = 6;

    pub fn game_server_sessions(&self) -> u32 {
        self.game_server_sessions.unwrap_or(0)
    }

    pub fn clear_game_server_sessions(&mut self) {
        self.game_server_sessions = ::std::option::Option::None;
    }

    pub fn has_game_server_sessions(&self) -> bool {
        self.game_server_sessions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_sessions(&mut self, v: u32) {
        self.game_server_sessions = ::std::option::Option::Some(v);
    }

    // optional uint32 socaches = 7;

    pub fn socaches(&self) -> u32 {
        self.socaches.unwrap_or(0)
    }

    pub fn clear_socaches(&mut self) {
        self.socaches = ::std::option::Option::None;
    }

    pub fn has_socaches(&self) -> bool {
        self.socaches.is_some()
    }

    // Param is passed by value, moved
    pub fn set_socaches(&mut self, v: u32) {
        self.socaches = ::std::option::Option::Some(v);
    }

    // optional uint32 socaches_to_unload = 8;

    pub fn socaches_to_unload(&self) -> u32 {
        self.socaches_to_unload.unwrap_or(0)
    }

    pub fn clear_socaches_to_unload(&mut self) {
        self.socaches_to_unload = ::std::option::Option::None;
    }

    pub fn has_socaches_to_unload(&self) -> bool {
        self.socaches_to_unload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_socaches_to_unload(&mut self, v: u32) {
        self.socaches_to_unload = ::std::option::Option::Some(v);
    }

    // optional uint32 socaches_loading = 9;

    pub fn socaches_loading(&self) -> u32 {
        self.socaches_loading.unwrap_or(0)
    }

    pub fn clear_socaches_loading(&mut self) {
        self.socaches_loading = ::std::option::Option::None;
    }

    pub fn has_socaches_loading(&self) -> bool {
        self.socaches_loading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_socaches_loading(&mut self, v: u32) {
        self.socaches_loading = ::std::option::Option::Some(v);
    }

    // optional uint32 writeback_queue = 10;

    pub fn writeback_queue(&self) -> u32 {
        self.writeback_queue.unwrap_or(0)
    }

    pub fn clear_writeback_queue(&mut self) {
        self.writeback_queue = ::std::option::Option::None;
    }

    pub fn has_writeback_queue(&self) -> bool {
        self.writeback_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_writeback_queue(&mut self, v: u32) {
        self.writeback_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 steamid_locks = 11;

    pub fn steamid_locks(&self) -> u32 {
        self.steamid_locks.unwrap_or(0)
    }

    pub fn clear_steamid_locks(&mut self) {
        self.steamid_locks = ::std::option::Option::None;
    }

    pub fn has_steamid_locks(&self) -> bool {
        self.steamid_locks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_locks(&mut self, v: u32) {
        self.steamid_locks = ::std::option::Option::Some(v);
    }

    // optional uint32 logon_queue = 12;

    pub fn logon_queue(&self) -> u32 {
        self.logon_queue.unwrap_or(0)
    }

    pub fn clear_logon_queue(&mut self) {
        self.logon_queue = ::std::option::Option::None;
    }

    pub fn has_logon_queue(&self) -> bool {
        self.logon_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logon_queue(&mut self, v: u32) {
        self.logon_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 logon_jobs = 13;

    pub fn logon_jobs(&self) -> u32 {
        self.logon_jobs.unwrap_or(0)
    }

    pub fn clear_logon_jobs(&mut self) {
        self.logon_jobs = ::std::option::Option::None;
    }

    pub fn has_logon_jobs(&self) -> bool {
        self.logon_jobs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logon_jobs(&mut self, v: u32) {
        self.logon_jobs = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgGetSystemStatsResponse {
    const NAME: &'static str = "CGCMsgGetSystemStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gc_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.stats_kv = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.active_jobs = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.yielding_jobs = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.user_sessions = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.game_server_sessions = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.socaches = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.socaches_to_unload = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.socaches_loading = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.writeback_queue = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.steamid_locks = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.logon_queue = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.logon_jobs = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gc_app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.stats_kv.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.active_jobs {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.yielding_jobs {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.user_sessions {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.game_server_sessions {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.socaches {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.socaches_to_unload {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.socaches_loading {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.writeback_queue {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.steamid_locks {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.logon_queue {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.logon_jobs {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(13, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.gc_app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.stats_kv.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.active_jobs {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.yielding_jobs {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.user_sessions {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.game_server_sessions {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.socaches {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.socaches_to_unload {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.socaches_loading {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.writeback_queue {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.steamid_locks {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.logon_queue {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.logon_jobs {
            os.write_uint32(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetSystemStatsResponse {
        CGCMsgGetSystemStatsResponse::new()
    }

    fn clear(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
        self.stats_kv = ::std::option::Option::None;
        self.active_jobs = ::std::option::Option::None;
        self.yielding_jobs = ::std::option::Option::None;
        self.user_sessions = ::std::option::Option::None;
        self.game_server_sessions = ::std::option::Option::None;
        self.socaches = ::std::option::Option::None;
        self.socaches_to_unload = ::std::option::Option::None;
        self.socaches_loading = ::std::option::Option::None;
        self.writeback_queue = ::std::option::Option::None;
        self.steamid_locks = ::std::option::Option::None;
        self.logon_queue = ::std::option::Option::None;
        self.logon_jobs = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetSystemStatsResponse {
        static instance: CGCMsgGetSystemStatsResponse = CGCMsgGetSystemStatsResponse {
            gc_app_id: ::std::option::Option::None,
            stats_kv: ::std::option::Option::None,
            active_jobs: ::std::option::Option::None,
            yielding_jobs: ::std::option::Option::None,
            user_sessions: ::std::option::Option::None,
            game_server_sessions: ::std::option::Option::None,
            socaches: ::std::option::Option::None,
            socaches_to_unload: ::std::option::Option::None,
            socaches_loading: ::std::option::Option::None,
            writeback_queue: ::std::option::Option::None,
            steamid_locks: ::std::option::Option::None,
            logon_queue: ::std::option::Option::None,
            logon_jobs: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMSendEmail)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMSendEmail {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMSendEmail.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMSendEmail.email_msg_type)
    pub email_msg_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMSendEmail.email_format)
    pub email_format: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMSendEmail.persona_name_tokens)
    pub persona_name_tokens: ::std::vec::Vec<cmsg_amsend_email::PersonaNameReplacementToken>,
    // @@protoc_insertion_point(field:CMsgAMSendEmail.source_gc)
    pub source_gc: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMSendEmail.tokens)
    pub tokens: ::std::vec::Vec<cmsg_amsend_email::ReplacementToken>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMSendEmail.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMSendEmail {
    fn default() -> &'a CMsgAMSendEmail {
        <CMsgAMSendEmail as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMSendEmail {
    pub fn new() -> CMsgAMSendEmail {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 email_msg_type = 2;

    pub fn email_msg_type(&self) -> u32 {
        self.email_msg_type.unwrap_or(0)
    }

    pub fn clear_email_msg_type(&mut self) {
        self.email_msg_type = ::std::option::Option::None;
    }

    pub fn has_email_msg_type(&self) -> bool {
        self.email_msg_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_msg_type(&mut self, v: u32) {
        self.email_msg_type = ::std::option::Option::Some(v);
    }

    // optional uint32 email_format = 3;

    pub fn email_format(&self) -> u32 {
        self.email_format.unwrap_or(0)
    }

    pub fn clear_email_format(&mut self) {
        self.email_format = ::std::option::Option::None;
    }

    pub fn has_email_format(&self) -> bool {
        self.email_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_format(&mut self, v: u32) {
        self.email_format = ::std::option::Option::Some(v);
    }

    // optional uint32 source_gc = 6;

    pub fn source_gc(&self) -> u32 {
        self.source_gc.unwrap_or(0)
    }

    pub fn clear_source_gc(&mut self) {
        self.source_gc = ::std::option::Option::None;
    }

    pub fn has_source_gc(&self) -> bool {
        self.source_gc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_gc(&mut self, v: u32) {
        self.source_gc = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMSendEmail {
    const NAME: &'static str = "CMsgAMSendEmail";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.email_msg_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.email_format = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.persona_name_tokens.push(is.read_message()?);
                },
                48 => {
                    self.source_gc = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.tokens.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.email_msg_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.email_format {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.persona_name_tokens {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.source_gc {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.email_msg_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.email_format {
            os.write_uint32(3, v)?;
        }
        for v in &self.persona_name_tokens {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.source_gc {
            os.write_uint32(6, v)?;
        }
        for v in &self.tokens {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMSendEmail {
        CMsgAMSendEmail::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.email_msg_type = ::std::option::Option::None;
        self.email_format = ::std::option::Option::None;
        self.persona_name_tokens.clear();
        self.source_gc = ::std::option::Option::None;
        self.tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMSendEmail {
        static instance: CMsgAMSendEmail = CMsgAMSendEmail {
            steamid: ::std::option::Option::None,
            email_msg_type: ::std::option::Option::None,
            email_format: ::std::option::Option::None,
            persona_name_tokens: ::std::vec::Vec::new(),
            source_gc: ::std::option::Option::None,
            tokens: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgAMSendEmail`
pub mod cmsg_amsend_email {
    // @@protoc_insertion_point(message:CMsgAMSendEmail.ReplacementToken)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ReplacementToken {
        // message fields
        // @@protoc_insertion_point(field:CMsgAMSendEmail.ReplacementToken.token_name)
        pub token_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgAMSendEmail.ReplacementToken.token_value)
        pub token_value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgAMSendEmail.ReplacementToken.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReplacementToken {
        fn default() -> &'a ReplacementToken {
            <ReplacementToken as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ReplacementToken {
        pub fn new() -> ReplacementToken {
            ::std::default::Default::default()
        }

        // optional string token_name = 1;

        pub fn token_name(&self) -> &str {
            match self.token_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_name(&mut self) {
            self.token_name = ::std::option::Option::None;
        }

        pub fn has_token_name(&self) -> bool {
            self.token_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_name(&mut self, v: ::std::string::String) {
            self.token_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_name(&mut self) -> &mut ::std::string::String {
            if self.token_name.is_none() {
                self.token_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_name(&mut self) -> ::std::string::String {
            self.token_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string token_value = 2;

        pub fn token_value(&self) -> &str {
            match self.token_value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_value(&mut self) {
            self.token_value = ::std::option::Option::None;
        }

        pub fn has_token_value(&self) -> bool {
            self.token_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_value(&mut self, v: ::std::string::String) {
            self.token_value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_value(&mut self) -> &mut ::std::string::String {
            if self.token_value.is_none() {
                self.token_value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_value.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_value(&mut self) -> ::std::string::String {
            self.token_value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ReplacementToken {
        const NAME: &'static str = "ReplacementToken";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.token_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.token_value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.token_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.token_value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.token_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.token_value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReplacementToken {
            ReplacementToken::new()
        }

        fn clear(&mut self) {
            self.token_name = ::std::option::Option::None;
            self.token_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReplacementToken {
            static instance: ReplacementToken = ReplacementToken {
                token_name: ::std::option::Option::None,
                token_value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgAMSendEmail.PersonaNameReplacementToken)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PersonaNameReplacementToken {
        // message fields
        // @@protoc_insertion_point(field:CMsgAMSendEmail.PersonaNameReplacementToken.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
        pub token_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgAMSendEmail.PersonaNameReplacementToken.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PersonaNameReplacementToken {
        fn default() -> &'a PersonaNameReplacementToken {
            <PersonaNameReplacementToken as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PersonaNameReplacementToken {
        pub fn new() -> PersonaNameReplacementToken {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional string token_name = 2;

        pub fn token_name(&self) -> &str {
            match self.token_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_name(&mut self) {
            self.token_name = ::std::option::Option::None;
        }

        pub fn has_token_name(&self) -> bool {
            self.token_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_name(&mut self, v: ::std::string::String) {
            self.token_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_name(&mut self) -> &mut ::std::string::String {
            if self.token_name.is_none() {
                self.token_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_name(&mut self) -> ::std::string::String {
            self.token_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PersonaNameReplacementToken {
        const NAME: &'static str = "PersonaNameReplacementToken";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.token_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.token_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.token_name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PersonaNameReplacementToken {
            PersonaNameReplacementToken::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.token_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PersonaNameReplacementToken {
            static instance: PersonaNameReplacementToken = PersonaNameReplacementToken {
                steamid: ::std::option::Option::None,
                token_name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgAMSendEmailResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMSendEmailResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMSendEmailResponse.eresult)
    pub eresult: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMSendEmailResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMSendEmailResponse {
    fn default() -> &'a CMsgAMSendEmailResponse {
        <CMsgAMSendEmailResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMSendEmailResponse {
    pub fn new() -> CMsgAMSendEmailResponse {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(2u32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMSendEmailResponse {
    const NAME: &'static str = "CMsgAMSendEmailResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMSendEmailResponse {
        CMsgAMSendEmailResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMSendEmailResponse {
        static instance: CMsgAMSendEmailResponse = CMsgAMSendEmailResponse {
            eresult: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetEmailTemplate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetEmailTemplate {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplate.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplate.email_msg_type)
    pub email_msg_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplate.email_lang)
    pub email_lang: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplate.email_format)
    pub email_format: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetEmailTemplate.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetEmailTemplate {
    fn default() -> &'a CMsgGCGetEmailTemplate {
        <CMsgGCGetEmailTemplate as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetEmailTemplate {
    pub fn new() -> CMsgGCGetEmailTemplate {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 email_msg_type = 2;

    pub fn email_msg_type(&self) -> u32 {
        self.email_msg_type.unwrap_or(0)
    }

    pub fn clear_email_msg_type(&mut self) {
        self.email_msg_type = ::std::option::Option::None;
    }

    pub fn has_email_msg_type(&self) -> bool {
        self.email_msg_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_msg_type(&mut self, v: u32) {
        self.email_msg_type = ::std::option::Option::Some(v);
    }

    // optional int32 email_lang = 3;

    pub fn email_lang(&self) -> i32 {
        self.email_lang.unwrap_or(0)
    }

    pub fn clear_email_lang(&mut self) {
        self.email_lang = ::std::option::Option::None;
    }

    pub fn has_email_lang(&self) -> bool {
        self.email_lang.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_lang(&mut self, v: i32) {
        self.email_lang = ::std::option::Option::Some(v);
    }

    // optional int32 email_format = 4;

    pub fn email_format(&self) -> i32 {
        self.email_format.unwrap_or(0)
    }

    pub fn clear_email_format(&mut self) {
        self.email_format = ::std::option::Option::None;
    }

    pub fn has_email_format(&self) -> bool {
        self.email_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_format(&mut self, v: i32) {
        self.email_format = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetEmailTemplate {
    const NAME: &'static str = "CMsgGCGetEmailTemplate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.email_msg_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.email_lang = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.email_format = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.email_msg_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.email_lang {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.email_format {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.email_msg_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.email_lang {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.email_format {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetEmailTemplate {
        CMsgGCGetEmailTemplate::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.email_msg_type = ::std::option::Option::None;
        self.email_lang = ::std::option::Option::None;
        self.email_format = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetEmailTemplate {
        static instance: CMsgGCGetEmailTemplate = CMsgGCGetEmailTemplate {
            app_id: ::std::option::Option::None,
            email_msg_type: ::std::option::Option::None,
            email_lang: ::std::option::Option::None,
            email_format: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetEmailTemplateResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetEmailTemplateResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplateResponse.eresult)
    pub eresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplateResponse.template_exists)
    pub template_exists: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCGetEmailTemplateResponse.template)
    pub template: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetEmailTemplateResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetEmailTemplateResponse {
    fn default() -> &'a CMsgGCGetEmailTemplateResponse {
        <CMsgGCGetEmailTemplateResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetEmailTemplateResponse {
    pub fn new() -> CMsgGCGetEmailTemplateResponse {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(2u32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional bool template_exists = 2;

    pub fn template_exists(&self) -> bool {
        self.template_exists.unwrap_or(false)
    }

    pub fn clear_template_exists(&mut self) {
        self.template_exists = ::std::option::Option::None;
    }

    pub fn has_template_exists(&self) -> bool {
        self.template_exists.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_exists(&mut self, v: bool) {
        self.template_exists = ::std::option::Option::Some(v);
    }

    // optional string template = 3;

    pub fn template(&self) -> &str {
        match self.template.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_template(&mut self) {
        self.template = ::std::option::Option::None;
    }

    pub fn has_template(&self) -> bool {
        self.template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template(&mut self, v: ::std::string::String) {
        self.template = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template(&mut self) -> &mut ::std::string::String {
        if self.template.is_none() {
            self.template = ::std::option::Option::Some(::std::string::String::new());
        }
        self.template.as_mut().unwrap()
    }

    // Take field
    pub fn take_template(&mut self) -> ::std::string::String {
        self.template.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetEmailTemplateResponse {
    const NAME: &'static str = "CMsgGCGetEmailTemplateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.template_exists = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.template = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.template_exists {
            my_size += 1 + 1;
        }
        if let Some(v) = self.template.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.template_exists {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.template.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetEmailTemplateResponse {
        CMsgGCGetEmailTemplateResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.template_exists = ::std::option::Option::None;
        self.template = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetEmailTemplateResponse {
        static instance: CMsgGCGetEmailTemplateResponse = CMsgGCGetEmailTemplateResponse {
            eresult: ::std::option::Option::None,
            template_exists: ::std::option::Option::None,
            template: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMGrantGuestPasses2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGrantGuestPasses2 {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2.package_id)
    pub package_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2.passes_to_grant)
    pub passes_to_grant: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2.days_to_expiration)
    pub days_to_expiration: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2.action)
    pub action: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMGrantGuestPasses2.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGrantGuestPasses2 {
    fn default() -> &'a CMsgAMGrantGuestPasses2 {
        <CMsgAMGrantGuestPasses2 as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGrantGuestPasses2 {
    pub fn new() -> CMsgAMGrantGuestPasses2 {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 package_id = 2;

    pub fn package_id(&self) -> u32 {
        self.package_id.unwrap_or(0)
    }

    pub fn clear_package_id(&mut self) {
        self.package_id = ::std::option::Option::None;
    }

    pub fn has_package_id(&self) -> bool {
        self.package_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package_id(&mut self, v: u32) {
        self.package_id = ::std::option::Option::Some(v);
    }

    // optional int32 passes_to_grant = 3;

    pub fn passes_to_grant(&self) -> i32 {
        self.passes_to_grant.unwrap_or(0)
    }

    pub fn clear_passes_to_grant(&mut self) {
        self.passes_to_grant = ::std::option::Option::None;
    }

    pub fn has_passes_to_grant(&self) -> bool {
        self.passes_to_grant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passes_to_grant(&mut self, v: i32) {
        self.passes_to_grant = ::std::option::Option::Some(v);
    }

    // optional int32 days_to_expiration = 4;

    pub fn days_to_expiration(&self) -> i32 {
        self.days_to_expiration.unwrap_or(0)
    }

    pub fn clear_days_to_expiration(&mut self) {
        self.days_to_expiration = ::std::option::Option::None;
    }

    pub fn has_days_to_expiration(&self) -> bool {
        self.days_to_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_days_to_expiration(&mut self, v: i32) {
        self.days_to_expiration = ::std::option::Option::Some(v);
    }

    // optional int32 action = 5;

    pub fn action(&self) -> i32 {
        self.action.unwrap_or(0)
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: i32) {
        self.action = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMGrantGuestPasses2 {
    const NAME: &'static str = "CMsgAMGrantGuestPasses2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.package_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.passes_to_grant = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.days_to_expiration = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.action = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.package_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.passes_to_grant {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.days_to_expiration {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.action {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.package_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.passes_to_grant {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.days_to_expiration {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.action {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGrantGuestPasses2 {
        CMsgAMGrantGuestPasses2::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.package_id = ::std::option::Option::None;
        self.passes_to_grant = ::std::option::Option::None;
        self.days_to_expiration = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGrantGuestPasses2 {
        static instance: CMsgAMGrantGuestPasses2 = CMsgAMGrantGuestPasses2 {
            steam_id: ::std::option::Option::None,
            package_id: ::std::option::Option::None,
            passes_to_grant: ::std::option::Option::None,
            days_to_expiration: ::std::option::Option::None,
            action: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAMGrantGuestPasses2Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGrantGuestPasses2Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgAMGrantGuestPasses2Response.passes_granted)
    pub passes_granted: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAMGrantGuestPasses2Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGrantGuestPasses2Response {
    fn default() -> &'a CMsgAMGrantGuestPasses2Response {
        <CMsgAMGrantGuestPasses2Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGrantGuestPasses2Response {
    pub fn new() -> CMsgAMGrantGuestPasses2Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional int32 passes_granted = 2;

    pub fn passes_granted(&self) -> i32 {
        self.passes_granted.unwrap_or(0i32)
    }

    pub fn clear_passes_granted(&mut self) {
        self.passes_granted = ::std::option::Option::None;
    }

    pub fn has_passes_granted(&self) -> bool {
        self.passes_granted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passes_granted(&mut self, v: i32) {
        self.passes_granted = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAMGrantGuestPasses2Response {
    const NAME: &'static str = "CMsgAMGrantGuestPasses2Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.passes_granted = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.passes_granted {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.passes_granted {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGrantGuestPasses2Response {
        CMsgAMGrantGuestPasses2Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.passes_granted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGrantGuestPasses2Response {
        static instance: CMsgAMGrantGuestPasses2Response = CMsgAMGrantGuestPasses2Response {
            eresult: ::std::option::Option::None,
            passes_granted: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetPersonaNames)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPersonaNames {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetPersonaNames.steamids)
    pub steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetPersonaNames.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPersonaNames {
    fn default() -> &'a CMsgGCGetPersonaNames {
        <CMsgGCGetPersonaNames as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPersonaNames {
    pub fn new() -> CMsgGCGetPersonaNames {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetPersonaNames {
    const NAME: &'static str = "CMsgGCGetPersonaNames";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steamids)?;
                },
                9 => {
                    self.steamids.push(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.steamids.len() as u64;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.steamids {
            os.write_fixed64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPersonaNames {
        CMsgGCGetPersonaNames::new()
    }

    fn clear(&mut self) {
        self.steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPersonaNames {
        static instance: CMsgGCGetPersonaNames = CMsgGCGetPersonaNames {
            steamids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetPersonaNames_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPersonaNames_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetPersonaNames_Response.succeeded_lookups)
    pub succeeded_lookups: ::std::vec::Vec<cmsg_gcget_persona_names_response::PersonaName>,
    // @@protoc_insertion_point(field:CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
    pub failed_lookup_steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetPersonaNames_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPersonaNames_Response {
    fn default() -> &'a CMsgGCGetPersonaNames_Response {
        <CMsgGCGetPersonaNames_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPersonaNames_Response {
    pub fn new() -> CMsgGCGetPersonaNames_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetPersonaNames_Response {
    const NAME: &'static str = "CMsgGCGetPersonaNames_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.succeeded_lookups.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.failed_lookup_steamids)?;
                },
                17 => {
                    self.failed_lookup_steamids.push(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.succeeded_lookups {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += 9 * self.failed_lookup_steamids.len() as u64;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.succeeded_lookups {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.failed_lookup_steamids {
            os.write_fixed64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPersonaNames_Response {
        CMsgGCGetPersonaNames_Response::new()
    }

    fn clear(&mut self) {
        self.succeeded_lookups.clear();
        self.failed_lookup_steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPersonaNames_Response {
        static instance: CMsgGCGetPersonaNames_Response = CMsgGCGetPersonaNames_Response {
            succeeded_lookups: ::std::vec::Vec::new(),
            failed_lookup_steamids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCGetPersonaNames_Response`
pub mod cmsg_gcget_persona_names_response {
    // @@protoc_insertion_point(message:CMsgGCGetPersonaNames_Response.PersonaName)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PersonaName {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCGetPersonaNames_Response.PersonaName.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
        pub persona_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCGetPersonaNames_Response.PersonaName.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PersonaName {
        fn default() -> &'a PersonaName {
            <PersonaName as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PersonaName {
        pub fn new() -> PersonaName {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional string persona_name = 2;

        pub fn persona_name(&self) -> &str {
            match self.persona_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_persona_name(&mut self) {
            self.persona_name = ::std::option::Option::None;
        }

        pub fn has_persona_name(&self) -> bool {
            self.persona_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_persona_name(&mut self, v: ::std::string::String) {
            self.persona_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
            if self.persona_name.is_none() {
                self.persona_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.persona_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_persona_name(&mut self) -> ::std::string::String {
            self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PersonaName {
        const NAME: &'static str = "PersonaName";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.persona_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.persona_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.persona_name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PersonaName {
            PersonaName::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.persona_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PersonaName {
            static instance: PersonaName = PersonaName {
                steamid: ::std::option::Option::None,
                persona_name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgGCCheckFriendship)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckFriendship {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCCheckFriendship.steamid_left)
    pub steamid_left: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCCheckFriendship.steamid_right)
    pub steamid_right: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCCheckFriendship.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckFriendship {
    fn default() -> &'a CMsgGCCheckFriendship {
        <CMsgGCCheckFriendship as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckFriendship {
    pub fn new() -> CMsgGCCheckFriendship {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid_left = 1;

    pub fn steamid_left(&self) -> u64 {
        self.steamid_left.unwrap_or(0)
    }

    pub fn clear_steamid_left(&mut self) {
        self.steamid_left = ::std::option::Option::None;
    }

    pub fn has_steamid_left(&self) -> bool {
        self.steamid_left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_left(&mut self, v: u64) {
        self.steamid_left = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_right = 2;

    pub fn steamid_right(&self) -> u64 {
        self.steamid_right.unwrap_or(0)
    }

    pub fn clear_steamid_right(&mut self) {
        self.steamid_right = ::std::option::Option::None;
    }

    pub fn has_steamid_right(&self) -> bool {
        self.steamid_right.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_right(&mut self, v: u64) {
        self.steamid_right = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCCheckFriendship {
    const NAME: &'static str = "CMsgGCCheckFriendship";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid_left = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid_right = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid_left {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid_right {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid_left {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid_right {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckFriendship {
        CMsgGCCheckFriendship::new()
    }

    fn clear(&mut self) {
        self.steamid_left = ::std::option::Option::None;
        self.steamid_right = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckFriendship {
        static instance: CMsgGCCheckFriendship = CMsgGCCheckFriendship {
            steamid_left: ::std::option::Option::None,
            steamid_right: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCCheckFriendship_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckFriendship_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCCheckFriendship_Response.success)
    pub success: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCCheckFriendship_Response.found_friendship)
    pub found_friendship: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCCheckFriendship_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckFriendship_Response {
    fn default() -> &'a CMsgGCCheckFriendship_Response {
        <CMsgGCCheckFriendship_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckFriendship_Response {
    pub fn new() -> CMsgGCCheckFriendship_Response {
        ::std::default::Default::default()
    }

    // optional bool success = 1;

    pub fn success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional bool found_friendship = 2;

    pub fn found_friendship(&self) -> bool {
        self.found_friendship.unwrap_or(false)
    }

    pub fn clear_found_friendship(&mut self) {
        self.found_friendship = ::std::option::Option::None;
    }

    pub fn has_found_friendship(&self) -> bool {
        self.found_friendship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_found_friendship(&mut self, v: bool) {
        self.found_friendship = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCCheckFriendship_Response {
    const NAME: &'static str = "CMsgGCCheckFriendship_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.found_friendship = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 1 + 1;
        }
        if let Some(v) = self.found_friendship {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.found_friendship {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckFriendship_Response {
        CMsgGCCheckFriendship_Response::new()
    }

    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.found_friendship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckFriendship_Response {
        static instance: CMsgGCCheckFriendship_Response = CMsgGCCheckFriendship_Response {
            success: ::std::option::Option::None,
            found_friendship: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetAppFriendsList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetAppFriendsList {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList.include_friendship_timestamps)
    pub include_friendship_timestamps: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList.include_friends_with_no_play_time)
    pub include_friends_with_no_play_time: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetAppFriendsList.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetAppFriendsList {
    fn default() -> &'a CMsgGCGetAppFriendsList {
        <CMsgGCGetAppFriendsList as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetAppFriendsList {
    pub fn new() -> CMsgGCGetAppFriendsList {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_friendship_timestamps = 2;

    pub fn include_friendship_timestamps(&self) -> bool {
        self.include_friendship_timestamps.unwrap_or(false)
    }

    pub fn clear_include_friendship_timestamps(&mut self) {
        self.include_friendship_timestamps = ::std::option::Option::None;
    }

    pub fn has_include_friendship_timestamps(&self) -> bool {
        self.include_friendship_timestamps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_friendship_timestamps(&mut self, v: bool) {
        self.include_friendship_timestamps = ::std::option::Option::Some(v);
    }

    // optional bool include_friends_with_no_play_time = 3;

    pub fn include_friends_with_no_play_time(&self) -> bool {
        self.include_friends_with_no_play_time.unwrap_or(false)
    }

    pub fn clear_include_friends_with_no_play_time(&mut self) {
        self.include_friends_with_no_play_time = ::std::option::Option::None;
    }

    pub fn has_include_friends_with_no_play_time(&self) -> bool {
        self.include_friends_with_no_play_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_friends_with_no_play_time(&mut self, v: bool) {
        self.include_friends_with_no_play_time = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetAppFriendsList {
    const NAME: &'static str = "CMsgGCGetAppFriendsList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_friendship_timestamps = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.include_friends_with_no_play_time = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_friendship_timestamps {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_friends_with_no_play_time {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_friendship_timestamps {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.include_friends_with_no_play_time {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetAppFriendsList {
        CMsgGCGetAppFriendsList::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_friendship_timestamps = ::std::option::Option::None;
        self.include_friends_with_no_play_time = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetAppFriendsList {
        static instance: CMsgGCGetAppFriendsList = CMsgGCGetAppFriendsList {
            steamid: ::std::option::Option::None,
            include_friendship_timestamps: ::std::option::Option::None,
            include_friends_with_no_play_time: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetAppFriendsList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetAppFriendsList_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList_Response.success)
    pub success: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList_Response.steamids)
    pub steamids: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList_Response.friendship_timestamps)
    pub friendship_timestamps: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetAppFriendsList_Response.last_playtimes)
    pub last_playtimes: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetAppFriendsList_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetAppFriendsList_Response {
    fn default() -> &'a CMsgGCGetAppFriendsList_Response {
        <CMsgGCGetAppFriendsList_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetAppFriendsList_Response {
    pub fn new() -> CMsgGCGetAppFriendsList_Response {
        ::std::default::Default::default()
    }

    // optional bool success = 1;

    pub fn success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetAppFriendsList_Response {
    const NAME: &'static str = "CMsgGCGetAppFriendsList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steamids)?;
                },
                17 => {
                    self.steamids.push(is.read_fixed64()?);
                },
                26 => {
                    is.read_repeated_packed_fixed32_into(&mut self.friendship_timestamps)?;
                },
                29 => {
                    self.friendship_timestamps.push(is.read_fixed32()?);
                },
                34 => {
                    is.read_repeated_packed_fixed32_into(&mut self.last_playtimes)?;
                },
                37 => {
                    self.last_playtimes.push(is.read_fixed32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 1 + 1;
        }
        my_size += 9 * self.steamids.len() as u64;
        my_size += 5 * self.friendship_timestamps.len() as u64;
        my_size += 5 * self.last_playtimes.len() as u64;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        for v in &self.steamids {
            os.write_fixed64(2, *v)?;
        };
        for v in &self.friendship_timestamps {
            os.write_fixed32(3, *v)?;
        };
        for v in &self.last_playtimes {
            os.write_fixed32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetAppFriendsList_Response {
        CMsgGCGetAppFriendsList_Response::new()
    }

    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.steamids.clear();
        self.friendship_timestamps.clear();
        self.last_playtimes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetAppFriendsList_Response {
        static instance: CMsgGCGetAppFriendsList_Response = CMsgGCGetAppFriendsList_Response {
            success: ::std::option::Option::None,
            steamids: ::std::vec::Vec::new(),
            friendship_timestamps: ::std::vec::Vec::new(),
            last_playtimes: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgMasterSetDirectory)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetDirectory {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.master_dir_index)
    pub master_dir_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.dir)
    pub dir: ::std::vec::Vec<cmsg_gcmsg_master_set_directory::SubGC>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetDirectory.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetDirectory {
    fn default() -> &'a CMsgGCMsgMasterSetDirectory {
        <CMsgGCMsgMasterSetDirectory as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetDirectory {
    pub fn new() -> CMsgGCMsgMasterSetDirectory {
        ::std::default::Default::default()
    }

    // optional int32 master_dir_index = 1;

    pub fn master_dir_index(&self) -> i32 {
        self.master_dir_index.unwrap_or(-1i32)
    }

    pub fn clear_master_dir_index(&mut self) {
        self.master_dir_index = ::std::option::Option::None;
    }

    pub fn has_master_dir_index(&self) -> bool {
        self.master_dir_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master_dir_index(&mut self, v: i32) {
        self.master_dir_index = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgMasterSetDirectory {
    const NAME: &'static str = "CMsgGCMsgMasterSetDirectory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.master_dir_index = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.dir.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.master_dir_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        for value in &self.dir {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.master_dir_index {
            os.write_int32(1, v)?;
        }
        for v in &self.dir {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetDirectory {
        CMsgGCMsgMasterSetDirectory::new()
    }

    fn clear(&mut self) {
        self.master_dir_index = ::std::option::Option::None;
        self.dir.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetDirectory {
        static instance: CMsgGCMsgMasterSetDirectory = CMsgGCMsgMasterSetDirectory {
            master_dir_index: ::std::option::Option::None,
            dir: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCMsgMasterSetDirectory`
pub mod cmsg_gcmsg_master_set_directory {
    // @@protoc_insertion_point(message:CMsgGCMsgMasterSetDirectory.SubGC)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SubGC {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.SubGC.dir_index)
        pub dir_index: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.SubGC.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.SubGC.box)
        pub box_: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.SubGC.command_line)
        pub command_line: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
        pub gc_binary: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetDirectory.SubGC.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SubGC {
        fn default() -> &'a SubGC {
            <SubGC as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl SubGC {
        pub fn new() -> SubGC {
            ::std::default::Default::default()
        }

        // optional int32 dir_index = 1;

        pub fn dir_index(&self) -> i32 {
            self.dir_index.unwrap_or(-1i32)
        }

        pub fn clear_dir_index(&mut self) {
            self.dir_index = ::std::option::Option::None;
        }

        pub fn has_dir_index(&self) -> bool {
            self.dir_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_dir_index(&mut self, v: i32) {
            self.dir_index = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string box = 3;

        pub fn box_(&self) -> &str {
            match self.box_.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_box_(&mut self) {
            self.box_ = ::std::option::Option::None;
        }

        pub fn has_box(&self) -> bool {
            self.box_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_box(&mut self, v: ::std::string::String) {
            self.box_ = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_box(&mut self) -> &mut ::std::string::String {
            if self.box_.is_none() {
                self.box_ = ::std::option::Option::Some(::std::string::String::new());
            }
            self.box_.as_mut().unwrap()
        }

        // Take field
        pub fn take_box_(&mut self) -> ::std::string::String {
            self.box_.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string command_line = 4;

        pub fn command_line(&self) -> &str {
            match self.command_line.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_command_line(&mut self) {
            self.command_line = ::std::option::Option::None;
        }

        pub fn has_command_line(&self) -> bool {
            self.command_line.is_some()
        }

        // Param is passed by value, moved
        pub fn set_command_line(&mut self, v: ::std::string::String) {
            self.command_line = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_command_line(&mut self) -> &mut ::std::string::String {
            if self.command_line.is_none() {
                self.command_line = ::std::option::Option::Some(::std::string::String::new());
            }
            self.command_line.as_mut().unwrap()
        }

        // Take field
        pub fn take_command_line(&mut self) -> ::std::string::String {
            self.command_line.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string gc_binary = 5;

        pub fn gc_binary(&self) -> &str {
            match self.gc_binary.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_gc_binary(&mut self) {
            self.gc_binary = ::std::option::Option::None;
        }

        pub fn has_gc_binary(&self) -> bool {
            self.gc_binary.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gc_binary(&mut self, v: ::std::string::String) {
            self.gc_binary = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_gc_binary(&mut self) -> &mut ::std::string::String {
            if self.gc_binary.is_none() {
                self.gc_binary = ::std::option::Option::Some(::std::string::String::new());
            }
            self.gc_binary.as_mut().unwrap()
        }

        // Take field
        pub fn take_gc_binary(&mut self) -> ::std::string::String {
            self.gc_binary.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for SubGC {
        const NAME: &'static str = "SubGC";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.dir_index = ::std::option::Option::Some(is.read_int32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.box_ = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.command_line = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.gc_binary = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.dir_index {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.box_.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.command_line.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.gc_binary.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.dir_index {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.box_.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.command_line.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.gc_binary.as_ref() {
                os.write_string(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SubGC {
            SubGC::new()
        }

        fn clear(&mut self) {
            self.dir_index = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.box_ = ::std::option::Option::None;
            self.command_line = ::std::option::Option::None;
            self.gc_binary = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SubGC {
            static instance: SubGC = SubGC {
                dir_index: ::std::option::Option::None,
                name: ::std::option::Option::None,
                box_: ::std::option::Option::None,
                command_line: ::std::option::Option::None,
                gc_binary: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgMasterSetDirectory_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetDirectory_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory_Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetDirectory_Response.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetDirectory_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetDirectory_Response {
    fn default() -> &'a CMsgGCMsgMasterSetDirectory_Response {
        <CMsgGCMsgMasterSetDirectory_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetDirectory_Response {
    pub fn new() -> CMsgGCMsgMasterSetDirectory_Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string message = 2;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgMasterSetDirectory_Response {
    const NAME: &'static str = "CMsgGCMsgMasterSetDirectory_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetDirectory_Response {
        CMsgGCMsgMasterSetDirectory_Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetDirectory_Response {
        static instance: CMsgGCMsgMasterSetDirectory_Response = CMsgGCMsgMasterSetDirectory_Response {
            eresult: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgWebAPIJobRequestForwardResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgWebAPIJobRequestForwardResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgWebAPIJobRequestForwardResponse.dir_index)
    pub dir_index: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgWebAPIJobRequestForwardResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgWebAPIJobRequestForwardResponse {
    fn default() -> &'a CMsgGCMsgWebAPIJobRequestForwardResponse {
        <CMsgGCMsgWebAPIJobRequestForwardResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgWebAPIJobRequestForwardResponse {
    pub fn new() -> CMsgGCMsgWebAPIJobRequestForwardResponse {
        ::std::default::Default::default()
    }

    // optional int32 dir_index = 1;

    pub fn dir_index(&self) -> i32 {
        self.dir_index.unwrap_or(-1i32)
    }

    pub fn clear_dir_index(&mut self) {
        self.dir_index = ::std::option::Option::None;
    }

    pub fn has_dir_index(&self) -> bool {
        self.dir_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dir_index(&mut self, v: i32) {
        self.dir_index = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgWebAPIJobRequestForwardResponse {
    const NAME: &'static str = "CMsgGCMsgWebAPIJobRequestForwardResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.dir_index = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.dir_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.dir_index {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgWebAPIJobRequestForwardResponse {
        CMsgGCMsgWebAPIJobRequestForwardResponse::new()
    }

    fn clear(&mut self) {
        self.dir_index = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgWebAPIJobRequestForwardResponse {
        static instance: CMsgGCMsgWebAPIJobRequestForwardResponse = CMsgGCMsgWebAPIJobRequestForwardResponse {
            dir_index: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCSystemMsg_GetPurchaseTrust_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetPurchaseTrust_Request {
    // message fields
    // @@protoc_insertion_point(field:CGCSystemMsg_GetPurchaseTrust_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCSystemMsg_GetPurchaseTrust_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetPurchaseTrust_Request {
    fn default() -> &'a CGCSystemMsg_GetPurchaseTrust_Request {
        <CGCSystemMsg_GetPurchaseTrust_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetPurchaseTrust_Request {
    pub fn new() -> CGCSystemMsg_GetPurchaseTrust_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCSystemMsg_GetPurchaseTrust_Request {
    const NAME: &'static str = "CGCSystemMsg_GetPurchaseTrust_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetPurchaseTrust_Request {
        CGCSystemMsg_GetPurchaseTrust_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetPurchaseTrust_Request {
        static instance: CGCSystemMsg_GetPurchaseTrust_Request = CGCSystemMsg_GetPurchaseTrust_Request {
            steamid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCSystemMsg_GetPurchaseTrust_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetPurchaseTrust_Response {
    // message fields
    // @@protoc_insertion_point(field:CGCSystemMsg_GetPurchaseTrust_Response.has_prior_purchase_history)
    pub has_prior_purchase_history: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetPurchaseTrust_Response.has_no_recent_password_resets)
    pub has_no_recent_password_resets: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetPurchaseTrust_Response.is_wallet_cash_trusted)
    pub is_wallet_cash_trusted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetPurchaseTrust_Response.time_all_trusted)
    pub time_all_trusted: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCSystemMsg_GetPurchaseTrust_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetPurchaseTrust_Response {
    fn default() -> &'a CGCSystemMsg_GetPurchaseTrust_Response {
        <CGCSystemMsg_GetPurchaseTrust_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetPurchaseTrust_Response {
    pub fn new() -> CGCSystemMsg_GetPurchaseTrust_Response {
        ::std::default::Default::default()
    }

    // optional bool has_prior_purchase_history = 1;

    pub fn has_prior_purchase_history(&self) -> bool {
        self.has_prior_purchase_history.unwrap_or(false)
    }

    pub fn clear_has_prior_purchase_history(&mut self) {
        self.has_prior_purchase_history = ::std::option::Option::None;
    }

    pub fn has_has_prior_purchase_history(&self) -> bool {
        self.has_prior_purchase_history.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_prior_purchase_history(&mut self, v: bool) {
        self.has_prior_purchase_history = ::std::option::Option::Some(v);
    }

    // optional bool has_no_recent_password_resets = 2;

    pub fn has_no_recent_password_resets(&self) -> bool {
        self.has_no_recent_password_resets.unwrap_or(false)
    }

    pub fn clear_has_no_recent_password_resets(&mut self) {
        self.has_no_recent_password_resets = ::std::option::Option::None;
    }

    pub fn has_has_no_recent_password_resets(&self) -> bool {
        self.has_no_recent_password_resets.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_no_recent_password_resets(&mut self, v: bool) {
        self.has_no_recent_password_resets = ::std::option::Option::Some(v);
    }

    // optional bool is_wallet_cash_trusted = 3;

    pub fn is_wallet_cash_trusted(&self) -> bool {
        self.is_wallet_cash_trusted.unwrap_or(false)
    }

    pub fn clear_is_wallet_cash_trusted(&mut self) {
        self.is_wallet_cash_trusted = ::std::option::Option::None;
    }

    pub fn has_is_wallet_cash_trusted(&self) -> bool {
        self.is_wallet_cash_trusted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_wallet_cash_trusted(&mut self, v: bool) {
        self.is_wallet_cash_trusted = ::std::option::Option::Some(v);
    }

    // optional uint32 time_all_trusted = 4;

    pub fn time_all_trusted(&self) -> u32 {
        self.time_all_trusted.unwrap_or(0)
    }

    pub fn clear_time_all_trusted(&mut self) {
        self.time_all_trusted = ::std::option::Option::None;
    }

    pub fn has_time_all_trusted(&self) -> bool {
        self.time_all_trusted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_all_trusted(&mut self, v: u32) {
        self.time_all_trusted = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCSystemMsg_GetPurchaseTrust_Response {
    const NAME: &'static str = "CGCSystemMsg_GetPurchaseTrust_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_prior_purchase_history = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.has_no_recent_password_resets = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.is_wallet_cash_trusted = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.time_all_trusted = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.has_prior_purchase_history {
            my_size += 1 + 1;
        }
        if let Some(v) = self.has_no_recent_password_resets {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_wallet_cash_trusted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.time_all_trusted {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.has_prior_purchase_history {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.has_no_recent_password_resets {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.is_wallet_cash_trusted {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.time_all_trusted {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetPurchaseTrust_Response {
        CGCSystemMsg_GetPurchaseTrust_Response::new()
    }

    fn clear(&mut self) {
        self.has_prior_purchase_history = ::std::option::Option::None;
        self.has_no_recent_password_resets = ::std::option::Option::None;
        self.is_wallet_cash_trusted = ::std::option::Option::None;
        self.time_all_trusted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetPurchaseTrust_Response {
        static instance: CGCSystemMsg_GetPurchaseTrust_Response = CGCSystemMsg_GetPurchaseTrust_Response {
            has_prior_purchase_history: ::std::option::Option::None,
            has_no_recent_password_resets: ::std::option::Option::None,
            is_wallet_cash_trusted: ::std::option::Option::None,
            time_all_trusted: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCHAccountVacStatusChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAccountVacStatusChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHAccountVacStatusChange.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHAccountVacStatusChange.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAccountVacStatusChange.rtime_vacban_starts)
    pub rtime_vacban_starts: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAccountVacStatusChange.is_banned_now)
    pub is_banned_now: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCHAccountVacStatusChange.is_banned_future)
    pub is_banned_future: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHAccountVacStatusChange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAccountVacStatusChange {
    fn default() -> &'a CMsgGCHAccountVacStatusChange {
        <CMsgGCHAccountVacStatusChange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAccountVacStatusChange {
    pub fn new() -> CMsgGCHAccountVacStatusChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_vacban_starts = 3;

    pub fn rtime_vacban_starts(&self) -> u32 {
        self.rtime_vacban_starts.unwrap_or(0)
    }

    pub fn clear_rtime_vacban_starts(&mut self) {
        self.rtime_vacban_starts = ::std::option::Option::None;
    }

    pub fn has_rtime_vacban_starts(&self) -> bool {
        self.rtime_vacban_starts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_vacban_starts(&mut self, v: u32) {
        self.rtime_vacban_starts = ::std::option::Option::Some(v);
    }

    // optional bool is_banned_now = 4;

    pub fn is_banned_now(&self) -> bool {
        self.is_banned_now.unwrap_or(false)
    }

    pub fn clear_is_banned_now(&mut self) {
        self.is_banned_now = ::std::option::Option::None;
    }

    pub fn has_is_banned_now(&self) -> bool {
        self.is_banned_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_banned_now(&mut self, v: bool) {
        self.is_banned_now = ::std::option::Option::Some(v);
    }

    // optional bool is_banned_future = 5;

    pub fn is_banned_future(&self) -> bool {
        self.is_banned_future.unwrap_or(false)
    }

    pub fn clear_is_banned_future(&mut self) {
        self.is_banned_future = ::std::option::Option::None;
    }

    pub fn has_is_banned_future(&self) -> bool {
        self.is_banned_future.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_banned_future(&mut self, v: bool) {
        self.is_banned_future = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHAccountVacStatusChange {
    const NAME: &'static str = "CMsgGCHAccountVacStatusChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.rtime_vacban_starts = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.is_banned_now = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_banned_future = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.rtime_vacban_starts {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.is_banned_now {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_banned_future {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.rtime_vacban_starts {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.is_banned_now {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_banned_future {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAccountVacStatusChange {
        CMsgGCHAccountVacStatusChange::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.rtime_vacban_starts = ::std::option::Option::None;
        self.is_banned_now = ::std::option::Option::None;
        self.is_banned_future = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAccountVacStatusChange {
        static instance: CMsgGCHAccountVacStatusChange = CMsgGCHAccountVacStatusChange {
            steam_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            rtime_vacban_starts: ::std::option::Option::None,
            is_banned_now: ::std::option::Option::None,
            is_banned_future: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetPartnerAccountLink)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPartnerAccountLink {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetPartnerAccountLink.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetPartnerAccountLink.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPartnerAccountLink {
    fn default() -> &'a CMsgGCGetPartnerAccountLink {
        <CMsgGCGetPartnerAccountLink as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPartnerAccountLink {
    pub fn new() -> CMsgGCGetPartnerAccountLink {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetPartnerAccountLink {
    const NAME: &'static str = "CMsgGCGetPartnerAccountLink";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPartnerAccountLink {
        CMsgGCGetPartnerAccountLink::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPartnerAccountLink {
        static instance: CMsgGCGetPartnerAccountLink = CMsgGCGetPartnerAccountLink {
            steamid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCGetPartnerAccountLink_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPartnerAccountLink_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGetPartnerAccountLink_Response.pwid)
    pub pwid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetPartnerAccountLink_Response.nexonid)
    pub nexonid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGetPartnerAccountLink_Response.ageclass)
    pub ageclass: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgGCGetPartnerAccountLink_Response.id_verified)
    pub id_verified: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCGetPartnerAccountLink_Response.is_adult)
    pub is_adult: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGetPartnerAccountLink_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPartnerAccountLink_Response {
    fn default() -> &'a CMsgGCGetPartnerAccountLink_Response {
        <CMsgGCGetPartnerAccountLink_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPartnerAccountLink_Response {
    pub fn new() -> CMsgGCGetPartnerAccountLink_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pwid = 1;

    pub fn pwid(&self) -> u32 {
        self.pwid.unwrap_or(0)
    }

    pub fn clear_pwid(&mut self) {
        self.pwid = ::std::option::Option::None;
    }

    pub fn has_pwid(&self) -> bool {
        self.pwid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pwid(&mut self, v: u32) {
        self.pwid = ::std::option::Option::Some(v);
    }

    // optional uint32 nexonid = 2;

    pub fn nexonid(&self) -> u32 {
        self.nexonid.unwrap_or(0)
    }

    pub fn clear_nexonid(&mut self) {
        self.nexonid = ::std::option::Option::None;
    }

    pub fn has_nexonid(&self) -> bool {
        self.nexonid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nexonid(&mut self, v: u32) {
        self.nexonid = ::std::option::Option::Some(v);
    }

    // optional int32 ageclass = 3;

    pub fn ageclass(&self) -> i32 {
        self.ageclass.unwrap_or(0i32)
    }

    pub fn clear_ageclass(&mut self) {
        self.ageclass = ::std::option::Option::None;
    }

    pub fn has_ageclass(&self) -> bool {
        self.ageclass.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ageclass(&mut self, v: i32) {
        self.ageclass = ::std::option::Option::Some(v);
    }

    // optional bool id_verified = 4;

    pub fn id_verified(&self) -> bool {
        self.id_verified.unwrap_or(true)
    }

    pub fn clear_id_verified(&mut self) {
        self.id_verified = ::std::option::Option::None;
    }

    pub fn has_id_verified(&self) -> bool {
        self.id_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id_verified(&mut self, v: bool) {
        self.id_verified = ::std::option::Option::Some(v);
    }

    // optional bool is_adult = 5;

    pub fn is_adult(&self) -> bool {
        self.is_adult.unwrap_or(true)
    }

    pub fn clear_is_adult(&mut self) {
        self.is_adult = ::std::option::Option::None;
    }

    pub fn has_is_adult(&self) -> bool {
        self.is_adult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_adult(&mut self, v: bool) {
        self.is_adult = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGetPartnerAccountLink_Response {
    const NAME: &'static str = "CMsgGCGetPartnerAccountLink_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pwid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.nexonid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.ageclass = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.id_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_adult = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pwid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.nexonid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.ageclass {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.id_verified {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_adult {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.pwid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.nexonid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.ageclass {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.id_verified {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_adult {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPartnerAccountLink_Response {
        CMsgGCGetPartnerAccountLink_Response::new()
    }

    fn clear(&mut self) {
        self.pwid = ::std::option::Option::None;
        self.nexonid = ::std::option::Option::None;
        self.ageclass = ::std::option::Option::None;
        self.id_verified = ::std::option::Option::None;
        self.is_adult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPartnerAccountLink_Response {
        static instance: CMsgGCGetPartnerAccountLink_Response = CMsgGCGetPartnerAccountLink_Response {
            pwid: ::std::option::Option::None,
            nexonid: ::std::option::Option::None,
            ageclass: ::std::option::Option::None,
            id_verified: ::std::option::Option::None,
            is_adult: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCRoutingInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCRoutingInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCRoutingInfo.dir_index)
    pub dir_index: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgGCRoutingInfo.method)
    pub method: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_gcrouting_info::RoutingMethod>>,
    // @@protoc_insertion_point(field:CMsgGCRoutingInfo.fallback)
    pub fallback: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_gcrouting_info::RoutingMethod>>,
    // @@protoc_insertion_point(field:CMsgGCRoutingInfo.protobuf_field)
    pub protobuf_field: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCRoutingInfo.webapi_param)
    pub webapi_param: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCRoutingInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCRoutingInfo {
    fn default() -> &'a CMsgGCRoutingInfo {
        <CMsgGCRoutingInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCRoutingInfo {
    pub fn new() -> CMsgGCRoutingInfo {
        ::std::default::Default::default()
    }

    // optional .CMsgGCRoutingInfo.RoutingMethod method = 2;

    pub fn method(&self) -> cmsg_gcrouting_info::RoutingMethod {
        match self.method {
            Some(e) => e.enum_value_or(cmsg_gcrouting_info::RoutingMethod::RANDOM),
            None => cmsg_gcrouting_info::RoutingMethod::RANDOM,
        }
    }

    pub fn clear_method(&mut self) {
        self.method = ::std::option::Option::None;
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: cmsg_gcrouting_info::RoutingMethod) {
        self.method = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3;

    pub fn fallback(&self) -> cmsg_gcrouting_info::RoutingMethod {
        match self.fallback {
            Some(e) => e.enum_value_or(cmsg_gcrouting_info::RoutingMethod::DISCARD),
            None => cmsg_gcrouting_info::RoutingMethod::DISCARD,
        }
    }

    pub fn clear_fallback(&mut self) {
        self.fallback = ::std::option::Option::None;
    }

    pub fn has_fallback(&self) -> bool {
        self.fallback.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fallback(&mut self, v: cmsg_gcrouting_info::RoutingMethod) {
        self.fallback = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 protobuf_field = 4;

    pub fn protobuf_field(&self) -> u32 {
        self.protobuf_field.unwrap_or(0)
    }

    pub fn clear_protobuf_field(&mut self) {
        self.protobuf_field = ::std::option::Option::None;
    }

    pub fn has_protobuf_field(&self) -> bool {
        self.protobuf_field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protobuf_field(&mut self, v: u32) {
        self.protobuf_field = ::std::option::Option::Some(v);
    }

    // optional string webapi_param = 5;

    pub fn webapi_param(&self) -> &str {
        match self.webapi_param.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_webapi_param(&mut self) {
        self.webapi_param = ::std::option::Option::None;
    }

    pub fn has_webapi_param(&self) -> bool {
        self.webapi_param.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webapi_param(&mut self, v: ::std::string::String) {
        self.webapi_param = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webapi_param(&mut self) -> &mut ::std::string::String {
        if self.webapi_param.is_none() {
            self.webapi_param = ::std::option::Option::Some(::std::string::String::new());
        }
        self.webapi_param.as_mut().unwrap()
    }

    // Take field
    pub fn take_webapi_param(&mut self) -> ::std::string::String {
        self.webapi_param.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCRoutingInfo {
    const NAME: &'static str = "CMsgGCRoutingInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.dir_index)?;
                },
                8 => {
                    self.dir_index.push(is.read_int32()?);
                },
                16 => {
                    self.method = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.fallback = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.protobuf_field = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.webapi_param = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.dir_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, *value);
        };
        if let Some(v) = self.method {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.fallback {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.protobuf_field {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.webapi_param.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.dir_index {
            os.write_int32(1, *v)?;
        };
        if let Some(v) = self.method {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.fallback {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.protobuf_field {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.webapi_param.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCRoutingInfo {
        CMsgGCRoutingInfo::new()
    }

    fn clear(&mut self) {
        self.dir_index.clear();
        self.method = ::std::option::Option::None;
        self.fallback = ::std::option::Option::None;
        self.protobuf_field = ::std::option::Option::None;
        self.webapi_param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCRoutingInfo {
        static instance: CMsgGCRoutingInfo = CMsgGCRoutingInfo {
            dir_index: ::std::vec::Vec::new(),
            method: ::std::option::Option::None,
            fallback: ::std::option::Option::None,
            protobuf_field: ::std::option::Option::None,
            webapi_param: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCRoutingInfo`
pub mod cmsg_gcrouting_info {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgGCRoutingInfo.RoutingMethod)
    pub enum RoutingMethod {
        // @@protoc_insertion_point(enum_value:CMsgGCRoutingInfo.RoutingMethod.RANDOM)
        RANDOM = 0,
        // @@protoc_insertion_point(enum_value:CMsgGCRoutingInfo.RoutingMethod.DISCARD)
        DISCARD = 1,
        // @@protoc_insertion_point(enum_value:CMsgGCRoutingInfo.RoutingMethod.CLIENT_STEAMID)
        CLIENT_STEAMID = 2,
        // @@protoc_insertion_point(enum_value:CMsgGCRoutingInfo.RoutingMethod.PROTOBUF_FIELD_UINT64)
        PROTOBUF_FIELD_UINT64 = 3,
        // @@protoc_insertion_point(enum_value:CMsgGCRoutingInfo.RoutingMethod.WEBAPI_PARAM)
        WEBAPI_PARAM = 4,
        // @@protoc_insertion_point(enum_value:CMsgGCRoutingInfo.RoutingMethod.WEBAPI_PARAM_STEAMID_ACCOUNTID)
        WEBAPI_PARAM_STEAMID_ACCOUNTID = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for RoutingMethod {
        const NAME: &'static str = "RoutingMethod";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<RoutingMethod> {
            match value {
                0 => ::std::option::Option::Some(RoutingMethod::RANDOM),
                1 => ::std::option::Option::Some(RoutingMethod::DISCARD),
                2 => ::std::option::Option::Some(RoutingMethod::CLIENT_STEAMID),
                3 => ::std::option::Option::Some(RoutingMethod::PROTOBUF_FIELD_UINT64),
                4 => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM),
                5 => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM_STEAMID_ACCOUNTID),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<RoutingMethod> {
            match str {
                "RANDOM" => ::std::option::Option::Some(RoutingMethod::RANDOM),
                "DISCARD" => ::std::option::Option::Some(RoutingMethod::DISCARD),
                "CLIENT_STEAMID" => ::std::option::Option::Some(RoutingMethod::CLIENT_STEAMID),
                "PROTOBUF_FIELD_UINT64" => ::std::option::Option::Some(RoutingMethod::PROTOBUF_FIELD_UINT64),
                "WEBAPI_PARAM" => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM),
                "WEBAPI_PARAM_STEAMID_ACCOUNTID" => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM_STEAMID_ACCOUNTID),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [RoutingMethod] = &[
            RoutingMethod::RANDOM,
            RoutingMethod::DISCARD,
            RoutingMethod::CLIENT_STEAMID,
            RoutingMethod::PROTOBUF_FIELD_UINT64,
            RoutingMethod::WEBAPI_PARAM,
            RoutingMethod::WEBAPI_PARAM_STEAMID_ACCOUNTID,
        ];
    }

    impl ::std::default::Default for RoutingMethod {
        fn default() -> Self {
            RoutingMethod::RANDOM
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCMsgMasterSetWebAPIRouting)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetWebAPIRouting {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetWebAPIRouting.entries)
    pub entries: ::std::vec::Vec<cmsg_gcmsg_master_set_web_apirouting::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetWebAPIRouting.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetWebAPIRouting {
    fn default() -> &'a CMsgGCMsgMasterSetWebAPIRouting {
        <CMsgGCMsgMasterSetWebAPIRouting as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetWebAPIRouting {
    pub fn new() -> CMsgGCMsgMasterSetWebAPIRouting {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgMasterSetWebAPIRouting {
    const NAME: &'static str = "CMsgGCMsgMasterSetWebAPIRouting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.entries {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetWebAPIRouting {
        CMsgGCMsgMasterSetWebAPIRouting::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetWebAPIRouting {
        static instance: CMsgGCMsgMasterSetWebAPIRouting = CMsgGCMsgMasterSetWebAPIRouting {
            entries: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCMsgMasterSetWebAPIRouting`
pub mod cmsg_gcmsg_master_set_web_apirouting {
    // @@protoc_insertion_point(message:CMsgGCMsgMasterSetWebAPIRouting.Entry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Entry {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
        pub interface_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
        pub method_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
        pub routing: ::steam_vent_proto_common::protobuf::MessageField<super::CMsgGCRoutingInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetWebAPIRouting.Entry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        // optional string interface_name = 1;

        pub fn interface_name(&self) -> &str {
            match self.interface_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_interface_name(&mut self) {
            self.interface_name = ::std::option::Option::None;
        }

        pub fn has_interface_name(&self) -> bool {
            self.interface_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_interface_name(&mut self, v: ::std::string::String) {
            self.interface_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_interface_name(&mut self) -> &mut ::std::string::String {
            if self.interface_name.is_none() {
                self.interface_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.interface_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_interface_name(&mut self) -> ::std::string::String {
            self.interface_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string method_name = 2;

        pub fn method_name(&self) -> &str {
            match self.method_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_method_name(&mut self) {
            self.method_name = ::std::option::Option::None;
        }

        pub fn has_method_name(&self) -> bool {
            self.method_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_method_name(&mut self, v: ::std::string::String) {
            self.method_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
            if self.method_name.is_none() {
                self.method_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.method_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_method_name(&mut self) -> ::std::string::String {
            self.method_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.interface_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.method_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.routing)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.interface_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.method_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.routing.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.interface_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.method_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.routing.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.interface_name = ::std::option::Option::None;
            self.method_name = ::std::option::Option::None;
            self.routing.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                interface_name: ::std::option::Option::None,
                method_name: ::std::option::Option::None,
                routing: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgMasterSetClientMsgRouting)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetClientMsgRouting {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetClientMsgRouting.entries)
    pub entries: ::std::vec::Vec<cmsg_gcmsg_master_set_client_msg_routing::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetClientMsgRouting.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetClientMsgRouting {
    fn default() -> &'a CMsgGCMsgMasterSetClientMsgRouting {
        <CMsgGCMsgMasterSetClientMsgRouting as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetClientMsgRouting {
    pub fn new() -> CMsgGCMsgMasterSetClientMsgRouting {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgMasterSetClientMsgRouting {
    const NAME: &'static str = "CMsgGCMsgMasterSetClientMsgRouting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.entries {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetClientMsgRouting {
        CMsgGCMsgMasterSetClientMsgRouting::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetClientMsgRouting {
        static instance: CMsgGCMsgMasterSetClientMsgRouting = CMsgGCMsgMasterSetClientMsgRouting {
            entries: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCMsgMasterSetClientMsgRouting`
pub mod cmsg_gcmsg_master_set_client_msg_routing {
    // @@protoc_insertion_point(message:CMsgGCMsgMasterSetClientMsgRouting.Entry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Entry {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetClientMsgRouting.Entry.msg_type)
        pub msg_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
        pub routing: ::steam_vent_proto_common::protobuf::MessageField<super::CMsgGCRoutingInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetClientMsgRouting.Entry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        // optional uint32 msg_type = 1;

        pub fn msg_type(&self) -> u32 {
            self.msg_type.unwrap_or(0)
        }

        pub fn clear_msg_type(&mut self) {
            self.msg_type = ::std::option::Option::None;
        }

        pub fn has_msg_type(&self) -> bool {
            self.msg_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_msg_type(&mut self, v: u32) {
            self.msg_type = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.msg_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.routing)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.msg_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.routing.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.msg_type {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.routing.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.msg_type = ::std::option::Option::None;
            self.routing.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                msg_type: ::std::option::Option::None,
                routing: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgMasterSetWebAPIRouting_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetWebAPIRouting_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetWebAPIRouting_Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetWebAPIRouting_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetWebAPIRouting_Response {
    fn default() -> &'a CMsgGCMsgMasterSetWebAPIRouting_Response {
        <CMsgGCMsgMasterSetWebAPIRouting_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetWebAPIRouting_Response {
    pub fn new() -> CMsgGCMsgMasterSetWebAPIRouting_Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgMasterSetWebAPIRouting_Response {
    const NAME: &'static str = "CMsgGCMsgMasterSetWebAPIRouting_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetWebAPIRouting_Response {
        CMsgGCMsgMasterSetWebAPIRouting_Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetWebAPIRouting_Response {
        static instance: CMsgGCMsgMasterSetWebAPIRouting_Response = CMsgGCMsgMasterSetWebAPIRouting_Response {
            eresult: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgMasterSetClientMsgRouting_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetClientMsgRouting_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgMasterSetClientMsgRouting_Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgMasterSetClientMsgRouting_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetClientMsgRouting_Response {
    fn default() -> &'a CMsgGCMsgMasterSetClientMsgRouting_Response {
        <CMsgGCMsgMasterSetClientMsgRouting_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetClientMsgRouting_Response {
    pub fn new() -> CMsgGCMsgMasterSetClientMsgRouting_Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgMasterSetClientMsgRouting_Response {
    const NAME: &'static str = "CMsgGCMsgMasterSetClientMsgRouting_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetClientMsgRouting_Response {
        CMsgGCMsgMasterSetClientMsgRouting_Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetClientMsgRouting_Response {
        static instance: CMsgGCMsgMasterSetClientMsgRouting_Response = CMsgGCMsgMasterSetClientMsgRouting_Response {
            eresult: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCMsgSetOptions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgSetOptions {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCMsgSetOptions.options)
    pub options: ::std::vec::Vec<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_gcmsg_set_options::Option>>,
    // @@protoc_insertion_point(field:CMsgGCMsgSetOptions.client_msg_ranges)
    pub client_msg_ranges: ::std::vec::Vec<cmsg_gcmsg_set_options::MessageRange>,
    // @@protoc_insertion_point(field:CMsgGCMsgSetOptions.gcsql_version)
    pub gcsql_version: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_gcmsg_set_options::GCSQLVersion>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCMsgSetOptions.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgSetOptions {
    fn default() -> &'a CMsgGCMsgSetOptions {
        <CMsgGCMsgSetOptions as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgSetOptions {
    pub fn new() -> CMsgGCMsgSetOptions {
        ::std::default::Default::default()
    }

    // optional .CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3;

    pub fn gcsql_version(&self) -> cmsg_gcmsg_set_options::GCSQLVersion {
        match self.gcsql_version {
            Some(e) => e.enum_value_or(cmsg_gcmsg_set_options::GCSQLVersion::GCSQL_VERSION_BASELINE),
            None => cmsg_gcmsg_set_options::GCSQLVersion::GCSQL_VERSION_BASELINE,
        }
    }

    pub fn clear_gcsql_version(&mut self) {
        self.gcsql_version = ::std::option::Option::None;
    }

    pub fn has_gcsql_version(&self) -> bool {
        self.gcsql_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gcsql_version(&mut self, v: cmsg_gcmsg_set_options::GCSQLVersion) {
        self.gcsql_version = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCMsgSetOptions {
    const NAME: &'static str = "CMsgGCMsgSetOptions";

    fn is_initialized(&self) -> bool {
        for v in &self.client_msg_ranges {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.options.push(is.read_enum_or_unknown()?);
                },
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.options)?
                },
                18 => {
                    self.client_msg_ranges.push(is.read_message()?);
                },
                24 => {
                    self.gcsql_version = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.options {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, value.value());
        };
        for value in &self.client_msg_ranges {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.gcsql_version {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.options {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(v))?;
        };
        for v in &self.client_msg_ranges {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.gcsql_version {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgSetOptions {
        CMsgGCMsgSetOptions::new()
    }

    fn clear(&mut self) {
        self.options.clear();
        self.client_msg_ranges.clear();
        self.gcsql_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgSetOptions {
        static instance: CMsgGCMsgSetOptions = CMsgGCMsgSetOptions {
            options: ::std::vec::Vec::new(),
            client_msg_ranges: ::std::vec::Vec::new(),
            gcsql_version: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCMsgSetOptions`
pub mod cmsg_gcmsg_set_options {
    // @@protoc_insertion_point(message:CMsgGCMsgSetOptions.MessageRange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MessageRange {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCMsgSetOptions.MessageRange.low)
        pub low: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgGCMsgSetOptions.MessageRange.high)
        pub high: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCMsgSetOptions.MessageRange.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MessageRange {
        fn default() -> &'a MessageRange {
            <MessageRange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl MessageRange {
        pub fn new() -> MessageRange {
            ::std::default::Default::default()
        }

        // required uint32 low = 1;

        pub fn low(&self) -> u32 {
            self.low.unwrap_or(0)
        }

        pub fn clear_low(&mut self) {
            self.low = ::std::option::Option::None;
        }

        pub fn has_low(&self) -> bool {
            self.low.is_some()
        }

        // Param is passed by value, moved
        pub fn set_low(&mut self, v: u32) {
            self.low = ::std::option::Option::Some(v);
        }

        // required uint32 high = 2;

        pub fn high(&self) -> u32 {
            self.high.unwrap_or(0)
        }

        pub fn clear_high(&mut self) {
            self.high = ::std::option::Option::None;
        }

        pub fn has_high(&self) -> bool {
            self.high.is_some()
        }

        // Param is passed by value, moved
        pub fn set_high(&mut self, v: u32) {
            self.high = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for MessageRange {
        const NAME: &'static str = "MessageRange";

        fn is_initialized(&self) -> bool {
            if self.low.is_none() {
                return false;
            }
            if self.high.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.low = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.high = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.low {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.high {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.low {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.high {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MessageRange {
            MessageRange::new()
        }

        fn clear(&mut self) {
            self.low = ::std::option::Option::None;
            self.high = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MessageRange {
            static instance: MessageRange = MessageRange {
                low: ::std::option::Option::None,
                high: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgGCMsgSetOptions.Option)
    pub enum Option {
        // @@protoc_insertion_point(enum_value:CMsgGCMsgSetOptions.Option.NOTIFY_USER_SESSIONS)
        NOTIFY_USER_SESSIONS = 0,
        // @@protoc_insertion_point(enum_value:CMsgGCMsgSetOptions.Option.NOTIFY_SERVER_SESSIONS)
        NOTIFY_SERVER_SESSIONS = 1,
        // @@protoc_insertion_point(enum_value:CMsgGCMsgSetOptions.Option.NOTIFY_ACHIEVEMENTS)
        NOTIFY_ACHIEVEMENTS = 2,
        // @@protoc_insertion_point(enum_value:CMsgGCMsgSetOptions.Option.NOTIFY_VAC_ACTION)
        NOTIFY_VAC_ACTION = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Option {
        const NAME: &'static str = "Option";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Option> {
            match value {
                0 => ::std::option::Option::Some(Option::NOTIFY_USER_SESSIONS),
                1 => ::std::option::Option::Some(Option::NOTIFY_SERVER_SESSIONS),
                2 => ::std::option::Option::Some(Option::NOTIFY_ACHIEVEMENTS),
                3 => ::std::option::Option::Some(Option::NOTIFY_VAC_ACTION),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Option> {
            match str {
                "NOTIFY_USER_SESSIONS" => ::std::option::Option::Some(Option::NOTIFY_USER_SESSIONS),
                "NOTIFY_SERVER_SESSIONS" => ::std::option::Option::Some(Option::NOTIFY_SERVER_SESSIONS),
                "NOTIFY_ACHIEVEMENTS" => ::std::option::Option::Some(Option::NOTIFY_ACHIEVEMENTS),
                "NOTIFY_VAC_ACTION" => ::std::option::Option::Some(Option::NOTIFY_VAC_ACTION),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Option] = &[
            Option::NOTIFY_USER_SESSIONS,
            Option::NOTIFY_SERVER_SESSIONS,
            Option::NOTIFY_ACHIEVEMENTS,
            Option::NOTIFY_VAC_ACTION,
        ];
    }

    impl ::std::default::Default for Option {
        fn default() -> Self {
            Option::NOTIFY_USER_SESSIONS
        }
    }


    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgGCMsgSetOptions.GCSQLVersion)
    pub enum GCSQLVersion {
        // @@protoc_insertion_point(enum_value:CMsgGCMsgSetOptions.GCSQLVersion.GCSQL_VERSION_BASELINE)
        GCSQL_VERSION_BASELINE = 1,
        // @@protoc_insertion_point(enum_value:CMsgGCMsgSetOptions.GCSQLVersion.GCSQL_VERSION_BOOLTYPE)
        GCSQL_VERSION_BOOLTYPE = 2,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for GCSQLVersion {
        const NAME: &'static str = "GCSQLVersion";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<GCSQLVersion> {
            match value {
                1 => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BASELINE),
                2 => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BOOLTYPE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<GCSQLVersion> {
            match str {
                "GCSQL_VERSION_BASELINE" => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BASELINE),
                "GCSQL_VERSION_BOOLTYPE" => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BOOLTYPE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [GCSQLVersion] = &[
            GCSQLVersion::GCSQL_VERSION_BASELINE,
            GCSQLVersion::GCSQL_VERSION_BOOLTYPE,
        ];
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for GCSQLVersion {
        fn default() -> Self {
            GCSQLVersion::GCSQL_VERSION_BASELINE
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCHUpdateSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHUpdateSession {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.online)
    pub online: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.server_addr)
    pub server_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.server_port)
    pub server_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.os_type)
    pub os_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.client_addr)
    pub client_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHUpdateSession.extra_fields)
    pub extra_fields: ::std::vec::Vec<cmsg_gchupdate_session::ExtraField>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHUpdateSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHUpdateSession {
    fn default() -> &'a CMsgGCHUpdateSession {
        <CMsgGCHUpdateSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHUpdateSession {
    pub fn new() -> CMsgGCHUpdateSession {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional bool online = 3;

    pub fn online(&self) -> bool {
        self.online.unwrap_or(false)
    }

    pub fn clear_online(&mut self) {
        self.online = ::std::option::Option::None;
    }

    pub fn has_online(&self) -> bool {
        self.online.is_some()
    }

    // Param is passed by value, moved
    pub fn set_online(&mut self, v: bool) {
        self.online = ::std::option::Option::Some(v);
    }

    // optional fixed64 server_steam_id = 4;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 server_addr = 5;

    pub fn server_addr(&self) -> u32 {
        self.server_addr.unwrap_or(0)
    }

    pub fn clear_server_addr(&mut self) {
        self.server_addr = ::std::option::Option::None;
    }

    pub fn has_server_addr(&self) -> bool {
        self.server_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_addr(&mut self, v: u32) {
        self.server_addr = ::std::option::Option::Some(v);
    }

    // optional uint32 server_port = 6;

    pub fn server_port(&self) -> u32 {
        self.server_port.unwrap_or(0)
    }

    pub fn clear_server_port(&mut self) {
        self.server_port = ::std::option::Option::None;
    }

    pub fn has_server_port(&self) -> bool {
        self.server_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_port(&mut self, v: u32) {
        self.server_port = ::std::option::Option::Some(v);
    }

    // optional uint32 os_type = 7;

    pub fn os_type(&self) -> u32 {
        self.os_type.unwrap_or(0)
    }

    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: u32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 client_addr = 8;

    pub fn client_addr(&self) -> u32 {
        self.client_addr.unwrap_or(0)
    }

    pub fn clear_client_addr(&mut self) {
        self.client_addr = ::std::option::Option::None;
    }

    pub fn has_client_addr(&self) -> bool {
        self.client_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_addr(&mut self, v: u32) {
        self.client_addr = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHUpdateSession {
    const NAME: &'static str = "CMsgGCHUpdateSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.online = ::std::option::Option::Some(is.read_bool()?);
                },
                33 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.server_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.server_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.os_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.client_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.extra_fields.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.online {
            my_size += 1 + 1;
        }
        if let Some(v) = self.server_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.server_addr {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.server_port {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.os_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.client_addr {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        for value in &self.extra_fields {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.online {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.server_addr {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.server_port {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.client_addr {
            os.write_uint32(8, v)?;
        }
        for v in &self.extra_fields {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHUpdateSession {
        CMsgGCHUpdateSession::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.online = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.server_addr = ::std::option::Option::None;
        self.server_port = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.client_addr = ::std::option::Option::None;
        self.extra_fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHUpdateSession {
        static instance: CMsgGCHUpdateSession = CMsgGCHUpdateSession {
            steam_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            online: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            server_addr: ::std::option::Option::None,
            server_port: ::std::option::Option::None,
            os_type: ::std::option::Option::None,
            client_addr: ::std::option::Option::None,
            extra_fields: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCHUpdateSession`
pub mod cmsg_gchupdate_session {
    // @@protoc_insertion_point(message:CMsgGCHUpdateSession.ExtraField)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ExtraField {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCHUpdateSession.ExtraField.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGCHUpdateSession.ExtraField.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCHUpdateSession.ExtraField.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ExtraField {
        fn default() -> &'a ExtraField {
            <ExtraField as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ExtraField {
        pub fn new() -> ExtraField {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ExtraField {
        const NAME: &'static str = "ExtraField";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ExtraField {
            ExtraField::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ExtraField {
            static instance: ExtraField = ExtraField {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgNotificationOfSuspiciousActivity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgNotificationOfSuspiciousActivity {
    // message fields
    // @@protoc_insertion_point(field:CMsgNotificationOfSuspiciousActivity.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgNotificationOfSuspiciousActivity.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgNotificationOfSuspiciousActivity.multiple_instances)
    pub multiple_instances: ::steam_vent_proto_common::protobuf::MessageField<cmsg_notification_of_suspicious_activity::MultipleGameInstances>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgNotificationOfSuspiciousActivity.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgNotificationOfSuspiciousActivity {
    fn default() -> &'a CMsgNotificationOfSuspiciousActivity {
        <CMsgNotificationOfSuspiciousActivity as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgNotificationOfSuspiciousActivity {
    pub fn new() -> CMsgNotificationOfSuspiciousActivity {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgNotificationOfSuspiciousActivity {
    const NAME: &'static str = "CMsgNotificationOfSuspiciousActivity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.multiple_instances)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.multiple_instances.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.multiple_instances.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgNotificationOfSuspiciousActivity {
        CMsgNotificationOfSuspiciousActivity::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.multiple_instances.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgNotificationOfSuspiciousActivity {
        static instance: CMsgNotificationOfSuspiciousActivity = CMsgNotificationOfSuspiciousActivity {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            multiple_instances: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgNotificationOfSuspiciousActivity`
pub mod cmsg_notification_of_suspicious_activity {
    // @@protoc_insertion_point(message:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MultipleGameInstances {
        // message fields
        // @@protoc_insertion_point(field:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.app_instance_count)
        pub app_instance_count: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
        pub other_steamids: ::std::vec::Vec<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MultipleGameInstances {
        fn default() -> &'a MultipleGameInstances {
            <MultipleGameInstances as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl MultipleGameInstances {
        pub fn new() -> MultipleGameInstances {
            ::std::default::Default::default()
        }

        // optional uint32 app_instance_count = 1;

        pub fn app_instance_count(&self) -> u32 {
            self.app_instance_count.unwrap_or(0)
        }

        pub fn clear_app_instance_count(&mut self) {
            self.app_instance_count = ::std::option::Option::None;
        }

        pub fn has_app_instance_count(&self) -> bool {
            self.app_instance_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_instance_count(&mut self, v: u32) {
            self.app_instance_count = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for MultipleGameInstances {
        const NAME: &'static str = "MultipleGameInstances";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.app_instance_count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        is.read_repeated_packed_fixed64_into(&mut self.other_steamids)?;
                    },
                    17 => {
                        self.other_steamids.push(is.read_fixed64()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.app_instance_count {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            my_size += 9 * self.other_steamids.len() as u64;
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.app_instance_count {
                os.write_uint32(1, v)?;
            }
            for v in &self.other_steamids {
                os.write_fixed64(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MultipleGameInstances {
            MultipleGameInstances::new()
        }

        fn clear(&mut self) {
            self.app_instance_count = ::std::option::Option::None;
            self.other_steamids.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MultipleGameInstances {
            static instance: MultipleGameInstances = MultipleGameInstances {
                app_instance_count: ::std::option::Option::None,
                other_steamids: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDPPartnerMicroTxns)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDPPartnerMicroTxns {
    // message fields
    // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.gc_name)
    pub gc_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.partner)
    pub partner: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dppartner_micro_txns::PartnerInfo>,
    // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.transactions)
    pub transactions: ::std::vec::Vec<cmsg_dppartner_micro_txns::PartnerMicroTxn>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDPPartnerMicroTxns.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDPPartnerMicroTxns {
    fn default() -> &'a CMsgDPPartnerMicroTxns {
        <CMsgDPPartnerMicroTxns as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDPPartnerMicroTxns {
    pub fn new() -> CMsgDPPartnerMicroTxns {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gc_name = 2;

    pub fn gc_name(&self) -> &str {
        match self.gc_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gc_name(&mut self) {
        self.gc_name = ::std::option::Option::None;
    }

    pub fn has_gc_name(&self) -> bool {
        self.gc_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_name(&mut self, v: ::std::string::String) {
        self.gc_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gc_name(&mut self) -> &mut ::std::string::String {
        if self.gc_name.is_none() {
            self.gc_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gc_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_gc_name(&mut self) -> ::std::string::String {
        self.gc_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDPPartnerMicroTxns {
    const NAME: &'static str = "CMsgDPPartnerMicroTxns";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gc_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.partner)?;
                },
                34 => {
                    self.transactions.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gc_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.partner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gc_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.partner.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.transactions {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDPPartnerMicroTxns {
        CMsgDPPartnerMicroTxns::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gc_name = ::std::option::Option::None;
        self.partner.clear();
        self.transactions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDPPartnerMicroTxns {
        static instance: CMsgDPPartnerMicroTxns = CMsgDPPartnerMicroTxns {
            appid: ::std::option::Option::None,
            gc_name: ::std::option::Option::None,
            partner: ::steam_vent_proto_common::protobuf::MessageField::none(),
            transactions: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDPPartnerMicroTxns`
pub mod cmsg_dppartner_micro_txns {
    // @@protoc_insertion_point(message:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PartnerMicroTxn {
        // message fields
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.init_time)
        pub init_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.last_update_time)
        pub last_update_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.txn_id)
        pub txn_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.line_item)
        pub line_item: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.item_id)
        pub item_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.def_index)
        pub def_index: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.price)
        pub price: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax)
        pub tax: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.price_usd)
        pub price_usd: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax_usd)
        pub tax_usd: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.purchase_type)
        pub purchase_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.steam_txn_type)
        pub steam_txn_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
        pub country_code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
        pub region_code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.quantity)
        pub quantity: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.ref_trans_id)
        pub ref_trans_id: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDPPartnerMicroTxns.PartnerMicroTxn.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PartnerMicroTxn {
        fn default() -> &'a PartnerMicroTxn {
            <PartnerMicroTxn as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PartnerMicroTxn {
        pub fn new() -> PartnerMicroTxn {
            ::std::default::Default::default()
        }

        // optional uint32 init_time = 1;

        pub fn init_time(&self) -> u32 {
            self.init_time.unwrap_or(0)
        }

        pub fn clear_init_time(&mut self) {
            self.init_time = ::std::option::Option::None;
        }

        pub fn has_init_time(&self) -> bool {
            self.init_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_init_time(&mut self, v: u32) {
            self.init_time = ::std::option::Option::Some(v);
        }

        // optional uint32 last_update_time = 2;

        pub fn last_update_time(&self) -> u32 {
            self.last_update_time.unwrap_or(0)
        }

        pub fn clear_last_update_time(&mut self) {
            self.last_update_time = ::std::option::Option::None;
        }

        pub fn has_last_update_time(&self) -> bool {
            self.last_update_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_update_time(&mut self, v: u32) {
            self.last_update_time = ::std::option::Option::Some(v);
        }

        // optional uint64 txn_id = 3;

        pub fn txn_id(&self) -> u64 {
            self.txn_id.unwrap_or(0)
        }

        pub fn clear_txn_id(&mut self) {
            self.txn_id = ::std::option::Option::None;
        }

        pub fn has_txn_id(&self) -> bool {
            self.txn_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_txn_id(&mut self, v: u64) {
            self.txn_id = ::std::option::Option::Some(v);
        }

        // optional uint32 account_id = 4;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 line_item = 5;

        pub fn line_item(&self) -> u32 {
            self.line_item.unwrap_or(0)
        }

        pub fn clear_line_item(&mut self) {
            self.line_item = ::std::option::Option::None;
        }

        pub fn has_line_item(&self) -> bool {
            self.line_item.is_some()
        }

        // Param is passed by value, moved
        pub fn set_line_item(&mut self, v: u32) {
            self.line_item = ::std::option::Option::Some(v);
        }

        // optional uint64 item_id = 6;

        pub fn item_id(&self) -> u64 {
            self.item_id.unwrap_or(0)
        }

        pub fn clear_item_id(&mut self) {
            self.item_id = ::std::option::Option::None;
        }

        pub fn has_item_id(&self) -> bool {
            self.item_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_item_id(&mut self, v: u64) {
            self.item_id = ::std::option::Option::Some(v);
        }

        // optional uint32 def_index = 7;

        pub fn def_index(&self) -> u32 {
            self.def_index.unwrap_or(0)
        }

        pub fn clear_def_index(&mut self) {
            self.def_index = ::std::option::Option::None;
        }

        pub fn has_def_index(&self) -> bool {
            self.def_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_def_index(&mut self, v: u32) {
            self.def_index = ::std::option::Option::Some(v);
        }

        // optional uint64 price = 8;

        pub fn price(&self) -> u64 {
            self.price.unwrap_or(0)
        }

        pub fn clear_price(&mut self) {
            self.price = ::std::option::Option::None;
        }

        pub fn has_price(&self) -> bool {
            self.price.is_some()
        }

        // Param is passed by value, moved
        pub fn set_price(&mut self, v: u64) {
            self.price = ::std::option::Option::Some(v);
        }

        // optional uint64 tax = 9;

        pub fn tax(&self) -> u64 {
            self.tax.unwrap_or(0)
        }

        pub fn clear_tax(&mut self) {
            self.tax = ::std::option::Option::None;
        }

        pub fn has_tax(&self) -> bool {
            self.tax.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tax(&mut self, v: u64) {
            self.tax = ::std::option::Option::Some(v);
        }

        // optional uint64 price_usd = 10;

        pub fn price_usd(&self) -> u64 {
            self.price_usd.unwrap_or(0)
        }

        pub fn clear_price_usd(&mut self) {
            self.price_usd = ::std::option::Option::None;
        }

        pub fn has_price_usd(&self) -> bool {
            self.price_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_price_usd(&mut self, v: u64) {
            self.price_usd = ::std::option::Option::Some(v);
        }

        // optional uint64 tax_usd = 11;

        pub fn tax_usd(&self) -> u64 {
            self.tax_usd.unwrap_or(0)
        }

        pub fn clear_tax_usd(&mut self) {
            self.tax_usd = ::std::option::Option::None;
        }

        pub fn has_tax_usd(&self) -> bool {
            self.tax_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tax_usd(&mut self, v: u64) {
            self.tax_usd = ::std::option::Option::Some(v);
        }

        // optional uint32 purchase_type = 12;

        pub fn purchase_type(&self) -> u32 {
            self.purchase_type.unwrap_or(0)
        }

        pub fn clear_purchase_type(&mut self) {
            self.purchase_type = ::std::option::Option::None;
        }

        pub fn has_purchase_type(&self) -> bool {
            self.purchase_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_purchase_type(&mut self, v: u32) {
            self.purchase_type = ::std::option::Option::Some(v);
        }

        // optional uint32 steam_txn_type = 13;

        pub fn steam_txn_type(&self) -> u32 {
            self.steam_txn_type.unwrap_or(0)
        }

        pub fn clear_steam_txn_type(&mut self) {
            self.steam_txn_type = ::std::option::Option::None;
        }

        pub fn has_steam_txn_type(&self) -> bool {
            self.steam_txn_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_txn_type(&mut self, v: u32) {
            self.steam_txn_type = ::std::option::Option::Some(v);
        }

        // optional string country_code = 14;

        pub fn country_code(&self) -> &str {
            match self.country_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_country_code(&mut self) {
            self.country_code = ::std::option::Option::None;
        }

        pub fn has_country_code(&self) -> bool {
            self.country_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_country_code(&mut self, v: ::std::string::String) {
            self.country_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
            if self.country_code.is_none() {
                self.country_code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.country_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_country_code(&mut self) -> ::std::string::String {
            self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string region_code = 15;

        pub fn region_code(&self) -> &str {
            match self.region_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_region_code(&mut self) {
            self.region_code = ::std::option::Option::None;
        }

        pub fn has_region_code(&self) -> bool {
            self.region_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_region_code(&mut self, v: ::std::string::String) {
            self.region_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_region_code(&mut self) -> &mut ::std::string::String {
            if self.region_code.is_none() {
                self.region_code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.region_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_region_code(&mut self) -> ::std::string::String {
            self.region_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 quantity = 16;

        pub fn quantity(&self) -> i32 {
            self.quantity.unwrap_or(0)
        }

        pub fn clear_quantity(&mut self) {
            self.quantity = ::std::option::Option::None;
        }

        pub fn has_quantity(&self) -> bool {
            self.quantity.is_some()
        }

        // Param is passed by value, moved
        pub fn set_quantity(&mut self, v: i32) {
            self.quantity = ::std::option::Option::Some(v);
        }

        // optional uint64 ref_trans_id = 17;

        pub fn ref_trans_id(&self) -> u64 {
            self.ref_trans_id.unwrap_or(0)
        }

        pub fn clear_ref_trans_id(&mut self) {
            self.ref_trans_id = ::std::option::Option::None;
        }

        pub fn has_ref_trans_id(&self) -> bool {
            self.ref_trans_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ref_trans_id(&mut self, v: u64) {
            self.ref_trans_id = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PartnerMicroTxn {
        const NAME: &'static str = "PartnerMicroTxn";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.init_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.last_update_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.txn_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.line_item = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.item_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    56 => {
                        self.def_index = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.price = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    72 => {
                        self.tax = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    80 => {
                        self.price_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    88 => {
                        self.tax_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    96 => {
                        self.purchase_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    104 => {
                        self.steam_txn_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    114 => {
                        self.country_code = ::std::option::Option::Some(is.read_string()?);
                    },
                    122 => {
                        self.region_code = ::std::option::Option::Some(is.read_string()?);
                    },
                    128 => {
                        self.quantity = ::std::option::Option::Some(is.read_int32()?);
                    },
                    136 => {
                        self.ref_trans_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.init_time {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.last_update_time {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.txn_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.line_item {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.item_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(6, v);
            }
            if let Some(v) = self.def_index {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.price {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(8, v);
            }
            if let Some(v) = self.tax {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(9, v);
            }
            if let Some(v) = self.price_usd {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(10, v);
            }
            if let Some(v) = self.tax_usd {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(11, v);
            }
            if let Some(v) = self.purchase_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(12, v);
            }
            if let Some(v) = self.steam_txn_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(13, v);
            }
            if let Some(v) = self.country_code.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(14, &v);
            }
            if let Some(v) = self.region_code.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(15, &v);
            }
            if let Some(v) = self.quantity {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(16, v);
            }
            if let Some(v) = self.ref_trans_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(17, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.init_time {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.last_update_time {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.txn_id {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.account_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.line_item {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.item_id {
                os.write_uint64(6, v)?;
            }
            if let Some(v) = self.def_index {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.price {
                os.write_uint64(8, v)?;
            }
            if let Some(v) = self.tax {
                os.write_uint64(9, v)?;
            }
            if let Some(v) = self.price_usd {
                os.write_uint64(10, v)?;
            }
            if let Some(v) = self.tax_usd {
                os.write_uint64(11, v)?;
            }
            if let Some(v) = self.purchase_type {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.steam_txn_type {
                os.write_uint32(13, v)?;
            }
            if let Some(v) = self.country_code.as_ref() {
                os.write_string(14, v)?;
            }
            if let Some(v) = self.region_code.as_ref() {
                os.write_string(15, v)?;
            }
            if let Some(v) = self.quantity {
                os.write_int32(16, v)?;
            }
            if let Some(v) = self.ref_trans_id {
                os.write_uint64(17, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PartnerMicroTxn {
            PartnerMicroTxn::new()
        }

        fn clear(&mut self) {
            self.init_time = ::std::option::Option::None;
            self.last_update_time = ::std::option::Option::None;
            self.txn_id = ::std::option::Option::None;
            self.account_id = ::std::option::Option::None;
            self.line_item = ::std::option::Option::None;
            self.item_id = ::std::option::Option::None;
            self.def_index = ::std::option::Option::None;
            self.price = ::std::option::Option::None;
            self.tax = ::std::option::Option::None;
            self.price_usd = ::std::option::Option::None;
            self.tax_usd = ::std::option::Option::None;
            self.purchase_type = ::std::option::Option::None;
            self.steam_txn_type = ::std::option::Option::None;
            self.country_code = ::std::option::Option::None;
            self.region_code = ::std::option::Option::None;
            self.quantity = ::std::option::Option::None;
            self.ref_trans_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PartnerMicroTxn {
            static instance: PartnerMicroTxn = PartnerMicroTxn {
                init_time: ::std::option::Option::None,
                last_update_time: ::std::option::Option::None,
                txn_id: ::std::option::Option::None,
                account_id: ::std::option::Option::None,
                line_item: ::std::option::Option::None,
                item_id: ::std::option::Option::None,
                def_index: ::std::option::Option::None,
                price: ::std::option::Option::None,
                tax: ::std::option::Option::None,
                price_usd: ::std::option::Option::None,
                tax_usd: ::std::option::Option::None,
                purchase_type: ::std::option::Option::None,
                steam_txn_type: ::std::option::Option::None,
                country_code: ::std::option::Option::None,
                region_code: ::std::option::Option::None,
                quantity: ::std::option::Option::None,
                ref_trans_id: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDPPartnerMicroTxns.PartnerInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PartnerInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerInfo.partner_id)
        pub partner_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
        pub partner_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
        pub currency_code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
        pub currency_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDPPartnerMicroTxns.PartnerInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PartnerInfo {
        fn default() -> &'a PartnerInfo {
            <PartnerInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PartnerInfo {
        pub fn new() -> PartnerInfo {
            ::std::default::Default::default()
        }

        // optional uint32 partner_id = 1;

        pub fn partner_id(&self) -> u32 {
            self.partner_id.unwrap_or(0)
        }

        pub fn clear_partner_id(&mut self) {
            self.partner_id = ::std::option::Option::None;
        }

        pub fn has_partner_id(&self) -> bool {
            self.partner_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_partner_id(&mut self, v: u32) {
            self.partner_id = ::std::option::Option::Some(v);
        }

        // optional string partner_name = 2;

        pub fn partner_name(&self) -> &str {
            match self.partner_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_partner_name(&mut self) {
            self.partner_name = ::std::option::Option::None;
        }

        pub fn has_partner_name(&self) -> bool {
            self.partner_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_partner_name(&mut self, v: ::std::string::String) {
            self.partner_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_partner_name(&mut self) -> &mut ::std::string::String {
            if self.partner_name.is_none() {
                self.partner_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.partner_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_partner_name(&mut self) -> ::std::string::String {
            self.partner_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string currency_code = 3;

        pub fn currency_code(&self) -> &str {
            match self.currency_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_currency_code(&mut self) {
            self.currency_code = ::std::option::Option::None;
        }

        pub fn has_currency_code(&self) -> bool {
            self.currency_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_currency_code(&mut self, v: ::std::string::String) {
            self.currency_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_currency_code(&mut self) -> &mut ::std::string::String {
            if self.currency_code.is_none() {
                self.currency_code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.currency_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_currency_code(&mut self) -> ::std::string::String {
            self.currency_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string currency_name = 4;

        pub fn currency_name(&self) -> &str {
            match self.currency_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_currency_name(&mut self) {
            self.currency_name = ::std::option::Option::None;
        }

        pub fn has_currency_name(&self) -> bool {
            self.currency_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_currency_name(&mut self, v: ::std::string::String) {
            self.currency_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_currency_name(&mut self) -> &mut ::std::string::String {
            if self.currency_name.is_none() {
                self.currency_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.currency_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_currency_name(&mut self) -> ::std::string::String {
            self.currency_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PartnerInfo {
        const NAME: &'static str = "PartnerInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.partner_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.partner_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.currency_code = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.currency_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.partner_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.partner_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.currency_code.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.currency_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.partner_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.partner_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.currency_code.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.currency_name.as_ref() {
                os.write_string(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PartnerInfo {
            PartnerInfo::new()
        }

        fn clear(&mut self) {
            self.partner_id = ::std::option::Option::None;
            self.partner_name = ::std::option::Option::None;
            self.currency_code = ::std::option::Option::None;
            self.currency_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PartnerInfo {
            static instance: PartnerInfo = PartnerInfo {
                partner_id: ::std::option::Option::None,
                partner_name: ::std::option::Option::None,
                currency_code: ::std::option::Option::None,
                currency_name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDPPartnerMicroTxnsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDPPartnerMicroTxnsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxnsResponse.eresult)
    pub eresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDPPartnerMicroTxnsResponse.eerrorcode)
    pub eerrorcode: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dppartner_micro_txns_response::EErrorCode>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDPPartnerMicroTxnsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDPPartnerMicroTxnsResponse {
    fn default() -> &'a CMsgDPPartnerMicroTxnsResponse {
        <CMsgDPPartnerMicroTxnsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDPPartnerMicroTxnsResponse {
    pub fn new() -> CMsgDPPartnerMicroTxnsResponse {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(2u32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2;

    pub fn eerrorcode(&self) -> cmsg_dppartner_micro_txns_response::EErrorCode {
        match self.eerrorcode {
            Some(e) => e.enum_value_or(cmsg_dppartner_micro_txns_response::EErrorCode::k_MsgValid),
            None => cmsg_dppartner_micro_txns_response::EErrorCode::k_MsgValid,
        }
    }

    pub fn clear_eerrorcode(&mut self) {
        self.eerrorcode = ::std::option::Option::None;
    }

    pub fn has_eerrorcode(&self) -> bool {
        self.eerrorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eerrorcode(&mut self, v: cmsg_dppartner_micro_txns_response::EErrorCode) {
        self.eerrorcode = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDPPartnerMicroTxnsResponse {
    const NAME: &'static str = "CMsgDPPartnerMicroTxnsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.eerrorcode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.eerrorcode {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.eerrorcode {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDPPartnerMicroTxnsResponse {
        CMsgDPPartnerMicroTxnsResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.eerrorcode = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDPPartnerMicroTxnsResponse {
        static instance: CMsgDPPartnerMicroTxnsResponse = CMsgDPPartnerMicroTxnsResponse {
            eresult: ::std::option::Option::None,
            eerrorcode: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDPPartnerMicroTxnsResponse`
pub mod cmsg_dppartner_micro_txns_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDPPartnerMicroTxnsResponse.EErrorCode)
    pub enum EErrorCode {
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgValid)
        k_MsgValid = 0,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgInvalidAppID)
        k_MsgInvalidAppID = 1,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgInvalidPartnerInfo)
        k_MsgInvalidPartnerInfo = 2,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgNoTransactions)
        k_MsgNoTransactions = 3,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgSQLFailure)
        k_MsgSQLFailure = 4,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgPartnerInfoDiscrepancy)
        k_MsgPartnerInfoDiscrepancy = 5,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgTransactionInsertFailed)
        k_MsgTransactionInsertFailed = 7,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgAlreadyRunning)
        k_MsgAlreadyRunning = 8,
        // @@protoc_insertion_point(enum_value:CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgInvalidTransactionData)
        k_MsgInvalidTransactionData = 9,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EErrorCode {
        const NAME: &'static str = "EErrorCode";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EErrorCode> {
            match value {
                0 => ::std::option::Option::Some(EErrorCode::k_MsgValid),
                1 => ::std::option::Option::Some(EErrorCode::k_MsgInvalidAppID),
                2 => ::std::option::Option::Some(EErrorCode::k_MsgInvalidPartnerInfo),
                3 => ::std::option::Option::Some(EErrorCode::k_MsgNoTransactions),
                4 => ::std::option::Option::Some(EErrorCode::k_MsgSQLFailure),
                5 => ::std::option::Option::Some(EErrorCode::k_MsgPartnerInfoDiscrepancy),
                7 => ::std::option::Option::Some(EErrorCode::k_MsgTransactionInsertFailed),
                8 => ::std::option::Option::Some(EErrorCode::k_MsgAlreadyRunning),
                9 => ::std::option::Option::Some(EErrorCode::k_MsgInvalidTransactionData),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EErrorCode> {
            match str {
                "k_MsgValid" => ::std::option::Option::Some(EErrorCode::k_MsgValid),
                "k_MsgInvalidAppID" => ::std::option::Option::Some(EErrorCode::k_MsgInvalidAppID),
                "k_MsgInvalidPartnerInfo" => ::std::option::Option::Some(EErrorCode::k_MsgInvalidPartnerInfo),
                "k_MsgNoTransactions" => ::std::option::Option::Some(EErrorCode::k_MsgNoTransactions),
                "k_MsgSQLFailure" => ::std::option::Option::Some(EErrorCode::k_MsgSQLFailure),
                "k_MsgPartnerInfoDiscrepancy" => ::std::option::Option::Some(EErrorCode::k_MsgPartnerInfoDiscrepancy),
                "k_MsgTransactionInsertFailed" => ::std::option::Option::Some(EErrorCode::k_MsgTransactionInsertFailed),
                "k_MsgAlreadyRunning" => ::std::option::Option::Some(EErrorCode::k_MsgAlreadyRunning),
                "k_MsgInvalidTransactionData" => ::std::option::Option::Some(EErrorCode::k_MsgInvalidTransactionData),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EErrorCode] = &[
            EErrorCode::k_MsgValid,
            EErrorCode::k_MsgInvalidAppID,
            EErrorCode::k_MsgInvalidPartnerInfo,
            EErrorCode::k_MsgNoTransactions,
            EErrorCode::k_MsgSQLFailure,
            EErrorCode::k_MsgPartnerInfoDiscrepancy,
            EErrorCode::k_MsgTransactionInsertFailed,
            EErrorCode::k_MsgAlreadyRunning,
            EErrorCode::k_MsgInvalidTransactionData,
        ];
    }

    impl ::std::default::Default for EErrorCode {
        fn default() -> Self {
            EErrorCode::k_MsgValid
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCHVacVerificationChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHVacVerificationChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHVacVerificationChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHVacVerificationChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHVacVerificationChange.is_verified)
    pub is_verified: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHVacVerificationChange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHVacVerificationChange {
    fn default() -> &'a CMsgGCHVacVerificationChange {
        <CMsgGCHVacVerificationChange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHVacVerificationChange {
    pub fn new() -> CMsgGCHVacVerificationChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_verified = 3;

    pub fn is_verified(&self) -> bool {
        self.is_verified.unwrap_or(false)
    }

    pub fn clear_is_verified(&mut self) {
        self.is_verified = ::std::option::Option::None;
    }

    pub fn has_is_verified(&self) -> bool {
        self.is_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_verified(&mut self, v: bool) {
        self.is_verified = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHVacVerificationChange {
    const NAME: &'static str = "CMsgGCHVacVerificationChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.is_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.is_verified {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.is_verified {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHVacVerificationChange {
        CMsgGCHVacVerificationChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.is_verified = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHVacVerificationChange {
        static instance: CMsgGCHVacVerificationChange = CMsgGCHVacVerificationChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            is_verified: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCHAccountTwoFactorChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAccountTwoFactorChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHAccountTwoFactorChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHAccountTwoFactorChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAccountTwoFactorChange.twofactor_enabled)
    pub twofactor_enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHAccountTwoFactorChange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAccountTwoFactorChange {
    fn default() -> &'a CMsgGCHAccountTwoFactorChange {
        <CMsgGCHAccountTwoFactorChange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAccountTwoFactorChange {
    pub fn new() -> CMsgGCHAccountTwoFactorChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool twofactor_enabled = 3;

    pub fn twofactor_enabled(&self) -> bool {
        self.twofactor_enabled.unwrap_or(false)
    }

    pub fn clear_twofactor_enabled(&mut self) {
        self.twofactor_enabled = ::std::option::Option::None;
    }

    pub fn has_twofactor_enabled(&self) -> bool {
        self.twofactor_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_twofactor_enabled(&mut self, v: bool) {
        self.twofactor_enabled = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHAccountTwoFactorChange {
    const NAME: &'static str = "CMsgGCHAccountTwoFactorChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.twofactor_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.twofactor_enabled {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.twofactor_enabled {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAccountTwoFactorChange {
        CMsgGCHAccountTwoFactorChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.twofactor_enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAccountTwoFactorChange {
        static instance: CMsgGCHAccountTwoFactorChange = CMsgGCHAccountTwoFactorChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            twofactor_enabled: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCCheckClanMembership)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckClanMembership {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCCheckClanMembership.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCCheckClanMembership.clanid)
    pub clanid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCCheckClanMembership.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckClanMembership {
    fn default() -> &'a CMsgGCCheckClanMembership {
        <CMsgGCCheckClanMembership as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckClanMembership {
    pub fn new() -> CMsgGCCheckClanMembership {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 clanid = 2;

    pub fn clanid(&self) -> u32 {
        self.clanid.unwrap_or(0)
    }

    pub fn clear_clanid(&mut self) {
        self.clanid = ::std::option::Option::None;
    }

    pub fn has_clanid(&self) -> bool {
        self.clanid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clanid(&mut self, v: u32) {
        self.clanid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCCheckClanMembership {
    const NAME: &'static str = "CMsgGCCheckClanMembership";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.clanid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.clanid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.clanid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckClanMembership {
        CMsgGCCheckClanMembership::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.clanid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckClanMembership {
        static instance: CMsgGCCheckClanMembership = CMsgGCCheckClanMembership {
            steamid: ::std::option::Option::None,
            clanid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCCheckClanMembership_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckClanMembership_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCCheckClanMembership_Response.ismember)
    pub ismember: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCCheckClanMembership_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckClanMembership_Response {
    fn default() -> &'a CMsgGCCheckClanMembership_Response {
        <CMsgGCCheckClanMembership_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckClanMembership_Response {
    pub fn new() -> CMsgGCCheckClanMembership_Response {
        ::std::default::Default::default()
    }

    // optional bool ismember = 1;

    pub fn ismember(&self) -> bool {
        self.ismember.unwrap_or(false)
    }

    pub fn clear_ismember(&mut self) {
        self.ismember = ::std::option::Option::None;
    }

    pub fn has_ismember(&self) -> bool {
        self.ismember.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ismember(&mut self, v: bool) {
        self.ismember = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCCheckClanMembership_Response {
    const NAME: &'static str = "CMsgGCCheckClanMembership_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ismember = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ismember {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ismember {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckClanMembership_Response {
        CMsgGCCheckClanMembership_Response::new()
    }

    fn clear(&mut self) {
        self.ismember = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckClanMembership_Response {
        static instance: CMsgGCCheckClanMembership_Response = CMsgGCCheckClanMembership_Response {
            ismember: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCHAppCheersReceived)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAppCheersReceived {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHAppCheersReceived.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAppCheersReceived.cheer_targets)
    pub cheer_targets: ::std::vec::Vec<cmsg_gchapp_cheers_received::CheerTarget>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHAppCheersReceived.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAppCheersReceived {
    fn default() -> &'a CMsgGCHAppCheersReceived {
        <CMsgGCHAppCheersReceived as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAppCheersReceived {
    pub fn new() -> CMsgGCHAppCheersReceived {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHAppCheersReceived {
    const NAME: &'static str = "CMsgGCHAppCheersReceived";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.cheer_targets.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.cheer_targets {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        for v in &self.cheer_targets {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAppCheersReceived {
        CMsgGCHAppCheersReceived::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.cheer_targets.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAppCheersReceived {
        static instance: CMsgGCHAppCheersReceived = CMsgGCHAppCheersReceived {
            appid: ::std::option::Option::None,
            cheer_targets: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCHAppCheersReceived`
pub mod cmsg_gchapp_cheers_received {
    // @@protoc_insertion_point(message:CMsgGCHAppCheersReceived.CheerTypeAmount)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheerTypeAmount {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_type)
        pub cheer_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_amount)
        pub cheer_amount: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCHAppCheersReceived.CheerTypeAmount.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheerTypeAmount {
        fn default() -> &'a CheerTypeAmount {
            <CheerTypeAmount as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl CheerTypeAmount {
        pub fn new() -> CheerTypeAmount {
            ::std::default::Default::default()
        }

        // optional uint32 cheer_type = 1;

        pub fn cheer_type(&self) -> u32 {
            self.cheer_type.unwrap_or(0)
        }

        pub fn clear_cheer_type(&mut self) {
            self.cheer_type = ::std::option::Option::None;
        }

        pub fn has_cheer_type(&self) -> bool {
            self.cheer_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cheer_type(&mut self, v: u32) {
            self.cheer_type = ::std::option::Option::Some(v);
        }

        // optional uint32 cheer_amount = 2;

        pub fn cheer_amount(&self) -> u32 {
            self.cheer_amount.unwrap_or(0)
        }

        pub fn clear_cheer_amount(&mut self) {
            self.cheer_amount = ::std::option::Option::None;
        }

        pub fn has_cheer_amount(&self) -> bool {
            self.cheer_amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cheer_amount(&mut self, v: u32) {
            self.cheer_amount = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for CheerTypeAmount {
        const NAME: &'static str = "CheerTypeAmount";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.cheer_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.cheer_amount = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cheer_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.cheer_amount {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.cheer_type {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.cheer_amount {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheerTypeAmount {
            CheerTypeAmount::new()
        }

        fn clear(&mut self) {
            self.cheer_type = ::std::option::Option::None;
            self.cheer_amount = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheerTypeAmount {
            static instance: CheerTypeAmount = CheerTypeAmount {
                cheer_type: ::std::option::Option::None,
                cheer_amount: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgGCHAppCheersReceived.CheerTarget)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheerTarget {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCHAppCheersReceived.CheerTarget.cheer_target)
        pub cheer_target: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
        pub cheer_types: ::std::vec::Vec<CheerTypeAmount>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCHAppCheersReceived.CheerTarget.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheerTarget {
        fn default() -> &'a CheerTarget {
            <CheerTarget as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl CheerTarget {
        pub fn new() -> CheerTarget {
            ::std::default::Default::default()
        }

        // optional uint64 cheer_target = 1;

        pub fn cheer_target(&self) -> u64 {
            self.cheer_target.unwrap_or(0)
        }

        pub fn clear_cheer_target(&mut self) {
            self.cheer_target = ::std::option::Option::None;
        }

        pub fn has_cheer_target(&self) -> bool {
            self.cheer_target.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cheer_target(&mut self, v: u64) {
            self.cheer_target = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for CheerTarget {
        const NAME: &'static str = "CheerTarget";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.cheer_target = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    18 => {
                        self.cheer_types.push(is.read_message()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cheer_target {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
            }
            for value in &self.cheer_types {
                let len = value.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.cheer_target {
                os.write_uint64(1, v)?;
            }
            for v in &self.cheer_types {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheerTarget {
            CheerTarget::new()
        }

        fn clear(&mut self) {
            self.cheer_target = ::std::option::Option::None;
            self.cheer_types.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheerTarget {
            static instance: CheerTarget = CheerTarget {
                cheer_target: ::std::option::Option::None,
                cheer_types: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgGCHAppCheersGetAllowedTypes)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAppCheersGetAllowedTypes {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypes.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypes.cheer_target)
    pub cheer_target: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHAppCheersGetAllowedTypes.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAppCheersGetAllowedTypes {
    fn default() -> &'a CMsgGCHAppCheersGetAllowedTypes {
        <CMsgGCHAppCheersGetAllowedTypes as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAppCheersGetAllowedTypes {
    pub fn new() -> CMsgGCHAppCheersGetAllowedTypes {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 cheer_target = 2;

    pub fn cheer_target(&self) -> u64 {
        self.cheer_target.unwrap_or(0)
    }

    pub fn clear_cheer_target(&mut self) {
        self.cheer_target = ::std::option::Option::None;
    }

    pub fn has_cheer_target(&self) -> bool {
        self.cheer_target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cheer_target(&mut self, v: u64) {
        self.cheer_target = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHAppCheersGetAllowedTypes {
    const NAME: &'static str = "CMsgGCHAppCheersGetAllowedTypes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.cheer_target = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.cheer_target {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.cheer_target {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAppCheersGetAllowedTypes {
        CMsgGCHAppCheersGetAllowedTypes::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.cheer_target = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAppCheersGetAllowedTypes {
        static instance: CMsgGCHAppCheersGetAllowedTypes = CMsgGCHAppCheersGetAllowedTypes {
            appid: ::std::option::Option::None,
            cheer_target: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCHAppCheersGetAllowedTypesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAppCheersGetAllowedTypesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
    pub cheer_types_valid_all_users: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
    pub cheer_remaps: ::std::vec::Vec<cmsg_gchapp_cheers_get_allowed_types_response::CheerRemaps>,
    // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypesResponse.cache_duration)
    pub cache_duration: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHAppCheersGetAllowedTypesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAppCheersGetAllowedTypesResponse {
    fn default() -> &'a CMsgGCHAppCheersGetAllowedTypesResponse {
        <CMsgGCHAppCheersGetAllowedTypesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAppCheersGetAllowedTypesResponse {
    pub fn new() -> CMsgGCHAppCheersGetAllowedTypesResponse {
        ::std::default::Default::default()
    }

    // optional uint32 cache_duration = 3;

    pub fn cache_duration(&self) -> u32 {
        self.cache_duration.unwrap_or(0)
    }

    pub fn clear_cache_duration(&mut self) {
        self.cache_duration = ::std::option::Option::None;
    }

    pub fn has_cache_duration(&self) -> bool {
        self.cache_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_duration(&mut self, v: u32) {
        self.cache_duration = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCHAppCheersGetAllowedTypesResponse {
    const NAME: &'static str = "CMsgGCHAppCheersGetAllowedTypesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.cheer_types_valid_all_users)?;
                },
                8 => {
                    self.cheer_types_valid_all_users.push(is.read_uint32()?);
                },
                18 => {
                    self.cheer_remaps.push(is.read_message()?);
                },
                24 => {
                    self.cache_duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.cheer_types_valid_all_users {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, *value);
        };
        for value in &self.cheer_remaps {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.cache_duration {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.cheer_types_valid_all_users {
            os.write_uint32(1, *v)?;
        };
        for v in &self.cheer_remaps {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.cache_duration {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAppCheersGetAllowedTypesResponse {
        CMsgGCHAppCheersGetAllowedTypesResponse::new()
    }

    fn clear(&mut self) {
        self.cheer_types_valid_all_users.clear();
        self.cheer_remaps.clear();
        self.cache_duration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAppCheersGetAllowedTypesResponse {
        static instance: CMsgGCHAppCheersGetAllowedTypesResponse = CMsgGCHAppCheersGetAllowedTypesResponse {
            cheer_types_valid_all_users: ::std::vec::Vec::new(),
            cheer_remaps: ::std::vec::Vec::new(),
            cache_duration: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCHAppCheersGetAllowedTypesResponse`
pub mod cmsg_gchapp_cheers_get_allowed_types_response {
    // @@protoc_insertion_point(message:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheerRemaps {
        // message fields
        // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.original_cheer_type)
        pub original_cheer_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.remapped_cheer_type)
        pub remapped_cheer_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
        pub account_ids: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheerRemaps {
        fn default() -> &'a CheerRemaps {
            <CheerRemaps as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl CheerRemaps {
        pub fn new() -> CheerRemaps {
            ::std::default::Default::default()
        }

        // optional uint32 original_cheer_type = 1;

        pub fn original_cheer_type(&self) -> u32 {
            self.original_cheer_type.unwrap_or(0)
        }

        pub fn clear_original_cheer_type(&mut self) {
            self.original_cheer_type = ::std::option::Option::None;
        }

        pub fn has_original_cheer_type(&self) -> bool {
            self.original_cheer_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_original_cheer_type(&mut self, v: u32) {
            self.original_cheer_type = ::std::option::Option::Some(v);
        }

        // optional uint32 remapped_cheer_type = 2;

        pub fn remapped_cheer_type(&self) -> u32 {
            self.remapped_cheer_type.unwrap_or(0)
        }

        pub fn clear_remapped_cheer_type(&mut self) {
            self.remapped_cheer_type = ::std::option::Option::None;
        }

        pub fn has_remapped_cheer_type(&self) -> bool {
            self.remapped_cheer_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_remapped_cheer_type(&mut self, v: u32) {
            self.remapped_cheer_type = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for CheerRemaps {
        const NAME: &'static str = "CheerRemaps";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.original_cheer_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.remapped_cheer_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint32_into(&mut self.account_ids)?;
                    },
                    24 => {
                        self.account_ids.push(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.original_cheer_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.remapped_cheer_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            for value in &self.account_ids {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, *value);
            };
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.original_cheer_type {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.remapped_cheer_type {
                os.write_uint32(2, v)?;
            }
            for v in &self.account_ids {
                os.write_uint32(3, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheerRemaps {
            CheerRemaps::new()
        }

        fn clear(&mut self) {
            self.original_cheer_type = ::std::option::Option::None;
            self.remapped_cheer_type = ::std::option::Option::None;
            self.account_ids.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheerRemaps {
            static instance: CheerRemaps = CheerRemaps {
                original_cheer_type: ::std::option::Option::None,
                remapped_cheer_type: ::std::option::Option::None,
                account_ids: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CGCSystemMsg_ReportExternalPurchase_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_ReportExternalPurchase_Request {
    // message fields
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.provider)
    pub provider: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EMobilePaymentProvider>>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.orderid)
    pub orderid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
    pub provider_orderid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.currency)
    pub currency: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.quantity)
    pub quantity: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.itemid)
    pub itemid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.item_description)
    pub item_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.category)
    pub category: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Request.time_created)
    pub time_created: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCSystemMsg_ReportExternalPurchase_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_ReportExternalPurchase_Request {
    fn default() -> &'a CGCSystemMsg_ReportExternalPurchase_Request {
        <CGCSystemMsg_ReportExternalPurchase_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_ReportExternalPurchase_Request {
    pub fn new() -> CGCSystemMsg_ReportExternalPurchase_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .EMobilePaymentProvider provider = 3;

    pub fn provider(&self) -> EMobilePaymentProvider {
        match self.provider {
            Some(e) => e.enum_value_or(EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid),
            None => EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid,
        }
    }

    pub fn clear_provider(&mut self) {
        self.provider = ::std::option::Option::None;
    }

    pub fn has_provider(&self) -> bool {
        self.provider.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: EMobilePaymentProvider) {
        self.provider = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint64 orderid = 4;

    pub fn orderid(&self) -> u64 {
        self.orderid.unwrap_or(0)
    }

    pub fn clear_orderid(&mut self) {
        self.orderid = ::std::option::Option::None;
    }

    pub fn has_orderid(&self) -> bool {
        self.orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orderid(&mut self, v: u64) {
        self.orderid = ::std::option::Option::Some(v);
    }

    // optional string provider_orderid = 5;

    pub fn provider_orderid(&self) -> &str {
        match self.provider_orderid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_provider_orderid(&mut self) {
        self.provider_orderid = ::std::option::Option::None;
    }

    pub fn has_provider_orderid(&self) -> bool {
        self.provider_orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider_orderid(&mut self, v: ::std::string::String) {
        self.provider_orderid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider_orderid(&mut self) -> &mut ::std::string::String {
        if self.provider_orderid.is_none() {
            self.provider_orderid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.provider_orderid.as_mut().unwrap()
    }

    // Take field
    pub fn take_provider_orderid(&mut self) -> ::std::string::String {
        self.provider_orderid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 amount = 6;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional string currency = 7;

    pub fn currency(&self) -> &str {
        match self.currency.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_currency(&mut self) {
        self.currency = ::std::option::Option::None;
    }

    pub fn has_currency(&self) -> bool {
        self.currency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        if self.currency.is_none() {
            self.currency = ::std::option::Option::Some(::std::string::String::new());
        }
        self.currency.as_mut().unwrap()
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        self.currency.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 quantity = 8;

    pub fn quantity(&self) -> u32 {
        self.quantity.unwrap_or(0)
    }

    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: u32) {
        self.quantity = ::std::option::Option::Some(v);
    }

    // optional uint32 itemid = 9;

    pub fn itemid(&self) -> u32 {
        self.itemid.unwrap_or(0)
    }

    pub fn clear_itemid(&mut self) {
        self.itemid = ::std::option::Option::None;
    }

    pub fn has_itemid(&self) -> bool {
        self.itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u32) {
        self.itemid = ::std::option::Option::Some(v);
    }

    // optional string item_description = 10;

    pub fn item_description(&self) -> &str {
        match self.item_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_item_description(&mut self) {
        self.item_description = ::std::option::Option::None;
    }

    pub fn has_item_description(&self) -> bool {
        self.item_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_description(&mut self, v: ::std::string::String) {
        self.item_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_description(&mut self) -> &mut ::std::string::String {
        if self.item_description.is_none() {
            self.item_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.item_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_item_description(&mut self) -> ::std::string::String {
        self.item_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string language = 11;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string category = 12;

    pub fn category(&self) -> &str {
        match self.category.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_category(&mut self) {
        self.category = ::std::option::Option::None;
    }

    pub fn has_category(&self) -> bool {
        self.category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        if self.category.is_none() {
            self.category = ::std::option::Option::Some(::std::string::String::new());
        }
        self.category.as_mut().unwrap()
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        self.category.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_created = 13;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCSystemMsg_ReportExternalPurchase_Request {
    const NAME: &'static str = "CGCSystemMsg_ReportExternalPurchase_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.provider = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.orderid = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    self.provider_orderid = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.amount = ::std::option::Option::Some(is.read_int64()?);
                },
                58 => {
                    self.currency = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.itemid = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.item_description = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.category = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.provider {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.orderid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.provider_orderid.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.amount {
            my_size += ::steam_vent_proto_common::protobuf::rt::int64_size(6, v);
        }
        if let Some(v) = self.currency.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.quantity {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.itemid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.item_description.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.category.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.time_created {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(13, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.provider {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.orderid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.provider_orderid.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.amount {
            os.write_int64(6, v)?;
        }
        if let Some(v) = self.currency.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.itemid {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.item_description.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.category.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_ReportExternalPurchase_Request {
        CGCSystemMsg_ReportExternalPurchase_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.provider = ::std::option::Option::None;
        self.orderid = ::std::option::Option::None;
        self.provider_orderid = ::std::option::Option::None;
        self.amount = ::std::option::Option::None;
        self.currency = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.itemid = ::std::option::Option::None;
        self.item_description = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.category = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_ReportExternalPurchase_Request {
        static instance: CGCSystemMsg_ReportExternalPurchase_Request = CGCSystemMsg_ReportExternalPurchase_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            provider: ::std::option::Option::None,
            orderid: ::std::option::Option::None,
            provider_orderid: ::std::option::Option::None,
            amount: ::std::option::Option::None,
            currency: ::std::option::Option::None,
            quantity: ::std::option::Option::None,
            itemid: ::std::option::Option::None,
            item_description: ::std::option::Option::None,
            language: ::std::option::Option::None,
            category: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCSystemMsg_ReportExternalPurchase_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_ReportExternalPurchase_Response {
    // message fields
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Response.transid)
    pub transid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCSystemMsg_ReportExternalPurchase_Response.orderid)
    pub orderid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCSystemMsg_ReportExternalPurchase_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_ReportExternalPurchase_Response {
    fn default() -> &'a CGCSystemMsg_ReportExternalPurchase_Response {
        <CGCSystemMsg_ReportExternalPurchase_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_ReportExternalPurchase_Response {
    pub fn new() -> CGCSystemMsg_ReportExternalPurchase_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 transid = 1;

    pub fn transid(&self) -> u64 {
        self.transid.unwrap_or(0)
    }

    pub fn clear_transid(&mut self) {
        self.transid = ::std::option::Option::None;
    }

    pub fn has_transid(&self) -> bool {
        self.transid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transid(&mut self, v: u64) {
        self.transid = ::std::option::Option::Some(v);
    }

    // optional uint64 orderid = 2;

    pub fn orderid(&self) -> u64 {
        self.orderid.unwrap_or(0)
    }

    pub fn clear_orderid(&mut self) {
        self.orderid = ::std::option::Option::None;
    }

    pub fn has_orderid(&self) -> bool {
        self.orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orderid(&mut self, v: u64) {
        self.orderid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCSystemMsg_ReportExternalPurchase_Response {
    const NAME: &'static str = "CGCSystemMsg_ReportExternalPurchase_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.transid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.orderid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.orderid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.transid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.orderid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_ReportExternalPurchase_Response {
        CGCSystemMsg_ReportExternalPurchase_Response::new()
    }

    fn clear(&mut self) {
        self.transid = ::std::option::Option::None;
        self.orderid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_ReportExternalPurchase_Response {
        static instance: CGCSystemMsg_ReportExternalPurchase_Response = CGCSystemMsg_ReportExternalPurchase_Response {
            transid: ::std::option::Option::None,
            orderid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CWorkshop_AddSpecialPayment_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_AddSpecialPayment_Request {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_AddSpecialPayment_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_AddSpecialPayment_Request.gameitemid)
    pub gameitemid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_AddSpecialPayment_Request.date)
    pub date: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CWorkshop_AddSpecialPayment_Request.payment_us_usd)
    pub payment_us_usd: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CWorkshop_AddSpecialPayment_Request.payment_row_usd)
    pub payment_row_usd: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_AddSpecialPayment_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_AddSpecialPayment_Request {
    fn default() -> &'a CWorkshop_AddSpecialPayment_Request {
        <CWorkshop_AddSpecialPayment_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_AddSpecialPayment_Request {
    pub fn new() -> CWorkshop_AddSpecialPayment_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 gameitemid = 2;

    pub fn gameitemid(&self) -> u32 {
        self.gameitemid.unwrap_or(0)
    }

    pub fn clear_gameitemid(&mut self) {
        self.gameitemid = ::std::option::Option::None;
    }

    pub fn has_gameitemid(&self) -> bool {
        self.gameitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameitemid(&mut self, v: u32) {
        self.gameitemid = ::std::option::Option::Some(v);
    }

    // optional string date = 3;

    pub fn date(&self) -> &str {
        match self.date.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_date(&mut self) {
        self.date = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        self.date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        if self.date.is_none() {
            self.date = ::std::option::Option::Some(::std::string::String::new());
        }
        self.date.as_mut().unwrap()
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        self.date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 payment_us_usd = 4;

    pub fn payment_us_usd(&self) -> u64 {
        self.payment_us_usd.unwrap_or(0)
    }

    pub fn clear_payment_us_usd(&mut self) {
        self.payment_us_usd = ::std::option::Option::None;
    }

    pub fn has_payment_us_usd(&self) -> bool {
        self.payment_us_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment_us_usd(&mut self, v: u64) {
        self.payment_us_usd = ::std::option::Option::Some(v);
    }

    // optional uint64 payment_row_usd = 5;

    pub fn payment_row_usd(&self) -> u64 {
        self.payment_row_usd.unwrap_or(0)
    }

    pub fn clear_payment_row_usd(&mut self) {
        self.payment_row_usd = ::std::option::Option::None;
    }

    pub fn has_payment_row_usd(&self) -> bool {
        self.payment_row_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment_row_usd(&mut self, v: u64) {
        self.payment_row_usd = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CWorkshop_AddSpecialPayment_Request {
    const NAME: &'static str = "CWorkshop_AddSpecialPayment_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.gameitemid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.date = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.payment_us_usd = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.payment_row_usd = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gameitemid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.date.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.payment_us_usd {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.payment_row_usd {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(5, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gameitemid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.date.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.payment_us_usd {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.payment_row_usd {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_AddSpecialPayment_Request {
        CWorkshop_AddSpecialPayment_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gameitemid = ::std::option::Option::None;
        self.date = ::std::option::Option::None;
        self.payment_us_usd = ::std::option::Option::None;
        self.payment_row_usd = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_AddSpecialPayment_Request {
        static instance: CWorkshop_AddSpecialPayment_Request = CWorkshop_AddSpecialPayment_Request {
            appid: ::std::option::Option::None,
            gameitemid: ::std::option::Option::None,
            date: ::std::option::Option::None,
            payment_us_usd: ::std::option::Option::None,
            payment_row_usd: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CWorkshop_AddSpecialPayment_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_AddSpecialPayment_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_AddSpecialPayment_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_AddSpecialPayment_Response {
    fn default() -> &'a CWorkshop_AddSpecialPayment_Response {
        <CWorkshop_AddSpecialPayment_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_AddSpecialPayment_Response {
    pub fn new() -> CWorkshop_AddSpecialPayment_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CWorkshop_AddSpecialPayment_Response {
    const NAME: &'static str = "CWorkshop_AddSpecialPayment_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_AddSpecialPayment_Response {
        CWorkshop_AddSpecialPayment_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_AddSpecialPayment_Response {
        static instance: CWorkshop_AddSpecialPayment_Response = CWorkshop_AddSpecialPayment_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CWorkshop_GetSpecialPayments_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetSpecialPayments_Request {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Request.gameitemid)
    pub gameitemid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Request.date)
    pub date: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_GetSpecialPayments_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetSpecialPayments_Request {
    fn default() -> &'a CWorkshop_GetSpecialPayments_Request {
        <CWorkshop_GetSpecialPayments_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_GetSpecialPayments_Request {
    pub fn new() -> CWorkshop_GetSpecialPayments_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 gameitemid = 2;

    pub fn gameitemid(&self) -> u32 {
        self.gameitemid.unwrap_or(0)
    }

    pub fn clear_gameitemid(&mut self) {
        self.gameitemid = ::std::option::Option::None;
    }

    pub fn has_gameitemid(&self) -> bool {
        self.gameitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameitemid(&mut self, v: u32) {
        self.gameitemid = ::std::option::Option::Some(v);
    }

    // optional string date = 3;

    pub fn date(&self) -> &str {
        match self.date.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_date(&mut self) {
        self.date = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        self.date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        if self.date.is_none() {
            self.date = ::std::option::Option::Some(::std::string::String::new());
        }
        self.date.as_mut().unwrap()
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        self.date.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CWorkshop_GetSpecialPayments_Request {
    const NAME: &'static str = "CWorkshop_GetSpecialPayments_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.gameitemid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.date = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gameitemid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.date.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gameitemid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.date.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetSpecialPayments_Request {
        CWorkshop_GetSpecialPayments_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gameitemid = ::std::option::Option::None;
        self.date = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetSpecialPayments_Request {
        static instance: CWorkshop_GetSpecialPayments_Request = CWorkshop_GetSpecialPayments_Request {
            appid: ::std::option::Option::None,
            gameitemid: ::std::option::Option::None,
            date: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CWorkshop_GetSpecialPayments_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetSpecialPayments_Response {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Response.special_payments)
    pub special_payments: ::std::vec::Vec<cworkshop_get_special_payments_response::SpecialPayment>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_GetSpecialPayments_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetSpecialPayments_Response {
    fn default() -> &'a CWorkshop_GetSpecialPayments_Response {
        <CWorkshop_GetSpecialPayments_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_GetSpecialPayments_Response {
    pub fn new() -> CWorkshop_GetSpecialPayments_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CWorkshop_GetSpecialPayments_Response {
    const NAME: &'static str = "CWorkshop_GetSpecialPayments_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.special_payments.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.special_payments {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.special_payments {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetSpecialPayments_Response {
        CWorkshop_GetSpecialPayments_Response::new()
    }

    fn clear(&mut self) {
        self.special_payments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetSpecialPayments_Response {
        static instance: CWorkshop_GetSpecialPayments_Response = CWorkshop_GetSpecialPayments_Response {
            special_payments: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CWorkshop_GetSpecialPayments_Response`
pub mod cworkshop_get_special_payments_response {
    // @@protoc_insertion_point(message:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SpecialPayment {
        // message fields
        // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Response.SpecialPayment.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Response.SpecialPayment.gameitemid)
        pub gameitemid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
        pub date: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_us_usd)
        pub net_payment_us_usd: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_row_usd)
        pub net_payment_row_usd: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CWorkshop_GetSpecialPayments_Response.SpecialPayment.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SpecialPayment {
        fn default() -> &'a SpecialPayment {
            <SpecialPayment as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl SpecialPayment {
        pub fn new() -> SpecialPayment {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 gameitemid = 2;

        pub fn gameitemid(&self) -> u32 {
            self.gameitemid.unwrap_or(0)
        }

        pub fn clear_gameitemid(&mut self) {
            self.gameitemid = ::std::option::Option::None;
        }

        pub fn has_gameitemid(&self) -> bool {
            self.gameitemid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gameitemid(&mut self, v: u32) {
            self.gameitemid = ::std::option::Option::Some(v);
        }

        // optional string date = 3;

        pub fn date(&self) -> &str {
            match self.date.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_date(&mut self) {
            self.date = ::std::option::Option::None;
        }

        pub fn has_date(&self) -> bool {
            self.date.is_some()
        }

        // Param is passed by value, moved
        pub fn set_date(&mut self, v: ::std::string::String) {
            self.date = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_date(&mut self) -> &mut ::std::string::String {
            if self.date.is_none() {
                self.date = ::std::option::Option::Some(::std::string::String::new());
            }
            self.date.as_mut().unwrap()
        }

        // Take field
        pub fn take_date(&mut self) -> ::std::string::String {
            self.date.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint64 net_payment_us_usd = 4;

        pub fn net_payment_us_usd(&self) -> u64 {
            self.net_payment_us_usd.unwrap_or(0)
        }

        pub fn clear_net_payment_us_usd(&mut self) {
            self.net_payment_us_usd = ::std::option::Option::None;
        }

        pub fn has_net_payment_us_usd(&self) -> bool {
            self.net_payment_us_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_net_payment_us_usd(&mut self, v: u64) {
            self.net_payment_us_usd = ::std::option::Option::Some(v);
        }

        // optional uint64 net_payment_row_usd = 5;

        pub fn net_payment_row_usd(&self) -> u64 {
            self.net_payment_row_usd.unwrap_or(0)
        }

        pub fn clear_net_payment_row_usd(&mut self) {
            self.net_payment_row_usd = ::std::option::Option::None;
        }

        pub fn has_net_payment_row_usd(&self) -> bool {
            self.net_payment_row_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_net_payment_row_usd(&mut self, v: u64) {
            self.net_payment_row_usd = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for SpecialPayment {
        const NAME: &'static str = "SpecialPayment";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.gameitemid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.date = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.net_payment_us_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    40 => {
                        self.net_payment_row_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.gameitemid {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.date.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.net_payment_us_usd {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
            }
            if let Some(v) = self.net_payment_row_usd {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(5, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.gameitemid {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.date.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.net_payment_us_usd {
                os.write_uint64(4, v)?;
            }
            if let Some(v) = self.net_payment_row_usd {
                os.write_uint64(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SpecialPayment {
            SpecialPayment::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.gameitemid = ::std::option::Option::None;
            self.date = ::std::option::Option::None;
            self.net_payment_us_usd = ::std::option::Option::None;
            self.net_payment_row_usd = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SpecialPayment {
            static instance: SpecialPayment = SpecialPayment {
                appid: ::std::option::Option::None,
                gameitemid: ::std::option::Option::None,
                date: ::std::option::Option::None,
                net_payment_us_usd: ::std::option::Option::None,
                net_payment_row_usd: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EMobilePaymentProvider)
pub enum EMobilePaymentProvider {
    // @@protoc_insertion_point(enum_value:EMobilePaymentProvider.k_EMobilePaymentProvider_Invalid)
    k_EMobilePaymentProvider_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EMobilePaymentProvider.k_EMobilePaymentProvider_GooglePlay)
    k_EMobilePaymentProvider_GooglePlay = 1,
    // @@protoc_insertion_point(enum_value:EMobilePaymentProvider.k_EMobilePaymentProvider_AppleAppStore)
    k_EMobilePaymentProvider_AppleAppStore = 2,
}

impl ::steam_vent_proto_common::protobuf::Enum for EMobilePaymentProvider {
    const NAME: &'static str = "EMobilePaymentProvider";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMobilePaymentProvider> {
        match value {
            0 => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid),
            1 => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_GooglePlay),
            2 => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_AppleAppStore),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EMobilePaymentProvider> {
        match str {
            "k_EMobilePaymentProvider_Invalid" => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid),
            "k_EMobilePaymentProvider_GooglePlay" => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_GooglePlay),
            "k_EMobilePaymentProvider_AppleAppStore" => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_AppleAppStore),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EMobilePaymentProvider] = &[
        EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid,
        EMobilePaymentProvider::k_EMobilePaymentProvider_GooglePlay,
        EMobilePaymentProvider::k_EMobilePaymentProvider_AppleAppStore,
    ];
}

impl ::std::default::Default for EMobilePaymentProvider {
    fn default() -> Self {
        EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgWebAPIKey {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgHttpRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgWebAPIRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgHttpResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMFindAccounts {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMFindAccounts {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMFindAccounts;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMFindAccountsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMFindAccountsResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMFindAccountsResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgNotifyWatchdog {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgNotifyWatchdog {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgNotifyWatchdog;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMGetLicenses {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMGetLicenses {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMGetLicenses;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPackageLicense {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMGetLicensesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMGetLicensesResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMGetLicensesResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMGetUserGameStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMGetUserGameStatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetCommandList {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetCommandListResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgMemCachedGet {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgMemCachedGetResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgMemCachedSet {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgMemCachedDelete {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgMemCachedStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgMemCachedStatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgSQLStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgSQLStatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMAddFreeLicense {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMAddFreeLicense {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMAddFreeLicense;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMAddFreeLicenseResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMAddFreeLicenseResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMAddFreeLicenseResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgGetIPLocation {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgGetIPASN {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CIPASNInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgGetIPASNResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgSystemStatsSchema {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgGetSystemStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgGetSystemStatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMSendEmail {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMSendEmailResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetEmailTemplate {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCGetEmailTemplate {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCGetEmailTemplate;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetEmailTemplateResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCGetEmailTemplateResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCGetEmailTemplateResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMGrantGuestPasses2 {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMGrantGuestPasses2 {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMGrantGuestPasses2;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAMGrantGuestPasses2Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgAMGrantGuestPasses2Response {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgAMGrantGuestPasses2Response;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetPersonaNames {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetPersonaNames_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCCheckFriendship {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCCheckFriendship_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetAppFriendsList {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetAppFriendsList_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgMasterSetDirectory {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgMasterSetDirectory_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgWebAPIJobRequestForwardResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCSystemMsg_GetPurchaseTrust_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCSystemMsg_GetPurchaseTrust_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHAccountVacStatusChange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCHAccountVacStatusChange {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHAccountVacStatusChange;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetPartnerAccountLink {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGetPartnerAccountLink_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCRoutingInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgMasterSetWebAPIRouting {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgMasterSetClientMsgRouting {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgMasterSetWebAPIRouting_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgGCMsgMasterSetClientMsgRouting_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCMsgSetOptions {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHUpdateSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCHUpdateSession {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHUpdateSession;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgNotificationOfSuspiciousActivity {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgNotificationOfSuspiciousActivity {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgNotificationOfSuspiciousActivity;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDPPartnerMicroTxns {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgDPPartnerMicroTxns {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgDPPartnerMicroTxns;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDPPartnerMicroTxnsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgDPPartnerMicroTxnsResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgDPPartnerMicroTxnsResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHVacVerificationChange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCHVacVerificationChange {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHVacVerificationChange;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHAccountTwoFactorChange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCHAccountTwoFactorChange {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHAccountTwoFactorChange;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCCheckClanMembership {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCCheckClanMembership_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHAppCheersReceived {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCHAppCheersReceived {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHAppCheersReceived;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHAppCheersGetAllowedTypes {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCHAppCheersGetAllowedTypes {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHAppCheersGetAllowedTypes;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCHAppCheersGetAllowedTypesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCHAppCheersGetAllowedTypesResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgGCHAppCheersGetAllowedTypesResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CGCSystemMsg_ReportExternalPurchase_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CGCSystemMsg_ReportExternalPurchase_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CWorkshop_AddSpecialPayment_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CWorkshop_AddSpecialPayment_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CWorkshop_GetSpecialPayments_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CWorkshop_GetSpecialPayments_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
