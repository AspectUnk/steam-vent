// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gametoolevents.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChangeMapToolEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChangeMapToolEvent {
    // message fields
    // @@protoc_insertion_point(field:ChangeMapToolEvent.mapname)
    pub mapname: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ChangeMapToolEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChangeMapToolEvent {
    fn default() -> &'a ChangeMapToolEvent {
        <ChangeMapToolEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ChangeMapToolEvent {
    pub fn new() -> ChangeMapToolEvent {
        ::std::default::Default::default()
    }

    // optional string mapname = 1;

    pub fn mapname(&self) -> &str {
        match self.mapname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mapname(&mut self) {
        self.mapname = ::std::option::Option::None;
    }

    pub fn has_mapname(&self) -> bool {
        self.mapname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mapname(&mut self, v: ::std::string::String) {
        self.mapname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mapname(&mut self) -> &mut ::std::string::String {
        if self.mapname.is_none() {
            self.mapname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mapname.as_mut().unwrap()
    }

    // Take field
    pub fn take_mapname(&mut self) -> ::std::string::String {
        self.mapname.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ChangeMapToolEvent {
    const NAME: &'static str = "ChangeMapToolEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mapname = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.mapname.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.mapname.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChangeMapToolEvent {
        ChangeMapToolEvent::new()
    }

    fn clear(&mut self) {
        self.mapname = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChangeMapToolEvent {
        static instance: ChangeMapToolEvent = ChangeMapToolEvent {
            mapname: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:TraceRayServerToolEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TraceRayServerToolEvent {
    // message fields
    // @@protoc_insertion_point(field:TraceRayServerToolEvent.start)
    pub start: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:TraceRayServerToolEvent.end)
    pub end: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // special fields
    // @@protoc_insertion_point(special_field:TraceRayServerToolEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TraceRayServerToolEvent {
    fn default() -> &'a TraceRayServerToolEvent {
        <TraceRayServerToolEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl TraceRayServerToolEvent {
    pub fn new() -> TraceRayServerToolEvent {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for TraceRayServerToolEvent {
    const NAME: &'static str = "TraceRayServerToolEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.start)?;
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.end)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.start.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.end.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TraceRayServerToolEvent {
        TraceRayServerToolEvent::new()
    }

    fn clear(&mut self) {
        self.start.clear();
        self.end.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TraceRayServerToolEvent {
        static instance: TraceRayServerToolEvent = TraceRayServerToolEvent {
            start: ::steam_vent_proto_common::protobuf::MessageField::none(),
            end: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolTraceRayResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolTraceRayResult {
    // message fields
    // @@protoc_insertion_point(field:ToolTraceRayResult.hit)
    pub hit: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ToolTraceRayResult.impact)
    pub impact: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:ToolTraceRayResult.normal)
    pub normal: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:ToolTraceRayResult.distance)
    pub distance: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ToolTraceRayResult.fraction)
    pub fraction: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ToolTraceRayResult.ehandle)
    pub ehandle: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolTraceRayResult.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolTraceRayResult {
    fn default() -> &'a ToolTraceRayResult {
        <ToolTraceRayResult as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolTraceRayResult {
    pub fn new() -> ToolTraceRayResult {
        ::std::default::Default::default()
    }

    // optional bool hit = 1;

    pub fn hit(&self) -> bool {
        self.hit.unwrap_or(false)
    }

    pub fn clear_hit(&mut self) {
        self.hit = ::std::option::Option::None;
    }

    pub fn has_hit(&self) -> bool {
        self.hit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit(&mut self, v: bool) {
        self.hit = ::std::option::Option::Some(v);
    }

    // optional float distance = 4;

    pub fn distance(&self) -> f32 {
        self.distance.unwrap_or(0.)
    }

    pub fn clear_distance(&mut self) {
        self.distance = ::std::option::Option::None;
    }

    pub fn has_distance(&self) -> bool {
        self.distance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_distance(&mut self, v: f32) {
        self.distance = ::std::option::Option::Some(v);
    }

    // optional float fraction = 5;

    pub fn fraction(&self) -> f32 {
        self.fraction.unwrap_or(0.)
    }

    pub fn clear_fraction(&mut self) {
        self.fraction = ::std::option::Option::None;
    }

    pub fn has_fraction(&self) -> bool {
        self.fraction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fraction(&mut self, v: f32) {
        self.fraction = ::std::option::Option::Some(v);
    }

    // optional int32 ehandle = 6;

    pub fn ehandle(&self) -> i32 {
        self.ehandle.unwrap_or(0)
    }

    pub fn clear_ehandle(&mut self) {
        self.ehandle = ::std::option::Option::None;
    }

    pub fn has_ehandle(&self) -> bool {
        self.ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ehandle(&mut self, v: i32) {
        self.ehandle = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolTraceRayResult {
    const NAME: &'static str = "ToolTraceRayResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.impact)?;
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.normal)?;
                },
                37 => {
                    self.distance = ::std::option::Option::Some(is.read_float()?);
                },
                45 => {
                    self.fraction = ::std::option::Option::Some(is.read_float()?);
                },
                48 => {
                    self.ehandle = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit {
            my_size += 1 + 1;
        }
        if let Some(v) = self.impact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.normal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.distance {
            my_size += 1 + 4;
        }
        if let Some(v) = self.fraction {
            my_size += 1 + 4;
        }
        if let Some(v) = self.ehandle {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.hit {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.impact.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.normal.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.distance {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.fraction {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.ehandle {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolTraceRayResult {
        ToolTraceRayResult::new()
    }

    fn clear(&mut self) {
        self.hit = ::std::option::Option::None;
        self.impact.clear();
        self.normal.clear();
        self.distance = ::std::option::Option::None;
        self.fraction = ::std::option::Option::None;
        self.ehandle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolTraceRayResult {
        static instance: ToolTraceRayResult = ToolTraceRayResult {
            hit: ::std::option::Option::None,
            impact: ::steam_vent_proto_common::protobuf::MessageField::none(),
            normal: ::steam_vent_proto_common::protobuf::MessageField::none(),
            distance: ::std::option::Option::None,
            fraction: ::std::option::Option::None,
            ehandle: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:SpawnEntityToolEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpawnEntityToolEvent {
    // message fields
    // @@protoc_insertion_point(field:SpawnEntityToolEvent.entity_keyvalues)
    pub entity_keyvalues: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:SpawnEntityToolEvent.clientsideentity)
    pub clientsideentity: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:SpawnEntityToolEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpawnEntityToolEvent {
    fn default() -> &'a SpawnEntityToolEvent {
        <SpawnEntityToolEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl SpawnEntityToolEvent {
    pub fn new() -> SpawnEntityToolEvent {
        ::std::default::Default::default()
    }

    // optional bytes entity_keyvalues = 1;

    pub fn entity_keyvalues(&self) -> &[u8] {
        match self.entity_keyvalues.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_entity_keyvalues(&mut self) {
        self.entity_keyvalues = ::std::option::Option::None;
    }

    pub fn has_entity_keyvalues(&self) -> bool {
        self.entity_keyvalues.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entity_keyvalues(&mut self, v: ::std::vec::Vec<u8>) {
        self.entity_keyvalues = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity_keyvalues(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.entity_keyvalues.is_none() {
            self.entity_keyvalues = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.entity_keyvalues.as_mut().unwrap()
    }

    // Take field
    pub fn take_entity_keyvalues(&mut self) -> ::std::vec::Vec<u8> {
        self.entity_keyvalues.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool clientsideentity = 2;

    pub fn clientsideentity(&self) -> bool {
        self.clientsideentity.unwrap_or(false)
    }

    pub fn clear_clientsideentity(&mut self) {
        self.clientsideentity = ::std::option::Option::None;
    }

    pub fn has_clientsideentity(&self) -> bool {
        self.clientsideentity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientsideentity(&mut self, v: bool) {
        self.clientsideentity = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for SpawnEntityToolEvent {
    const NAME: &'static str = "SpawnEntityToolEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entity_keyvalues = ::std::option::Option::Some(is.read_bytes()?);
                },
                16 => {
                    self.clientsideentity = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.entity_keyvalues.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.clientsideentity {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.entity_keyvalues.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.clientsideentity {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpawnEntityToolEvent {
        SpawnEntityToolEvent::new()
    }

    fn clear(&mut self) {
        self.entity_keyvalues = ::std::option::Option::None;
        self.clientsideentity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpawnEntityToolEvent {
        static instance: SpawnEntityToolEvent = SpawnEntityToolEvent {
            entity_keyvalues: ::std::option::Option::None,
            clientsideentity: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:SpawnEntityToolEventResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpawnEntityToolEventResult {
    // message fields
    // @@protoc_insertion_point(field:SpawnEntityToolEventResult.ehandle)
    pub ehandle: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:SpawnEntityToolEventResult.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpawnEntityToolEventResult {
    fn default() -> &'a SpawnEntityToolEventResult {
        <SpawnEntityToolEventResult as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl SpawnEntityToolEventResult {
    pub fn new() -> SpawnEntityToolEventResult {
        ::std::default::Default::default()
    }

    // optional int32 ehandle = 1;

    pub fn ehandle(&self) -> i32 {
        self.ehandle.unwrap_or(0)
    }

    pub fn clear_ehandle(&mut self) {
        self.ehandle = ::std::option::Option::None;
    }

    pub fn has_ehandle(&self) -> bool {
        self.ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ehandle(&mut self, v: i32) {
        self.ehandle = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for SpawnEntityToolEventResult {
    const NAME: &'static str = "SpawnEntityToolEventResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ehandle = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ehandle {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ehandle {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpawnEntityToolEventResult {
        SpawnEntityToolEventResult::new()
    }

    fn clear(&mut self) {
        self.ehandle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpawnEntityToolEventResult {
        static instance: SpawnEntityToolEventResult = SpawnEntityToolEventResult {
            ehandle: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:DestroyEntityToolEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DestroyEntityToolEvent {
    // message fields
    // @@protoc_insertion_point(field:DestroyEntityToolEvent.ehandle)
    pub ehandle: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:DestroyEntityToolEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DestroyEntityToolEvent {
    fn default() -> &'a DestroyEntityToolEvent {
        <DestroyEntityToolEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl DestroyEntityToolEvent {
    pub fn new() -> DestroyEntityToolEvent {
        ::std::default::Default::default()
    }

    // optional int32 ehandle = 1;

    pub fn ehandle(&self) -> i32 {
        self.ehandle.unwrap_or(0)
    }

    pub fn clear_ehandle(&mut self) {
        self.ehandle = ::std::option::Option::None;
    }

    pub fn has_ehandle(&self) -> bool {
        self.ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ehandle(&mut self, v: i32) {
        self.ehandle = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for DestroyEntityToolEvent {
    const NAME: &'static str = "DestroyEntityToolEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ehandle = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ehandle {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ehandle {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DestroyEntityToolEvent {
        DestroyEntityToolEvent::new()
    }

    fn clear(&mut self) {
        self.ehandle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DestroyEntityToolEvent {
        static instance: DestroyEntityToolEvent = DestroyEntityToolEvent {
            ehandle: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:DestroyAllEntitiesToolEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DestroyAllEntitiesToolEvent {
    // special fields
    // @@protoc_insertion_point(special_field:DestroyAllEntitiesToolEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DestroyAllEntitiesToolEvent {
    fn default() -> &'a DestroyAllEntitiesToolEvent {
        <DestroyAllEntitiesToolEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl DestroyAllEntitiesToolEvent {
    pub fn new() -> DestroyAllEntitiesToolEvent {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for DestroyAllEntitiesToolEvent {
    const NAME: &'static str = "DestroyAllEntitiesToolEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DestroyAllEntitiesToolEvent {
        DestroyAllEntitiesToolEvent::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DestroyAllEntitiesToolEvent {
        static instance: DestroyAllEntitiesToolEvent = DestroyAllEntitiesToolEvent {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:RestartMapToolEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RestartMapToolEvent {
    // special fields
    // @@protoc_insertion_point(special_field:RestartMapToolEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RestartMapToolEvent {
    fn default() -> &'a RestartMapToolEvent {
        <RestartMapToolEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl RestartMapToolEvent {
    pub fn new() -> RestartMapToolEvent {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for RestartMapToolEvent {
    const NAME: &'static str = "RestartMapToolEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RestartMapToolEvent {
        RestartMapToolEvent::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RestartMapToolEvent {
        static instance: RestartMapToolEvent = RestartMapToolEvent {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_GetEntityInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_GetEntityInfo {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfo.ehandle)
    pub ehandle: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfo.clientsideentity)
    pub clientsideentity: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_GetEntityInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_GetEntityInfo {
    fn default() -> &'a ToolEvent_GetEntityInfo {
        <ToolEvent_GetEntityInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_GetEntityInfo {
    pub fn new() -> ToolEvent_GetEntityInfo {
        ::std::default::Default::default()
    }

    // optional int32 ehandle = 1;

    pub fn ehandle(&self) -> i32 {
        self.ehandle.unwrap_or(0)
    }

    pub fn clear_ehandle(&mut self) {
        self.ehandle = ::std::option::Option::None;
    }

    pub fn has_ehandle(&self) -> bool {
        self.ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ehandle(&mut self, v: i32) {
        self.ehandle = ::std::option::Option::Some(v);
    }

    // optional bool clientsideentity = 2;

    pub fn clientsideentity(&self) -> bool {
        self.clientsideentity.unwrap_or(false)
    }

    pub fn clear_clientsideentity(&mut self) {
        self.clientsideentity = ::std::option::Option::None;
    }

    pub fn has_clientsideentity(&self) -> bool {
        self.clientsideentity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientsideentity(&mut self, v: bool) {
        self.clientsideentity = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_GetEntityInfo {
    const NAME: &'static str = "ToolEvent_GetEntityInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ehandle = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.clientsideentity = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ehandle {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.clientsideentity {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ehandle {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.clientsideentity {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_GetEntityInfo {
        ToolEvent_GetEntityInfo::new()
    }

    fn clear(&mut self) {
        self.ehandle = ::std::option::Option::None;
        self.clientsideentity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_GetEntityInfo {
        static instance: ToolEvent_GetEntityInfo = ToolEvent_GetEntityInfo {
            ehandle: ::std::option::Option::None,
            clientsideentity: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_GetEntityInfoResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_GetEntityInfoResult {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfoResult.cppclass)
    pub cppclass: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfoResult.classname)
    pub classname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfoResult.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfoResult.origin)
    pub origin: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfoResult.mins)
    pub mins: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInfoResult.maxs)
    pub maxs: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_GetEntityInfoResult.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_GetEntityInfoResult {
    fn default() -> &'a ToolEvent_GetEntityInfoResult {
        <ToolEvent_GetEntityInfoResult as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_GetEntityInfoResult {
    pub fn new() -> ToolEvent_GetEntityInfoResult {
        ::std::default::Default::default()
    }

    // optional string cppclass = 1;

    pub fn cppclass(&self) -> &str {
        match self.cppclass.as_ref() {
            Some(v) => v,
            None => "shithead",
        }
    }

    pub fn clear_cppclass(&mut self) {
        self.cppclass = ::std::option::Option::None;
    }

    pub fn has_cppclass(&self) -> bool {
        self.cppclass.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cppclass(&mut self, v: ::std::string::String) {
        self.cppclass = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cppclass(&mut self) -> &mut ::std::string::String {
        if self.cppclass.is_none() {
            self.cppclass = ::std::option::Option::Some(::std::string::String::new());
        }
        self.cppclass.as_mut().unwrap()
    }

    // Take field
    pub fn take_cppclass(&mut self) -> ::std::string::String {
        self.cppclass.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string classname = 2;

    pub fn classname(&self) -> &str {
        match self.classname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_classname(&mut self) {
        self.classname = ::std::option::Option::None;
    }

    pub fn has_classname(&self) -> bool {
        self.classname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_classname(&mut self, v: ::std::string::String) {
        self.classname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_classname(&mut self) -> &mut ::std::string::String {
        if self.classname.is_none() {
            self.classname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.classname.as_mut().unwrap()
    }

    // Take field
    pub fn take_classname(&mut self) -> ::std::string::String {
        self.classname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 3;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_GetEntityInfoResult {
    const NAME: &'static str = "ToolEvent_GetEntityInfoResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cppclass = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.classname = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.origin)?;
                },
                42 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.mins)?;
                },
                50 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.maxs)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cppclass.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.classname.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.origin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mins.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.maxs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.cppclass.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.classname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.origin.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.mins.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.maxs.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_GetEntityInfoResult {
        ToolEvent_GetEntityInfoResult::new()
    }

    fn clear(&mut self) {
        self.cppclass = ::std::option::Option::None;
        self.classname = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.origin.clear();
        self.mins.clear();
        self.maxs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_GetEntityInfoResult {
        static instance: ToolEvent_GetEntityInfoResult = ToolEvent_GetEntityInfoResult {
            cppclass: ::std::option::Option::None,
            classname: ::std::option::Option::None,
            name: ::std::option::Option::None,
            origin: ::steam_vent_proto_common::protobuf::MessageField::none(),
            mins: ::steam_vent_proto_common::protobuf::MessageField::none(),
            maxs: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_GetEntityInputs)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_GetEntityInputs {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInputs.ehandle)
    pub ehandle: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInputs.clientsideentity)
    pub clientsideentity: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_GetEntityInputs.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_GetEntityInputs {
    fn default() -> &'a ToolEvent_GetEntityInputs {
        <ToolEvent_GetEntityInputs as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_GetEntityInputs {
    pub fn new() -> ToolEvent_GetEntityInputs {
        ::std::default::Default::default()
    }

    // optional int32 ehandle = 1;

    pub fn ehandle(&self) -> i32 {
        self.ehandle.unwrap_or(0)
    }

    pub fn clear_ehandle(&mut self) {
        self.ehandle = ::std::option::Option::None;
    }

    pub fn has_ehandle(&self) -> bool {
        self.ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ehandle(&mut self, v: i32) {
        self.ehandle = ::std::option::Option::Some(v);
    }

    // optional bool clientsideentity = 2;

    pub fn clientsideentity(&self) -> bool {
        self.clientsideentity.unwrap_or(false)
    }

    pub fn clear_clientsideentity(&mut self) {
        self.clientsideentity = ::std::option::Option::None;
    }

    pub fn has_clientsideentity(&self) -> bool {
        self.clientsideentity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientsideentity(&mut self, v: bool) {
        self.clientsideentity = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_GetEntityInputs {
    const NAME: &'static str = "ToolEvent_GetEntityInputs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ehandle = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.clientsideentity = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ehandle {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.clientsideentity {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ehandle {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.clientsideentity {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_GetEntityInputs {
        ToolEvent_GetEntityInputs::new()
    }

    fn clear(&mut self) {
        self.ehandle = ::std::option::Option::None;
        self.clientsideentity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_GetEntityInputs {
        static instance: ToolEvent_GetEntityInputs = ToolEvent_GetEntityInputs {
            ehandle: ::std::option::Option::None,
            clientsideentity: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_GetEntityInputsResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_GetEntityInputsResult {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_GetEntityInputsResult.input_list)
    pub input_list: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_GetEntityInputsResult.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_GetEntityInputsResult {
    fn default() -> &'a ToolEvent_GetEntityInputsResult {
        <ToolEvent_GetEntityInputsResult as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_GetEntityInputsResult {
    pub fn new() -> ToolEvent_GetEntityInputsResult {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_GetEntityInputsResult {
    const NAME: &'static str = "ToolEvent_GetEntityInputsResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.input_list.push(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.input_list {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.input_list {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_GetEntityInputsResult {
        ToolEvent_GetEntityInputsResult::new()
    }

    fn clear(&mut self) {
        self.input_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_GetEntityInputsResult {
        static instance: ToolEvent_GetEntityInputsResult = ToolEvent_GetEntityInputsResult {
            input_list: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_FireEntityInput)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_FireEntityInput {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_FireEntityInput.ehandle)
    pub ehandle: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:ToolEvent_FireEntityInput.clientsideentity)
    pub clientsideentity: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ToolEvent_FireEntityInput.input_name)
    pub input_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ToolEvent_FireEntityInput.input_param)
    pub input_param: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_FireEntityInput.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_FireEntityInput {
    fn default() -> &'a ToolEvent_FireEntityInput {
        <ToolEvent_FireEntityInput as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_FireEntityInput {
    pub fn new() -> ToolEvent_FireEntityInput {
        ::std::default::Default::default()
    }

    // optional int32 ehandle = 1;

    pub fn ehandle(&self) -> i32 {
        self.ehandle.unwrap_or(0)
    }

    pub fn clear_ehandle(&mut self) {
        self.ehandle = ::std::option::Option::None;
    }

    pub fn has_ehandle(&self) -> bool {
        self.ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ehandle(&mut self, v: i32) {
        self.ehandle = ::std::option::Option::Some(v);
    }

    // optional bool clientsideentity = 2;

    pub fn clientsideentity(&self) -> bool {
        self.clientsideentity.unwrap_or(false)
    }

    pub fn clear_clientsideentity(&mut self) {
        self.clientsideentity = ::std::option::Option::None;
    }

    pub fn has_clientsideentity(&self) -> bool {
        self.clientsideentity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientsideentity(&mut self, v: bool) {
        self.clientsideentity = ::std::option::Option::Some(v);
    }

    // optional string input_name = 3;

    pub fn input_name(&self) -> &str {
        match self.input_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_input_name(&mut self) {
        self.input_name = ::std::option::Option::None;
    }

    pub fn has_input_name(&self) -> bool {
        self.input_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input_name(&mut self, v: ::std::string::String) {
        self.input_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input_name(&mut self) -> &mut ::std::string::String {
        if self.input_name.is_none() {
            self.input_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.input_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_input_name(&mut self) -> ::std::string::String {
        self.input_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string input_param = 4;

    pub fn input_param(&self) -> &str {
        match self.input_param.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_input_param(&mut self) {
        self.input_param = ::std::option::Option::None;
    }

    pub fn has_input_param(&self) -> bool {
        self.input_param.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input_param(&mut self, v: ::std::string::String) {
        self.input_param = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input_param(&mut self) -> &mut ::std::string::String {
        if self.input_param.is_none() {
            self.input_param = ::std::option::Option::Some(::std::string::String::new());
        }
        self.input_param.as_mut().unwrap()
    }

    // Take field
    pub fn take_input_param(&mut self) -> ::std::string::String {
        self.input_param.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_FireEntityInput {
    const NAME: &'static str = "ToolEvent_FireEntityInput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ehandle = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.clientsideentity = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.input_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.input_param = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ehandle {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.clientsideentity {
            my_size += 1 + 1;
        }
        if let Some(v) = self.input_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.input_param.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ehandle {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.clientsideentity {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.input_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.input_param.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_FireEntityInput {
        ToolEvent_FireEntityInput::new()
    }

    fn clear(&mut self) {
        self.ehandle = ::std::option::Option::None;
        self.clientsideentity = ::std::option::Option::None;
        self.input_name = ::std::option::Option::None;
        self.input_param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_FireEntityInput {
        static instance: ToolEvent_FireEntityInput = ToolEvent_FireEntityInput {
            ehandle: ::std::option::Option::None,
            clientsideentity: ::std::option::Option::None,
            input_name: ::std::option::Option::None,
            input_param: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_SFMRecordingStateChanged)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_SFMRecordingStateChanged {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_SFMRecordingStateChanged.isrecording)
    pub isrecording: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_SFMRecordingStateChanged.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_SFMRecordingStateChanged {
    fn default() -> &'a ToolEvent_SFMRecordingStateChanged {
        <ToolEvent_SFMRecordingStateChanged as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_SFMRecordingStateChanged {
    pub fn new() -> ToolEvent_SFMRecordingStateChanged {
        ::std::default::Default::default()
    }

    // optional bool isrecording = 1;

    pub fn isrecording(&self) -> bool {
        self.isrecording.unwrap_or(false)
    }

    pub fn clear_isrecording(&mut self) {
        self.isrecording = ::std::option::Option::None;
    }

    pub fn has_isrecording(&self) -> bool {
        self.isrecording.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isrecording(&mut self, v: bool) {
        self.isrecording = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_SFMRecordingStateChanged {
    const NAME: &'static str = "ToolEvent_SFMRecordingStateChanged";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.isrecording = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.isrecording {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.isrecording {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_SFMRecordingStateChanged {
        ToolEvent_SFMRecordingStateChanged::new()
    }

    fn clear(&mut self) {
        self.isrecording = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_SFMRecordingStateChanged {
        static instance: ToolEvent_SFMRecordingStateChanged = ToolEvent_SFMRecordingStateChanged {
            isrecording: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ToolEvent_SFMToolActiveStateChanged)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ToolEvent_SFMToolActiveStateChanged {
    // message fields
    // @@protoc_insertion_point(field:ToolEvent_SFMToolActiveStateChanged.isactive)
    pub isactive: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ToolEvent_SFMToolActiveStateChanged.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ToolEvent_SFMToolActiveStateChanged {
    fn default() -> &'a ToolEvent_SFMToolActiveStateChanged {
        <ToolEvent_SFMToolActiveStateChanged as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ToolEvent_SFMToolActiveStateChanged {
    pub fn new() -> ToolEvent_SFMToolActiveStateChanged {
        ::std::default::Default::default()
    }

    // optional bool isactive = 1;

    pub fn isactive(&self) -> bool {
        self.isactive.unwrap_or(false)
    }

    pub fn clear_isactive(&mut self) {
        self.isactive = ::std::option::Option::None;
    }

    pub fn has_isactive(&self) -> bool {
        self.isactive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isactive(&mut self, v: bool) {
        self.isactive = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ToolEvent_SFMToolActiveStateChanged {
    const NAME: &'static str = "ToolEvent_SFMToolActiveStateChanged";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.isactive = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.isactive {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.isactive {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ToolEvent_SFMToolActiveStateChanged {
        ToolEvent_SFMToolActiveStateChanged::new()
    }

    fn clear(&mut self) {
        self.isactive = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ToolEvent_SFMToolActiveStateChanged {
        static instance: ToolEvent_SFMToolActiveStateChanged = ToolEvent_SFMToolActiveStateChanged {
            isactive: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::networkbasetypes::*;
impl ::steam_vent_proto_common::RpcMessage for ChangeMapToolEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for TraceRayServerToolEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolTraceRayResult {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for SpawnEntityToolEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for SpawnEntityToolEventResult {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for DestroyEntityToolEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for DestroyAllEntitiesToolEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for RestartMapToolEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_GetEntityInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_GetEntityInfoResult {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_GetEntityInputs {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_GetEntityInputsResult {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_FireEntityInput {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_SFMRecordingStateChanged {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ToolEvent_SFMToolActiveStateChanged {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
