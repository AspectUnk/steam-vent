// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgProtoBufHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgProtoBufHeader {
    // message fields
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.client_session_id)
    pub client_session_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.source_app_id)
    pub source_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.job_id_source)
    pub job_id_source: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.job_id_target)
    pub job_id_target: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.target_job_name)
    pub target_job_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.error_message)
    pub error_message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.gc_msg_src)
    pub gc_msg_src: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<GCProtoBufMsgSrc>>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.gc_dir_index_source)
    pub gc_dir_index_source: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgProtoBufHeader.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgProtoBufHeader {
    fn default() -> &'a CMsgProtoBufHeader {
        <CMsgProtoBufHeader as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgProtoBufHeader {
    pub fn new() -> CMsgProtoBufHeader {
        ::std::default::Default::default()
    }

    // optional fixed64 client_steam_id = 1;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional int32 client_session_id = 2;

    pub fn client_session_id(&self) -> i32 {
        self.client_session_id.unwrap_or(0)
    }

    pub fn clear_client_session_id(&mut self) {
        self.client_session_id = ::std::option::Option::None;
    }

    pub fn has_client_session_id(&self) -> bool {
        self.client_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_session_id(&mut self, v: i32) {
        self.client_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 source_app_id = 3;

    pub fn source_app_id(&self) -> u32 {
        self.source_app_id.unwrap_or(0)
    }

    pub fn clear_source_app_id(&mut self) {
        self.source_app_id = ::std::option::Option::None;
    }

    pub fn has_source_app_id(&self) -> bool {
        self.source_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_app_id(&mut self, v: u32) {
        self.source_app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 job_id_source = 10;

    pub fn job_id_source(&self) -> u64 {
        self.job_id_source.unwrap_or(18446744073709551615u64)
    }

    pub fn clear_job_id_source(&mut self) {
        self.job_id_source = ::std::option::Option::None;
    }

    pub fn has_job_id_source(&self) -> bool {
        self.job_id_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id_source(&mut self, v: u64) {
        self.job_id_source = ::std::option::Option::Some(v);
    }

    // optional fixed64 job_id_target = 11;

    pub fn job_id_target(&self) -> u64 {
        self.job_id_target.unwrap_or(18446744073709551615u64)
    }

    pub fn clear_job_id_target(&mut self) {
        self.job_id_target = ::std::option::Option::None;
    }

    pub fn has_job_id_target(&self) -> bool {
        self.job_id_target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id_target(&mut self, v: u64) {
        self.job_id_target = ::std::option::Option::Some(v);
    }

    // optional string target_job_name = 12;

    pub fn target_job_name(&self) -> &str {
        match self.target_job_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_target_job_name(&mut self) {
        self.target_job_name = ::std::option::Option::None;
    }

    pub fn has_target_job_name(&self) -> bool {
        self.target_job_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_job_name(&mut self, v: ::std::string::String) {
        self.target_job_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_job_name(&mut self) -> &mut ::std::string::String {
        if self.target_job_name.is_none() {
            self.target_job_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.target_job_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_target_job_name(&mut self) -> ::std::string::String {
        self.target_job_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 eresult = 13;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string error_message = 14;

    pub fn error_message(&self) -> &str {
        match self.error_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_message(&mut self) {
        self.error_message = ::std::option::Option::None;
    }

    pub fn has_error_message(&self) -> bool {
        self.error_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        if self.error_message.is_none() {
            self.error_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        self.error_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .GCProtoBufMsgSrc gc_msg_src = 200;

    pub fn gc_msg_src(&self) -> GCProtoBufMsgSrc {
        match self.gc_msg_src {
            Some(e) => e.enum_value_or(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            None => GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified,
        }
    }

    pub fn clear_gc_msg_src(&mut self) {
        self.gc_msg_src = ::std::option::Option::None;
    }

    pub fn has_gc_msg_src(&self) -> bool {
        self.gc_msg_src.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_msg_src(&mut self, v: GCProtoBufMsgSrc) {
        self.gc_msg_src = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 gc_dir_index_source = 201;

    pub fn gc_dir_index_source(&self) -> i32 {
        self.gc_dir_index_source.unwrap_or(-1i32)
    }

    pub fn clear_gc_dir_index_source(&mut self) {
        self.gc_dir_index_source = ::std::option::Option::None;
    }

    pub fn has_gc_dir_index_source(&self) -> bool {
        self.gc_dir_index_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_dir_index_source(&mut self, v: i32) {
        self.gc_dir_index_source = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgProtoBufHeader {
    const NAME: &'static str = "CMsgProtoBufHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.client_session_id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.source_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.job_id_source = ::std::option::Option::Some(is.read_fixed64()?);
                },
                89 => {
                    self.job_id_target = ::std::option::Option::Some(is.read_fixed64()?);
                },
                98 => {
                    self.target_job_name = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                114 => {
                    self.error_message = ::std::option::Option::Some(is.read_string()?);
                },
                1600 => {
                    self.gc_msg_src = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                1608 => {
                    self.gc_dir_index_source = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_session_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.source_app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.job_id_source {
            my_size += 1 + 8;
        }
        if let Some(v) = self.job_id_target {
            my_size += 1 + 8;
        }
        if let Some(v) = self.target_job_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(13, v);
        }
        if let Some(v) = self.error_message.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.gc_msg_src {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(200, v.value());
        }
        if let Some(v) = self.gc_dir_index_source {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(201, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_session_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.source_app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.job_id_source {
            os.write_fixed64(10, v)?;
        }
        if let Some(v) = self.job_id_target {
            os.write_fixed64(11, v)?;
        }
        if let Some(v) = self.target_job_name.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.error_message.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.gc_msg_src {
            os.write_enum(200, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gc_dir_index_source {
            os.write_int32(201, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgProtoBufHeader {
        CMsgProtoBufHeader::new()
    }

    fn clear(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
        self.client_session_id = ::std::option::Option::None;
        self.source_app_id = ::std::option::Option::None;
        self.job_id_source = ::std::option::Option::None;
        self.job_id_target = ::std::option::Option::None;
        self.target_job_name = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.error_message = ::std::option::Option::None;
        self.gc_msg_src = ::std::option::Option::None;
        self.gc_dir_index_source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgProtoBufHeader {
        static instance: CMsgProtoBufHeader = CMsgProtoBufHeader {
            client_steam_id: ::std::option::Option::None,
            client_session_id: ::std::option::Option::None,
            source_app_id: ::std::option::Option::None,
            job_id_source: ::std::option::Option::None,
            job_id_target: ::std::option::Option::None,
            target_job_name: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            error_message: ::std::option::Option::None,
            gc_msg_src: ::std::option::Option::None,
            gc_dir_index_source: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCSystemMsg_GetAccountDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetAccountDetails {
    // message fields
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCSystemMsg_GetAccountDetails.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetAccountDetails {
    fn default() -> &'a CGCSystemMsg_GetAccountDetails {
        <CGCSystemMsg_GetAccountDetails as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetAccountDetails {
    pub fn new() -> CGCSystemMsg_GetAccountDetails {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCSystemMsg_GetAccountDetails {
    const NAME: &'static str = "CGCSystemMsg_GetAccountDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetAccountDetails {
        CGCSystemMsg_GetAccountDetails::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetAccountDetails {
        static instance: CGCSystemMsg_GetAccountDetails = CGCSystemMsg_GetAccountDetails {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCSystemMsg_GetAccountDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetAccountDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.eresult_deprecated)
    pub eresult_deprecated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.account_name)
    pub account_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_profile_created)
    pub is_profile_created: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_profile_public)
    pub is_profile_public: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_inventory_public)
    pub is_inventory_public: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_vac_banned)
    pub is_vac_banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_cyber_cafe)
    pub is_cyber_cafe: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_school_account)
    pub is_school_account: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_limited)
    pub is_limited: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_subscribed)
    pub is_subscribed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.package)
    pub package: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_free_trial_account)
    pub is_free_trial_account: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.free_trial_expiration)
    pub free_trial_expiration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_low_violence)
    pub is_low_violence: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_account_locked_down)
    pub is_account_locked_down: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_community_banned)
    pub is_community_banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_trade_banned)
    pub is_trade_banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.trade_ban_expiration)
    pub trade_ban_expiration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.suspension_end_time)
    pub suspension_end_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.currency)
    pub currency: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.steam_level)
    pub steam_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.friend_count)
    pub friend_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.account_creation_time)
    pub account_creation_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_steamguard_enabled)
    pub is_steamguard_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_phone_verified)
    pub is_phone_verified: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_two_factor_auth_enabled)
    pub is_two_factor_auth_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.two_factor_enabled_time)
    pub two_factor_enabled_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.phone_verification_time)
    pub phone_verification_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.phone_id)
    pub phone_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_phone_identifying)
    pub is_phone_identifying: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.rt_identity_linked)
    pub rt_identity_linked: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.rt_birth_date)
    pub rt_birth_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
    pub txn_country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.has_accepted_china_ssa)
    pub has_accepted_china_ssa: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGCSystemMsg_GetAccountDetails_Response.is_banned_steam_china)
    pub is_banned_steam_china: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCSystemMsg_GetAccountDetails_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetAccountDetails_Response {
    fn default() -> &'a CGCSystemMsg_GetAccountDetails_Response {
        <CGCSystemMsg_GetAccountDetails_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetAccountDetails_Response {
    pub fn new() -> CGCSystemMsg_GetAccountDetails_Response {
        ::std::default::Default::default()
    }

    // optional uint32 eresult_deprecated = 1;

    pub fn eresult_deprecated(&self) -> u32 {
        self.eresult_deprecated.unwrap_or(2u32)
    }

    pub fn clear_eresult_deprecated(&mut self) {
        self.eresult_deprecated = ::std::option::Option::None;
    }

    pub fn has_eresult_deprecated(&self) -> bool {
        self.eresult_deprecated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult_deprecated(&mut self, v: u32) {
        self.eresult_deprecated = ::std::option::Option::Some(v);
    }

    // optional string account_name = 2;

    pub fn account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_name(&mut self) {
        self.account_name = ::std::option::Option::None;
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string persona_name = 3;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_profile_created = 26;

    pub fn is_profile_created(&self) -> bool {
        self.is_profile_created.unwrap_or(false)
    }

    pub fn clear_is_profile_created(&mut self) {
        self.is_profile_created = ::std::option::Option::None;
    }

    pub fn has_is_profile_created(&self) -> bool {
        self.is_profile_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_profile_created(&mut self, v: bool) {
        self.is_profile_created = ::std::option::Option::Some(v);
    }

    // optional bool is_profile_public = 4;

    pub fn is_profile_public(&self) -> bool {
        self.is_profile_public.unwrap_or(false)
    }

    pub fn clear_is_profile_public(&mut self) {
        self.is_profile_public = ::std::option::Option::None;
    }

    pub fn has_is_profile_public(&self) -> bool {
        self.is_profile_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_profile_public(&mut self, v: bool) {
        self.is_profile_public = ::std::option::Option::Some(v);
    }

    // optional bool is_inventory_public = 5;

    pub fn is_inventory_public(&self) -> bool {
        self.is_inventory_public.unwrap_or(false)
    }

    pub fn clear_is_inventory_public(&mut self) {
        self.is_inventory_public = ::std::option::Option::None;
    }

    pub fn has_is_inventory_public(&self) -> bool {
        self.is_inventory_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_inventory_public(&mut self, v: bool) {
        self.is_inventory_public = ::std::option::Option::Some(v);
    }

    // optional bool is_vac_banned = 7;

    pub fn is_vac_banned(&self) -> bool {
        self.is_vac_banned.unwrap_or(false)
    }

    pub fn clear_is_vac_banned(&mut self) {
        self.is_vac_banned = ::std::option::Option::None;
    }

    pub fn has_is_vac_banned(&self) -> bool {
        self.is_vac_banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_vac_banned(&mut self, v: bool) {
        self.is_vac_banned = ::std::option::Option::Some(v);
    }

    // optional bool is_cyber_cafe = 8;

    pub fn is_cyber_cafe(&self) -> bool {
        self.is_cyber_cafe.unwrap_or(false)
    }

    pub fn clear_is_cyber_cafe(&mut self) {
        self.is_cyber_cafe = ::std::option::Option::None;
    }

    pub fn has_is_cyber_cafe(&self) -> bool {
        self.is_cyber_cafe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_cyber_cafe(&mut self, v: bool) {
        self.is_cyber_cafe = ::std::option::Option::Some(v);
    }

    // optional bool is_school_account = 9;

    pub fn is_school_account(&self) -> bool {
        self.is_school_account.unwrap_or(false)
    }

    pub fn clear_is_school_account(&mut self) {
        self.is_school_account = ::std::option::Option::None;
    }

    pub fn has_is_school_account(&self) -> bool {
        self.is_school_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_school_account(&mut self, v: bool) {
        self.is_school_account = ::std::option::Option::Some(v);
    }

    // optional bool is_limited = 10;

    pub fn is_limited(&self) -> bool {
        self.is_limited.unwrap_or(false)
    }

    pub fn clear_is_limited(&mut self) {
        self.is_limited = ::std::option::Option::None;
    }

    pub fn has_is_limited(&self) -> bool {
        self.is_limited.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_limited(&mut self, v: bool) {
        self.is_limited = ::std::option::Option::Some(v);
    }

    // optional bool is_subscribed = 11;

    pub fn is_subscribed(&self) -> bool {
        self.is_subscribed.unwrap_or(false)
    }

    pub fn clear_is_subscribed(&mut self) {
        self.is_subscribed = ::std::option::Option::None;
    }

    pub fn has_is_subscribed(&self) -> bool {
        self.is_subscribed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_subscribed(&mut self, v: bool) {
        self.is_subscribed = ::std::option::Option::Some(v);
    }

    // optional uint32 package = 12;

    pub fn package(&self) -> u32 {
        self.package.unwrap_or(0)
    }

    pub fn clear_package(&mut self) {
        self.package = ::std::option::Option::None;
    }

    pub fn has_package(&self) -> bool {
        self.package.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: u32) {
        self.package = ::std::option::Option::Some(v);
    }

    // optional bool is_free_trial_account = 13;

    pub fn is_free_trial_account(&self) -> bool {
        self.is_free_trial_account.unwrap_or(false)
    }

    pub fn clear_is_free_trial_account(&mut self) {
        self.is_free_trial_account = ::std::option::Option::None;
    }

    pub fn has_is_free_trial_account(&self) -> bool {
        self.is_free_trial_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_free_trial_account(&mut self, v: bool) {
        self.is_free_trial_account = ::std::option::Option::Some(v);
    }

    // optional uint32 free_trial_expiration = 14;

    pub fn free_trial_expiration(&self) -> u32 {
        self.free_trial_expiration.unwrap_or(0)
    }

    pub fn clear_free_trial_expiration(&mut self) {
        self.free_trial_expiration = ::std::option::Option::None;
    }

    pub fn has_free_trial_expiration(&self) -> bool {
        self.free_trial_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_free_trial_expiration(&mut self, v: u32) {
        self.free_trial_expiration = ::std::option::Option::Some(v);
    }

    // optional bool is_low_violence = 15;

    pub fn is_low_violence(&self) -> bool {
        self.is_low_violence.unwrap_or(false)
    }

    pub fn clear_is_low_violence(&mut self) {
        self.is_low_violence = ::std::option::Option::None;
    }

    pub fn has_is_low_violence(&self) -> bool {
        self.is_low_violence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_low_violence(&mut self, v: bool) {
        self.is_low_violence = ::std::option::Option::Some(v);
    }

    // optional bool is_account_locked_down = 16;

    pub fn is_account_locked_down(&self) -> bool {
        self.is_account_locked_down.unwrap_or(false)
    }

    pub fn clear_is_account_locked_down(&mut self) {
        self.is_account_locked_down = ::std::option::Option::None;
    }

    pub fn has_is_account_locked_down(&self) -> bool {
        self.is_account_locked_down.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_account_locked_down(&mut self, v: bool) {
        self.is_account_locked_down = ::std::option::Option::Some(v);
    }

    // optional bool is_community_banned = 17;

    pub fn is_community_banned(&self) -> bool {
        self.is_community_banned.unwrap_or(false)
    }

    pub fn clear_is_community_banned(&mut self) {
        self.is_community_banned = ::std::option::Option::None;
    }

    pub fn has_is_community_banned(&self) -> bool {
        self.is_community_banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_community_banned(&mut self, v: bool) {
        self.is_community_banned = ::std::option::Option::Some(v);
    }

    // optional bool is_trade_banned = 18;

    pub fn is_trade_banned(&self) -> bool {
        self.is_trade_banned.unwrap_or(false)
    }

    pub fn clear_is_trade_banned(&mut self) {
        self.is_trade_banned = ::std::option::Option::None;
    }

    pub fn has_is_trade_banned(&self) -> bool {
        self.is_trade_banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_trade_banned(&mut self, v: bool) {
        self.is_trade_banned = ::std::option::Option::Some(v);
    }

    // optional uint32 trade_ban_expiration = 19;

    pub fn trade_ban_expiration(&self) -> u32 {
        self.trade_ban_expiration.unwrap_or(0)
    }

    pub fn clear_trade_ban_expiration(&mut self) {
        self.trade_ban_expiration = ::std::option::Option::None;
    }

    pub fn has_trade_ban_expiration(&self) -> bool {
        self.trade_ban_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trade_ban_expiration(&mut self, v: u32) {
        self.trade_ban_expiration = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid = 20;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional uint32 suspension_end_time = 21;

    pub fn suspension_end_time(&self) -> u32 {
        self.suspension_end_time.unwrap_or(0)
    }

    pub fn clear_suspension_end_time(&mut self) {
        self.suspension_end_time = ::std::option::Option::None;
    }

    pub fn has_suspension_end_time(&self) -> bool {
        self.suspension_end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suspension_end_time(&mut self, v: u32) {
        self.suspension_end_time = ::std::option::Option::Some(v);
    }

    // optional string currency = 22;

    pub fn currency(&self) -> &str {
        match self.currency.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_currency(&mut self) {
        self.currency = ::std::option::Option::None;
    }

    pub fn has_currency(&self) -> bool {
        self.currency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        if self.currency.is_none() {
            self.currency = ::std::option::Option::Some(::std::string::String::new());
        }
        self.currency.as_mut().unwrap()
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        self.currency.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 steam_level = 23;

    pub fn steam_level(&self) -> u32 {
        self.steam_level.unwrap_or(0)
    }

    pub fn clear_steam_level(&mut self) {
        self.steam_level = ::std::option::Option::None;
    }

    pub fn has_steam_level(&self) -> bool {
        self.steam_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_level(&mut self, v: u32) {
        self.steam_level = ::std::option::Option::Some(v);
    }

    // optional uint32 friend_count = 24;

    pub fn friend_count(&self) -> u32 {
        self.friend_count.unwrap_or(0)
    }

    pub fn clear_friend_count(&mut self) {
        self.friend_count = ::std::option::Option::None;
    }

    pub fn has_friend_count(&self) -> bool {
        self.friend_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_count(&mut self, v: u32) {
        self.friend_count = ::std::option::Option::Some(v);
    }

    // optional uint32 account_creation_time = 25;

    pub fn account_creation_time(&self) -> u32 {
        self.account_creation_time.unwrap_or(0)
    }

    pub fn clear_account_creation_time(&mut self) {
        self.account_creation_time = ::std::option::Option::None;
    }

    pub fn has_account_creation_time(&self) -> bool {
        self.account_creation_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_creation_time(&mut self, v: u32) {
        self.account_creation_time = ::std::option::Option::Some(v);
    }

    // optional bool is_steamguard_enabled = 27;

    pub fn is_steamguard_enabled(&self) -> bool {
        self.is_steamguard_enabled.unwrap_or(false)
    }

    pub fn clear_is_steamguard_enabled(&mut self) {
        self.is_steamguard_enabled = ::std::option::Option::None;
    }

    pub fn has_is_steamguard_enabled(&self) -> bool {
        self.is_steamguard_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steamguard_enabled(&mut self, v: bool) {
        self.is_steamguard_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_verified = 28;

    pub fn is_phone_verified(&self) -> bool {
        self.is_phone_verified.unwrap_or(false)
    }

    pub fn clear_is_phone_verified(&mut self) {
        self.is_phone_verified = ::std::option::Option::None;
    }

    pub fn has_is_phone_verified(&self) -> bool {
        self.is_phone_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_verified(&mut self, v: bool) {
        self.is_phone_verified = ::std::option::Option::Some(v);
    }

    // optional bool is_two_factor_auth_enabled = 29;

    pub fn is_two_factor_auth_enabled(&self) -> bool {
        self.is_two_factor_auth_enabled.unwrap_or(false)
    }

    pub fn clear_is_two_factor_auth_enabled(&mut self) {
        self.is_two_factor_auth_enabled = ::std::option::Option::None;
    }

    pub fn has_is_two_factor_auth_enabled(&self) -> bool {
        self.is_two_factor_auth_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_two_factor_auth_enabled(&mut self, v: bool) {
        self.is_two_factor_auth_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 two_factor_enabled_time = 30;

    pub fn two_factor_enabled_time(&self) -> u32 {
        self.two_factor_enabled_time.unwrap_or(0)
    }

    pub fn clear_two_factor_enabled_time(&mut self) {
        self.two_factor_enabled_time = ::std::option::Option::None;
    }

    pub fn has_two_factor_enabled_time(&self) -> bool {
        self.two_factor_enabled_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two_factor_enabled_time(&mut self, v: u32) {
        self.two_factor_enabled_time = ::std::option::Option::Some(v);
    }

    // optional uint32 phone_verification_time = 31;

    pub fn phone_verification_time(&self) -> u32 {
        self.phone_verification_time.unwrap_or(0)
    }

    pub fn clear_phone_verification_time(&mut self) {
        self.phone_verification_time = ::std::option::Option::None;
    }

    pub fn has_phone_verification_time(&self) -> bool {
        self.phone_verification_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_verification_time(&mut self, v: u32) {
        self.phone_verification_time = ::std::option::Option::Some(v);
    }

    // optional uint64 phone_id = 33;

    pub fn phone_id(&self) -> u64 {
        self.phone_id.unwrap_or(0)
    }

    pub fn clear_phone_id(&mut self) {
        self.phone_id = ::std::option::Option::None;
    }

    pub fn has_phone_id(&self) -> bool {
        self.phone_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_id(&mut self, v: u64) {
        self.phone_id = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_identifying = 34;

    pub fn is_phone_identifying(&self) -> bool {
        self.is_phone_identifying.unwrap_or(false)
    }

    pub fn clear_is_phone_identifying(&mut self) {
        self.is_phone_identifying = ::std::option::Option::None;
    }

    pub fn has_is_phone_identifying(&self) -> bool {
        self.is_phone_identifying.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_identifying(&mut self, v: bool) {
        self.is_phone_identifying = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_identity_linked = 35;

    pub fn rt_identity_linked(&self) -> u32 {
        self.rt_identity_linked.unwrap_or(0)
    }

    pub fn clear_rt_identity_linked(&mut self) {
        self.rt_identity_linked = ::std::option::Option::None;
    }

    pub fn has_rt_identity_linked(&self) -> bool {
        self.rt_identity_linked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_identity_linked(&mut self, v: u32) {
        self.rt_identity_linked = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_birth_date = 36;

    pub fn rt_birth_date(&self) -> u32 {
        self.rt_birth_date.unwrap_or(0)
    }

    pub fn clear_rt_birth_date(&mut self) {
        self.rt_birth_date = ::std::option::Option::None;
    }

    pub fn has_rt_birth_date(&self) -> bool {
        self.rt_birth_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_birth_date(&mut self, v: u32) {
        self.rt_birth_date = ::std::option::Option::Some(v);
    }

    // optional string txn_country_code = 37;

    pub fn txn_country_code(&self) -> &str {
        match self.txn_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_txn_country_code(&mut self) {
        self.txn_country_code = ::std::option::Option::None;
    }

    pub fn has_txn_country_code(&self) -> bool {
        self.txn_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txn_country_code(&mut self, v: ::std::string::String) {
        self.txn_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn_country_code(&mut self) -> &mut ::std::string::String {
        if self.txn_country_code.is_none() {
            self.txn_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.txn_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_txn_country_code(&mut self) -> ::std::string::String {
        self.txn_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool has_accepted_china_ssa = 38;

    pub fn has_accepted_china_ssa(&self) -> bool {
        self.has_accepted_china_ssa.unwrap_or(false)
    }

    pub fn clear_has_accepted_china_ssa(&mut self) {
        self.has_accepted_china_ssa = ::std::option::Option::None;
    }

    pub fn has_has_accepted_china_ssa(&self) -> bool {
        self.has_accepted_china_ssa.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_accepted_china_ssa(&mut self, v: bool) {
        self.has_accepted_china_ssa = ::std::option::Option::Some(v);
    }

    // optional bool is_banned_steam_china = 39;

    pub fn is_banned_steam_china(&self) -> bool {
        self.is_banned_steam_china.unwrap_or(false)
    }

    pub fn clear_is_banned_steam_china(&mut self) {
        self.is_banned_steam_china = ::std::option::Option::None;
    }

    pub fn has_is_banned_steam_china(&self) -> bool {
        self.is_banned_steam_china.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_banned_steam_china(&mut self, v: bool) {
        self.is_banned_steam_china = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCSystemMsg_GetAccountDetails_Response {
    const NAME: &'static str = "CGCSystemMsg_GetAccountDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult_deprecated = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.account_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                208 => {
                    self.is_profile_created = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.is_profile_public = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_inventory_public = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.is_vac_banned = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_cyber_cafe = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.is_school_account = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.is_limited = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.is_subscribed = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.package = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.is_free_trial_account = ::std::option::Option::Some(is.read_bool()?);
                },
                112 => {
                    self.free_trial_expiration = ::std::option::Option::Some(is.read_uint32()?);
                },
                120 => {
                    self.is_low_violence = ::std::option::Option::Some(is.read_bool()?);
                },
                128 => {
                    self.is_account_locked_down = ::std::option::Option::Some(is.read_bool()?);
                },
                136 => {
                    self.is_community_banned = ::std::option::Option::Some(is.read_bool()?);
                },
                144 => {
                    self.is_trade_banned = ::std::option::Option::Some(is.read_bool()?);
                },
                152 => {
                    self.trade_ban_expiration = ::std::option::Option::Some(is.read_uint32()?);
                },
                160 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.suspension_end_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                178 => {
                    self.currency = ::std::option::Option::Some(is.read_string()?);
                },
                184 => {
                    self.steam_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                192 => {
                    self.friend_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.account_creation_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.is_steamguard_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                224 => {
                    self.is_phone_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                232 => {
                    self.is_two_factor_auth_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                240 => {
                    self.two_factor_enabled_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                248 => {
                    self.phone_verification_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                264 => {
                    self.phone_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                272 => {
                    self.is_phone_identifying = ::std::option::Option::Some(is.read_bool()?);
                },
                280 => {
                    self.rt_identity_linked = ::std::option::Option::Some(is.read_uint32()?);
                },
                288 => {
                    self.rt_birth_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                298 => {
                    self.txn_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                304 => {
                    self.has_accepted_china_ssa = ::std::option::Option::Some(is.read_bool()?);
                },
                312 => {
                    self.is_banned_steam_china = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult_deprecated {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.account_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.is_profile_created {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_profile_public {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_inventory_public {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_vac_banned {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_cyber_cafe {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_school_account {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_limited {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_subscribed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.package {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.is_free_trial_account {
            my_size += 1 + 1;
        }
        if let Some(v) = self.free_trial_expiration {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(14, v);
        }
        if let Some(v) = self.is_low_violence {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_account_locked_down {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_community_banned {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_trade_banned {
            my_size += 2 + 1;
        }
        if let Some(v) = self.trade_ban_expiration {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.accountid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.suspension_end_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(21, v);
        }
        if let Some(v) = self.currency.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(22, &v);
        }
        if let Some(v) = self.steam_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.friend_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(24, v);
        }
        if let Some(v) = self.account_creation_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.is_steamguard_enabled {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_phone_verified {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_two_factor_auth_enabled {
            my_size += 2 + 1;
        }
        if let Some(v) = self.two_factor_enabled_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(30, v);
        }
        if let Some(v) = self.phone_verification_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(31, v);
        }
        if let Some(v) = self.phone_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(33, v);
        }
        if let Some(v) = self.is_phone_identifying {
            my_size += 2 + 1;
        }
        if let Some(v) = self.rt_identity_linked {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(35, v);
        }
        if let Some(v) = self.rt_birth_date {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(36, v);
        }
        if let Some(v) = self.txn_country_code.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(37, &v);
        }
        if let Some(v) = self.has_accepted_china_ssa {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_banned_steam_china {
            my_size += 2 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.eresult_deprecated {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.account_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.is_profile_created {
            os.write_bool(26, v)?;
        }
        if let Some(v) = self.is_profile_public {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_inventory_public {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.is_vac_banned {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_cyber_cafe {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.is_school_account {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.is_limited {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.is_subscribed {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.package {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.is_free_trial_account {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.free_trial_expiration {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.is_low_violence {
            os.write_bool(15, v)?;
        }
        if let Some(v) = self.is_account_locked_down {
            os.write_bool(16, v)?;
        }
        if let Some(v) = self.is_community_banned {
            os.write_bool(17, v)?;
        }
        if let Some(v) = self.is_trade_banned {
            os.write_bool(18, v)?;
        }
        if let Some(v) = self.trade_ban_expiration {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.suspension_end_time {
            os.write_uint32(21, v)?;
        }
        if let Some(v) = self.currency.as_ref() {
            os.write_string(22, v)?;
        }
        if let Some(v) = self.steam_level {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.friend_count {
            os.write_uint32(24, v)?;
        }
        if let Some(v) = self.account_creation_time {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.is_steamguard_enabled {
            os.write_bool(27, v)?;
        }
        if let Some(v) = self.is_phone_verified {
            os.write_bool(28, v)?;
        }
        if let Some(v) = self.is_two_factor_auth_enabled {
            os.write_bool(29, v)?;
        }
        if let Some(v) = self.two_factor_enabled_time {
            os.write_uint32(30, v)?;
        }
        if let Some(v) = self.phone_verification_time {
            os.write_uint32(31, v)?;
        }
        if let Some(v) = self.phone_id {
            os.write_uint64(33, v)?;
        }
        if let Some(v) = self.is_phone_identifying {
            os.write_bool(34, v)?;
        }
        if let Some(v) = self.rt_identity_linked {
            os.write_uint32(35, v)?;
        }
        if let Some(v) = self.rt_birth_date {
            os.write_uint32(36, v)?;
        }
        if let Some(v) = self.txn_country_code.as_ref() {
            os.write_string(37, v)?;
        }
        if let Some(v) = self.has_accepted_china_ssa {
            os.write_bool(38, v)?;
        }
        if let Some(v) = self.is_banned_steam_china {
            os.write_bool(39, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetAccountDetails_Response {
        CGCSystemMsg_GetAccountDetails_Response::new()
    }

    fn clear(&mut self) {
        self.eresult_deprecated = ::std::option::Option::None;
        self.account_name = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.is_profile_created = ::std::option::Option::None;
        self.is_profile_public = ::std::option::Option::None;
        self.is_inventory_public = ::std::option::Option::None;
        self.is_vac_banned = ::std::option::Option::None;
        self.is_cyber_cafe = ::std::option::Option::None;
        self.is_school_account = ::std::option::Option::None;
        self.is_limited = ::std::option::Option::None;
        self.is_subscribed = ::std::option::Option::None;
        self.package = ::std::option::Option::None;
        self.is_free_trial_account = ::std::option::Option::None;
        self.free_trial_expiration = ::std::option::Option::None;
        self.is_low_violence = ::std::option::Option::None;
        self.is_account_locked_down = ::std::option::Option::None;
        self.is_community_banned = ::std::option::Option::None;
        self.is_trade_banned = ::std::option::Option::None;
        self.trade_ban_expiration = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.suspension_end_time = ::std::option::Option::None;
        self.currency = ::std::option::Option::None;
        self.steam_level = ::std::option::Option::None;
        self.friend_count = ::std::option::Option::None;
        self.account_creation_time = ::std::option::Option::None;
        self.is_steamguard_enabled = ::std::option::Option::None;
        self.is_phone_verified = ::std::option::Option::None;
        self.is_two_factor_auth_enabled = ::std::option::Option::None;
        self.two_factor_enabled_time = ::std::option::Option::None;
        self.phone_verification_time = ::std::option::Option::None;
        self.phone_id = ::std::option::Option::None;
        self.is_phone_identifying = ::std::option::Option::None;
        self.rt_identity_linked = ::std::option::Option::None;
        self.rt_birth_date = ::std::option::Option::None;
        self.txn_country_code = ::std::option::Option::None;
        self.has_accepted_china_ssa = ::std::option::Option::None;
        self.is_banned_steam_china = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetAccountDetails_Response {
        static instance: CGCSystemMsg_GetAccountDetails_Response = CGCSystemMsg_GetAccountDetails_Response {
            eresult_deprecated: ::std::option::Option::None,
            account_name: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            is_profile_created: ::std::option::Option::None,
            is_profile_public: ::std::option::Option::None,
            is_inventory_public: ::std::option::Option::None,
            is_vac_banned: ::std::option::Option::None,
            is_cyber_cafe: ::std::option::Option::None,
            is_school_account: ::std::option::Option::None,
            is_limited: ::std::option::Option::None,
            is_subscribed: ::std::option::Option::None,
            package: ::std::option::Option::None,
            is_free_trial_account: ::std::option::Option::None,
            free_trial_expiration: ::std::option::Option::None,
            is_low_violence: ::std::option::Option::None,
            is_account_locked_down: ::std::option::Option::None,
            is_community_banned: ::std::option::Option::None,
            is_trade_banned: ::std::option::Option::None,
            trade_ban_expiration: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            suspension_end_time: ::std::option::Option::None,
            currency: ::std::option::Option::None,
            steam_level: ::std::option::Option::None,
            friend_count: ::std::option::Option::None,
            account_creation_time: ::std::option::Option::None,
            is_steamguard_enabled: ::std::option::Option::None,
            is_phone_verified: ::std::option::Option::None,
            is_two_factor_auth_enabled: ::std::option::Option::None,
            two_factor_enabled_time: ::std::option::Option::None,
            phone_verification_time: ::std::option::Option::None,
            phone_id: ::std::option::Option::None,
            is_phone_identifying: ::std::option::Option::None,
            rt_identity_linked: ::std::option::Option::None,
            rt_birth_date: ::std::option::Option::None,
            txn_country_code: ::std::option::Option::None,
            has_accepted_china_ssa: ::std::option::Option::None,
            is_banned_steam_china: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CIPLocationInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CIPLocationInfo {
    // message fields
    // @@protoc_insertion_point(field:CIPLocationInfo.ip)
    pub ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CIPLocationInfo.latitude)
    pub latitude: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CIPLocationInfo.longitude)
    pub longitude: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CIPLocationInfo.country)
    pub country: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CIPLocationInfo.state)
    pub state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CIPLocationInfo.city)
    pub city: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CIPLocationInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CIPLocationInfo {
    fn default() -> &'a CIPLocationInfo {
        <CIPLocationInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CIPLocationInfo {
    pub fn new() -> CIPLocationInfo {
        ::std::default::Default::default()
    }

    // optional uint32 ip = 1;

    pub fn ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional float latitude = 2;

    pub fn latitude(&self) -> f32 {
        self.latitude.unwrap_or(0.)
    }

    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f32) {
        self.latitude = ::std::option::Option::Some(v);
    }

    // optional float longitude = 3;

    pub fn longitude(&self) -> f32 {
        self.longitude.unwrap_or(0.)
    }

    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f32) {
        self.longitude = ::std::option::Option::Some(v);
    }

    // optional string country = 4;

    pub fn country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country(&mut self) {
        self.country = ::std::option::Option::None;
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string state = 5;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string city = 6;

    pub fn city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_city(&mut self) {
        self.city = ::std::option::Option::None;
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city = ::std::option::Option::Some(::std::string::String::new());
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CIPLocationInfo {
    const NAME: &'static str = "CIPLocationInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                21 => {
                    self.latitude = ::std::option::Option::Some(is.read_float()?);
                },
                29 => {
                    self.longitude = ::std::option::Option::Some(is.read_float()?);
                },
                34 => {
                    self.country = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.city = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ip {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.latitude {
            my_size += 1 + 4;
        }
        if let Some(v) = self.longitude {
            my_size += 1 + 4;
        }
        if let Some(v) = self.country.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.state.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.city.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(6, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ip {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.latitude {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.country.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.city.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CIPLocationInfo {
        CIPLocationInfo::new()
    }

    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.latitude = ::std::option::Option::None;
        self.longitude = ::std::option::Option::None;
        self.country = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.city = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CIPLocationInfo {
        static instance: CIPLocationInfo = CIPLocationInfo {
            ip: ::std::option::Option::None,
            latitude: ::std::option::Option::None,
            longitude: ::std::option::Option::None,
            country: ::std::option::Option::None,
            state: ::std::option::Option::None,
            city: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGCMsgGetIPLocationResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPLocationResponse {
    // message fields
    // @@protoc_insertion_point(field:CGCMsgGetIPLocationResponse.infos)
    pub infos: ::std::vec::Vec<CIPLocationInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CGCMsgGetIPLocationResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPLocationResponse {
    fn default() -> &'a CGCMsgGetIPLocationResponse {
        <CGCMsgGetIPLocationResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPLocationResponse {
    pub fn new() -> CGCMsgGetIPLocationResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGCMsgGetIPLocationResponse {
    const NAME: &'static str = "CGCMsgGetIPLocationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infos.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.infos {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.infos {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPLocationResponse {
        CGCMsgGetIPLocationResponse::new()
    }

    fn clear(&mut self) {
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPLocationResponse {
        static instance: CGCMsgGetIPLocationResponse = CGCMsgGetIPLocationResponse {
            infos: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCPlatform)
pub enum EGCPlatform {
    // @@protoc_insertion_point(enum_value:EGCPlatform.k_eGCPlatform_None)
    k_eGCPlatform_None = 0,
    // @@protoc_insertion_point(enum_value:EGCPlatform.k_eGCPlatform_PC)
    k_eGCPlatform_PC = 1,
    // @@protoc_insertion_point(enum_value:EGCPlatform.k_eGCPlatform_Mac)
    k_eGCPlatform_Mac = 2,
    // @@protoc_insertion_point(enum_value:EGCPlatform.k_eGCPlatform_Linux)
    k_eGCPlatform_Linux = 3,
    // @@protoc_insertion_point(enum_value:EGCPlatform.k_eGCPlatform_Android)
    k_eGCPlatform_Android = 4,
    // @@protoc_insertion_point(enum_value:EGCPlatform.k_eGCPlatform_iOS)
    k_eGCPlatform_iOS = 5,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCPlatform {
    const NAME: &'static str = "EGCPlatform";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCPlatform> {
        match value {
            0 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_None),
            1 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_PC),
            2 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Mac),
            3 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Linux),
            4 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Android),
            5 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_iOS),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCPlatform> {
        match str {
            "k_eGCPlatform_None" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_None),
            "k_eGCPlatform_PC" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_PC),
            "k_eGCPlatform_Mac" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Mac),
            "k_eGCPlatform_Linux" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Linux),
            "k_eGCPlatform_Android" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Android),
            "k_eGCPlatform_iOS" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_iOS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCPlatform] = &[
        EGCPlatform::k_eGCPlatform_None,
        EGCPlatform::k_eGCPlatform_PC,
        EGCPlatform::k_eGCPlatform_Mac,
        EGCPlatform::k_eGCPlatform_Linux,
        EGCPlatform::k_eGCPlatform_Android,
        EGCPlatform::k_eGCPlatform_iOS,
    ];
}

impl ::std::default::Default for EGCPlatform {
    fn default() -> Self {
        EGCPlatform::k_eGCPlatform_None
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:GCProtoBufMsgSrc)
pub enum GCProtoBufMsgSrc {
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_Unspecified)
    GCProtoBufMsgSrc_Unspecified = 0,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromSystem)
    GCProtoBufMsgSrc_FromSystem = 1,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromSteamID)
    GCProtoBufMsgSrc_FromSteamID = 2,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromGC)
    GCProtoBufMsgSrc_FromGC = 3,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_ReplySystem)
    GCProtoBufMsgSrc_ReplySystem = 4,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_SpoofedSteamID)
    GCProtoBufMsgSrc_SpoofedSteamID = 5,
}

impl ::steam_vent_proto_common::protobuf::Enum for GCProtoBufMsgSrc {
    const NAME: &'static str = "GCProtoBufMsgSrc";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GCProtoBufMsgSrc> {
        match value {
            0 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            1 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem),
            2 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID),
            3 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC),
            4 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem),
            5 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_SpoofedSteamID),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<GCProtoBufMsgSrc> {
        match str {
            "GCProtoBufMsgSrc_Unspecified" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            "GCProtoBufMsgSrc_FromSystem" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem),
            "GCProtoBufMsgSrc_FromSteamID" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID),
            "GCProtoBufMsgSrc_FromGC" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC),
            "GCProtoBufMsgSrc_ReplySystem" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem),
            "GCProtoBufMsgSrc_SpoofedSteamID" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_SpoofedSteamID),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [GCProtoBufMsgSrc] = &[
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_SpoofedSteamID,
    ];
}

impl ::std::default::Default for GCProtoBufMsgSrc {
    fn default() -> Self {
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified
    }
}


// Extension generation with lite runtime is not supported


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

impl ::steam_vent_proto_common::RpcMessage for CMsgProtoBufHeader {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCSystemMsg_GetAccountDetails {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCSystemMsg_GetAccountDetails_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CIPLocationInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGCMsgGetIPLocationResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
