// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_oauth.steamworkssdk.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

#[doc = "Grants an implicit OAuth token (grant type 'token') for the specified client ID on behalf of a user without prompting"]
// @@protoc_insertion_point(message:COAuthToken_ImplicitGrantNoPrompt_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COAuthToken_ImplicitGrantNoPrompt_Request {
    // message fields
    // @@protoc_insertion_point(field:COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
    pub clientid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:COAuthToken_ImplicitGrantNoPrompt_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COAuthToken_ImplicitGrantNoPrompt_Request {
    fn default() -> &'a COAuthToken_ImplicitGrantNoPrompt_Request {
        <COAuthToken_ImplicitGrantNoPrompt_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl COAuthToken_ImplicitGrantNoPrompt_Request {
    pub fn new() -> COAuthToken_ImplicitGrantNoPrompt_Request {
        ::std::default::Default::default()
    }

    // optional string clientid = 1;

    pub fn clientid(&self) -> &str {
        match self.clientid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_clientid(&mut self) {
        self.clientid = ::std::option::Option::None;
    }

    pub fn has_clientid(&self) -> bool {
        self.clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientid(&mut self, v: ::std::string::String) {
        self.clientid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientid(&mut self) -> &mut ::std::string::String {
        if self.clientid.is_none() {
            self.clientid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.clientid.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientid(&mut self) -> ::std::string::String {
        self.clientid.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for COAuthToken_ImplicitGrantNoPrompt_Request {
    const NAME: &'static str = "COAuthToken_ImplicitGrantNoPrompt_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.clientid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clientid.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clientid.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COAuthToken_ImplicitGrantNoPrompt_Request {
        COAuthToken_ImplicitGrantNoPrompt_Request::new()
    }

    fn clear(&mut self) {
        self.clientid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COAuthToken_ImplicitGrantNoPrompt_Request {
        static instance: COAuthToken_ImplicitGrantNoPrompt_Request = COAuthToken_ImplicitGrantNoPrompt_Request {
            clientid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:COAuthToken_ImplicitGrantNoPrompt_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COAuthToken_ImplicitGrantNoPrompt_Response {
    // message fields
    // @@protoc_insertion_point(field:COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
    pub access_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
    pub redirect_uri: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:COAuthToken_ImplicitGrantNoPrompt_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COAuthToken_ImplicitGrantNoPrompt_Response {
    fn default() -> &'a COAuthToken_ImplicitGrantNoPrompt_Response {
        <COAuthToken_ImplicitGrantNoPrompt_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl COAuthToken_ImplicitGrantNoPrompt_Response {
    pub fn new() -> COAuthToken_ImplicitGrantNoPrompt_Response {
        ::std::default::Default::default()
    }

    // optional string access_token = 1;

    pub fn access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string redirect_uri = 2;

    pub fn redirect_uri(&self) -> &str {
        match self.redirect_uri.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_redirect_uri(&mut self) {
        self.redirect_uri = ::std::option::Option::None;
    }

    pub fn has_redirect_uri(&self) -> bool {
        self.redirect_uri.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redirect_uri(&mut self, v: ::std::string::String) {
        self.redirect_uri = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redirect_uri(&mut self) -> &mut ::std::string::String {
        if self.redirect_uri.is_none() {
            self.redirect_uri = ::std::option::Option::Some(::std::string::String::new());
        }
        self.redirect_uri.as_mut().unwrap()
    }

    // Take field
    pub fn take_redirect_uri(&mut self) -> ::std::string::String {
        self.redirect_uri.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for COAuthToken_ImplicitGrantNoPrompt_Response {
    const NAME: &'static str = "COAuthToken_ImplicitGrantNoPrompt_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.access_token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.redirect_uri = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.access_token.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.access_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COAuthToken_ImplicitGrantNoPrompt_Response {
        COAuthToken_ImplicitGrantNoPrompt_Response::new()
    }

    fn clear(&mut self) {
        self.access_token = ::std::option::Option::None;
        self.redirect_uri = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COAuthToken_ImplicitGrantNoPrompt_Response {
        static instance: COAuthToken_ImplicitGrantNoPrompt_Response = COAuthToken_ImplicitGrantNoPrompt_Response {
            access_token: ::std::option::Option::None,
            redirect_uri: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages_unified_base_steamworkssdk::*;
impl ::steam_vent_proto_common::RpcMessage
for COAuthToken_ImplicitGrantNoPrompt_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for COAuthToken_ImplicitGrantNoPrompt_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
///Service containing methods to manage OAuth tokens
struct OAuthToken {}
impl ::steam_vent_proto_common::RpcService for OAuthToken {
    const SERVICE_NAME: &'static str = "OAuthToken";
}
impl ::steam_vent_proto_common::RpcMethod for COAuthToken_ImplicitGrantNoPrompt_Request {
    const METHOD_NAME: &'static str = "OAuthToken.ImplicitGrantNoPrompt#1";
    type Response = COAuthToken_ImplicitGrantNoPrompt_Response;
}
