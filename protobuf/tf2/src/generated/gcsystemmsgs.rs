// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gcsystemmsgs.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CCommunity_GamePersonalDataCategoryInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GamePersonalDataCategoryInfo {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.localization_token)
    pub localization_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.template_file)
    pub template_file: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GamePersonalDataCategoryInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GamePersonalDataCategoryInfo {
    fn default() -> &'a CCommunity_GamePersonalDataCategoryInfo {
        <CCommunity_GamePersonalDataCategoryInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GamePersonalDataCategoryInfo {
    pub fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localization_token = 2;

    pub fn localization_token(&self) -> &str {
        match self.localization_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_localization_token(&mut self) {
        self.localization_token = ::std::option::Option::None;
    }

    pub fn has_localization_token(&self) -> bool {
        self.localization_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localization_token(&mut self, v: ::std::string::String) {
        self.localization_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localization_token(&mut self) -> &mut ::std::string::String {
        if self.localization_token.is_none() {
            self.localization_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.localization_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_localization_token(&mut self) -> ::std::string::String {
        self.localization_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string template_file = 3;

    pub fn template_file(&self) -> &str {
        match self.template_file.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_template_file(&mut self) {
        self.template_file = ::std::option::Option::None;
    }

    pub fn has_template_file(&self) -> bool {
        self.template_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_file(&mut self, v: ::std::string::String) {
        self.template_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template_file(&mut self) -> &mut ::std::string::String {
        if self.template_file.is_none() {
            self.template_file = ::std::option::Option::Some(::std::string::String::new());
        }
        self.template_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_template_file(&mut self) -> ::std::string::String {
        self.template_file.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_GamePersonalDataCategoryInfo {
    const NAME: &'static str = "CCommunity_GamePersonalDataCategoryInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.localization_token = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.template_file = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.localization_token.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.template_file.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.localization_token.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.template_file.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        CCommunity_GamePersonalDataCategoryInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.localization_token = ::std::option::Option::None;
        self.template_file = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GamePersonalDataCategoryInfo {
        static instance: CCommunity_GamePersonalDataCategoryInfo = CCommunity_GamePersonalDataCategoryInfo {
            type_: ::std::option::Option::None,
            localization_token: ::std::option::Option::None,
            template_file: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataCategories_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataCategories_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataCategories_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Request {
        <CCommunity_GetGamePersonalDataCategories_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Request {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataCategories_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        CCommunity_GetGamePersonalDataCategories_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Request {
        static instance: CCommunity_GetGamePersonalDataCategories_Request = CCommunity_GetGamePersonalDataCategories_Request {
            appid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataCategories_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataCategories_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Response.categories)
    pub categories: ::std::vec::Vec<CCommunity_GamePersonalDataCategoryInfo>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
    pub app_assets_basename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataCategories_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Response {
        <CCommunity_GetGamePersonalDataCategories_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        ::std::default::Default::default()
    }

    // optional string app_assets_basename = 2;

    pub fn app_assets_basename(&self) -> &str {
        match self.app_assets_basename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_app_assets_basename(&mut self) {
        self.app_assets_basename = ::std::option::Option::None;
    }

    pub fn has_app_assets_basename(&self) -> bool {
        self.app_assets_basename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_assets_basename(&mut self, v: ::std::string::String) {
        self.app_assets_basename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_assets_basename(&mut self) -> &mut ::std::string::String {
        if self.app_assets_basename.is_none() {
            self.app_assets_basename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.app_assets_basename.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_assets_basename(&mut self) -> ::std::string::String {
        self.app_assets_basename.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Response {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataCategories_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.categories.push(is.read_message()?);
                },
                18 => {
                    self.app_assets_basename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.app_assets_basename.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.categories {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.app_assets_basename.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        CCommunity_GetGamePersonalDataCategories_Response::new()
    }

    fn clear(&mut self) {
        self.categories.clear();
        self.app_assets_basename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Response {
        static instance: CCommunity_GetGamePersonalDataCategories_Response = CCommunity_GetGamePersonalDataCategories_Response {
            categories: ::std::vec::Vec::new(),
            app_assets_basename: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataEntries_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataEntries_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
    pub continue_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataEntries_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Request {
        <CCommunity_GetGamePersonalDataEntries_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string type = 3;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string continue_token = 4;

    pub fn continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_continue_token(&mut self) {
        self.continue_token = ::std::option::Option::None;
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Request {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataEntries_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.continue_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.continue_token.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.continue_token.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        CCommunity_GetGamePersonalDataEntries_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.continue_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Request {
        static instance: CCommunity_GetGamePersonalDataEntries_Request = CCommunity_GetGamePersonalDataEntries_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            continue_token: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataEntries_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataEntries_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
    pub gceresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.entries)
    pub entries: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
    pub continue_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataEntries_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Response {
        <CCommunity_GetGamePersonalDataEntries_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;

    pub fn gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }

    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    // optional string continue_token = 3;

    pub fn continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_continue_token(&mut self) {
        self.continue_token = ::std::option::Option::None;
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Response {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataEntries_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gceresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.entries.push(is.read_string()?);
                },
                26 => {
                    self.continue_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.entries {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &value);
        };
        if let Some(v) = self.continue_token.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        for v in &self.entries {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.continue_token.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        CCommunity_GetGamePersonalDataEntries_Response::new()
    }

    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.entries.clear();
        self.continue_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Response {
        static instance: CCommunity_GetGamePersonalDataEntries_Response = CCommunity_GetGamePersonalDataEntries_Response {
            gceresult: ::std::option::Option::None,
            entries: ::std::vec::Vec::new(),
            continue_token: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCommunity_TerminateGamePersonalDataEntries_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_TerminateGamePersonalDataEntries_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Request {
        <CCommunity_TerminateGamePersonalDataEntries_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Request {
    const NAME: &'static str = "CCommunity_TerminateGamePersonalDataEntries_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        CCommunity_TerminateGamePersonalDataEntries_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Request {
        static instance: CCommunity_TerminateGamePersonalDataEntries_Request = CCommunity_TerminateGamePersonalDataEntries_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCommunity_TerminateGamePersonalDataEntries_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
    pub gceresult: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_TerminateGamePersonalDataEntries_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Response {
        <CCommunity_TerminateGamePersonalDataEntries_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;

    pub fn gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }

    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Response {
    const NAME: &'static str = "CCommunity_TerminateGamePersonalDataEntries_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gceresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        CCommunity_TerminateGamePersonalDataEntries_Response::new()
    }

    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Response {
        static instance: CCommunity_TerminateGamePersonalDataEntries_Response = CCommunity_TerminateGamePersonalDataEntries_Response {
            gceresult: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCSystemMsg)
pub enum EGCSystemMsg {
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgInvalid)
    k_EGCMsgInvalid = 0,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMulti)
    k_EGCMsgMulti = 1,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGenericReply)
    k_EGCMsgGenericReply = 10,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemBase)
    k_EGCMsgSystemBase = 50,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAchievementAwarded)
    k_EGCMsgAchievementAwarded = 51,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgConCommand)
    k_EGCMsgConCommand = 52,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStartPlaying)
    k_EGCMsgStartPlaying = 53,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStopPlaying)
    k_EGCMsgStopPlaying = 54,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStartGameserver)
    k_EGCMsgStartGameserver = 55,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStopGameserver)
    k_EGCMsgStopGameserver = 56,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWGRequest)
    k_EGCMsgWGRequest = 57,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWGResponse)
    k_EGCMsgWGResponse = 58,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserGameStatsSchema)
    k_EGCMsgGetUserGameStatsSchema = 59,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserGameStatsSchemaResponse)
    k_EGCMsgGetUserGameStatsSchemaResponse = 60,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStatsDEPRECATED)
    k_EGCMsgGetUserStatsDEPRECATED = 61,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStatsResponse)
    k_EGCMsgGetUserStatsResponse = 62,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAppInfoUpdated)
    k_EGCMsgAppInfoUpdated = 63,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgValidateSession)
    k_EGCMsgValidateSession = 64,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgValidateSessionResponse)
    k_EGCMsgValidateSessionResponse = 65,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgLookupAccountFromInput)
    k_EGCMsgLookupAccountFromInput = 66,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendHTTPRequest)
    k_EGCMsgSendHTTPRequest = 67,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendHTTPRequestResponse)
    k_EGCMsgSendHTTPRequestResponse = 68,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgPreTestSetup)
    k_EGCMsgPreTestSetup = 69,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgRecordSupportAction)
    k_EGCMsgRecordSupportAction = 70,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetails_DEPRECATED)
    k_EGCMsgGetAccountDetails_DEPRECATED = 71,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgReceiveInterAppMessage)
    k_EGCMsgReceiveInterAppMessage = 73,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgFindAccounts)
    k_EGCMsgFindAccounts = 74,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgPostAlert)
    k_EGCMsgPostAlert = 75,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetLicenses)
    k_EGCMsgGetLicenses = 76,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStats)
    k_EGCMsgGetUserStats = 77,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetCommands)
    k_EGCMsgGetCommands = 78,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetCommandsResponse)
    k_EGCMsgGetCommandsResponse = 79,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAddFreeLicense)
    k_EGCMsgAddFreeLicense = 80,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAddFreeLicenseResponse)
    k_EGCMsgAddFreeLicenseResponse = 81,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPLocation)
    k_EGCMsgGetIPLocation = 82,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPLocationResponse)
    k_EGCMsgGetIPLocationResponse = 83,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemStatsSchema)
    k_EGCMsgSystemStatsSchema = 84,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetSystemStats)
    k_EGCMsgGetSystemStats = 85,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetSystemStatsResponse)
    k_EGCMsgGetSystemStatsResponse = 86,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendEmail)
    k_EGCMsgSendEmail = 87,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendEmailResponse)
    k_EGCMsgSendEmailResponse = 88,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetEmailTemplate)
    k_EGCMsgGetEmailTemplate = 89,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetEmailTemplateResponse)
    k_EGCMsgGetEmailTemplateResponse = 90,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGrantGuestPass)
    k_EGCMsgGrantGuestPass = 91,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGrantGuestPassResponse)
    k_EGCMsgGrantGuestPassResponse = 92,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetails)
    k_EGCMsgGetAccountDetails = 93,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetailsResponse)
    k_EGCMsgGetAccountDetailsResponse = 94,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPersonaNames)
    k_EGCMsgGetPersonaNames = 95,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPersonaNamesResponse)
    k_EGCMsgGetPersonaNamesResponse = 96,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMultiplexMsg)
    k_EGCMsgMultiplexMsg = 97,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIRegisterInterfaces)
    k_EGCMsgWebAPIRegisterInterfaces = 101,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequest)
    k_EGCMsgWebAPIJobRequest = 102,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequestHttpResponse)
    k_EGCMsgWebAPIJobRequestHttpResponse = 104,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequestForwardResponse)
    k_EGCMsgWebAPIJobRequestForwardResponse = 105,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedGet)
    k_EGCMsgMemCachedGet = 200,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedGetResponse)
    k_EGCMsgMemCachedGetResponse = 201,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedSet)
    k_EGCMsgMemCachedSet = 202,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedDelete)
    k_EGCMsgMemCachedDelete = 203,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedStats)
    k_EGCMsgMemCachedStats = 204,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedStatsResponse)
    k_EGCMsgMemCachedStatsResponse = 205,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSQLStats)
    k_EGCMsgSQLStats = 210,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSQLStatsResponse)
    k_EGCMsgSQLStatsResponse = 211,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetDirectory)
    k_EGCMsgMasterSetDirectory = 220,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetDirectoryResponse)
    k_EGCMsgMasterSetDirectoryResponse = 221,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetWebAPIRouting)
    k_EGCMsgMasterSetWebAPIRouting = 222,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetWebAPIRoutingResponse)
    k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetClientMsgRouting)
    k_EGCMsgMasterSetClientMsgRouting = 224,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetClientMsgRoutingResponse)
    k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSetOptions)
    k_EGCMsgSetOptions = 226,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSetOptionsResponse)
    k_EGCMsgSetOptionsResponse = 227,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemBase2)
    k_EGCMsgSystemBase2 = 500,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPurchaseTrustStatus)
    k_EGCMsgGetPurchaseTrustStatus = 501,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPurchaseTrustStatusResponse)
    k_EGCMsgGetPurchaseTrustStatusResponse = 502,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgUpdateSession)
    k_EGCMsgUpdateSession = 503,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGCAccountVacStatusChange)
    k_EGCMsgGCAccountVacStatusChange = 504,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckFriendship)
    k_EGCMsgCheckFriendship = 505,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckFriendshipResponse)
    k_EGCMsgCheckFriendshipResponse = 506,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPartnerAccountLink)
    k_EGCMsgGetPartnerAccountLink = 507,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPartnerAccountLinkResponse)
    k_EGCMsgGetPartnerAccountLinkResponse = 508,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgVSReportedSuspiciousActivity)
    k_EGCMsgVSReportedSuspiciousActivity = 509,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountTradeBanStatusChange)
    k_EGCMsgAccountTradeBanStatusChange = 510,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountLockStatusChange)
    k_EGCMsgAccountLockStatusChange = 511,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDPPartnerMicroTxns)
    k_EGCMsgDPPartnerMicroTxns = 512,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDPPartnerMicroTxnsResponse)
    k_EGCMsgDPPartnerMicroTxnsResponse = 513,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPASN)
    k_EGCMsgGetIPASN = 514,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPASNResponse)
    k_EGCMsgGetIPASNResponse = 515,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAppFriendsList)
    k_EGCMsgGetAppFriendsList = 516,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAppFriendsListResponse)
    k_EGCMsgGetAppFriendsListResponse = 517,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgVacVerificationChange)
    k_EGCMsgVacVerificationChange = 518,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountPhoneNumberChange)
    k_EGCMsgAccountPhoneNumberChange = 519,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountTwoFactorChange)
    k_EGCMsgAccountTwoFactorChange = 520,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckClanMembership)
    k_EGCMsgCheckClanMembership = 521,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckClanMembershipResponse)
    k_EGCMsgCheckClanMembershipResponse = 522,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgInviteUserToLobby)
    k_EGCMsgInviteUserToLobby = 523,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataCategoriesRequest)
    k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataCategoriesResponse)
    k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataEntriesRequest)
    k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataEntriesResponse)
    k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgTerminateGamePersonalDataEntriesRequest)
    k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgTerminateGamePersonalDataEntriesResponse)
    k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCSystemMsg {
    const NAME: &'static str = "EGCSystemMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCSystemMsg> {
        match value {
            0 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            1 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            10 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            50 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            51 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            52 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            53 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            54 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            55 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            56 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            57 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            58 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            59 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            60 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            61 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            62 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            63 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            64 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            65 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            66 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            67 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            68 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            69 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            70 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            71 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            73 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            74 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            75 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            76 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            77 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            78 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            79 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            80 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            81 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            82 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            83 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            84 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            85 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            86 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            87 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            88 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            89 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            90 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            91 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            92 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            93 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            94 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            95 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            96 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            97 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            101 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            102 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            104 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            105 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            200 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            201 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            202 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            203 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            204 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            205 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            210 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStats),
            211 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStatsResponse),
            220 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            221 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            222 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            223 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            224 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            225 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            226 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            227 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            500 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            501 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            502 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            503 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            504 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            505 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            506 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            507 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            508 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            509 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity),
            510 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange),
            511 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountLockStatusChange),
            512 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            513 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            514 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASN),
            515 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASNResponse),
            516 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsList),
            517 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse),
            518 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            519 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            520 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTwoFactorChange),
            521 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembership),
            522 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse),
            523 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            524 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            525 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            526 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            527 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            528 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            529 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCSystemMsg> {
        match str {
            "k_EGCMsgInvalid" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            "k_EGCMsgMulti" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            "k_EGCMsgGenericReply" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            "k_EGCMsgSystemBase" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            "k_EGCMsgAchievementAwarded" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            "k_EGCMsgConCommand" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            "k_EGCMsgStartPlaying" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            "k_EGCMsgStopPlaying" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            "k_EGCMsgStartGameserver" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            "k_EGCMsgStopGameserver" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            "k_EGCMsgWGRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            "k_EGCMsgWGResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            "k_EGCMsgGetUserGameStatsSchema" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            "k_EGCMsgGetUserGameStatsSchemaResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            "k_EGCMsgGetUserStatsDEPRECATED" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            "k_EGCMsgGetUserStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            "k_EGCMsgAppInfoUpdated" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            "k_EGCMsgValidateSession" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            "k_EGCMsgValidateSessionResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            "k_EGCMsgLookupAccountFromInput" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            "k_EGCMsgSendHTTPRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            "k_EGCMsgSendHTTPRequestResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            "k_EGCMsgPreTestSetup" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            "k_EGCMsgRecordSupportAction" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            "k_EGCMsgGetAccountDetails_DEPRECATED" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            "k_EGCMsgReceiveInterAppMessage" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            "k_EGCMsgFindAccounts" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            "k_EGCMsgPostAlert" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            "k_EGCMsgGetLicenses" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            "k_EGCMsgGetUserStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            "k_EGCMsgGetCommands" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            "k_EGCMsgGetCommandsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            "k_EGCMsgAddFreeLicense" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            "k_EGCMsgAddFreeLicenseResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            "k_EGCMsgGetIPLocation" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            "k_EGCMsgGetIPLocationResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            "k_EGCMsgSystemStatsSchema" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            "k_EGCMsgGetSystemStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            "k_EGCMsgGetSystemStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            "k_EGCMsgSendEmail" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            "k_EGCMsgSendEmailResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            "k_EGCMsgGetEmailTemplate" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            "k_EGCMsgGetEmailTemplateResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            "k_EGCMsgGrantGuestPass" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            "k_EGCMsgGrantGuestPassResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            "k_EGCMsgGetAccountDetails" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            "k_EGCMsgGetAccountDetailsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            "k_EGCMsgGetPersonaNames" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            "k_EGCMsgGetPersonaNamesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            "k_EGCMsgMultiplexMsg" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            "k_EGCMsgWebAPIRegisterInterfaces" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            "k_EGCMsgWebAPIJobRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            "k_EGCMsgWebAPIJobRequestHttpResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            "k_EGCMsgWebAPIJobRequestForwardResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            "k_EGCMsgMemCachedGet" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            "k_EGCMsgMemCachedGetResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            "k_EGCMsgMemCachedSet" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            "k_EGCMsgMemCachedDelete" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            "k_EGCMsgMemCachedStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            "k_EGCMsgMemCachedStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            "k_EGCMsgSQLStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStats),
            "k_EGCMsgSQLStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStatsResponse),
            "k_EGCMsgMasterSetDirectory" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            "k_EGCMsgMasterSetDirectoryResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            "k_EGCMsgMasterSetWebAPIRouting" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            "k_EGCMsgMasterSetWebAPIRoutingResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            "k_EGCMsgMasterSetClientMsgRouting" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            "k_EGCMsgMasterSetClientMsgRoutingResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            "k_EGCMsgSetOptions" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            "k_EGCMsgSetOptionsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            "k_EGCMsgSystemBase2" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            "k_EGCMsgGetPurchaseTrustStatus" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            "k_EGCMsgGetPurchaseTrustStatusResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            "k_EGCMsgUpdateSession" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            "k_EGCMsgGCAccountVacStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            "k_EGCMsgCheckFriendship" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            "k_EGCMsgCheckFriendshipResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            "k_EGCMsgGetPartnerAccountLink" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            "k_EGCMsgGetPartnerAccountLinkResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            "k_EGCMsgVSReportedSuspiciousActivity" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity),
            "k_EGCMsgAccountTradeBanStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange),
            "k_EGCMsgAccountLockStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountLockStatusChange),
            "k_EGCMsgDPPartnerMicroTxns" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            "k_EGCMsgDPPartnerMicroTxnsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            "k_EGCMsgGetIPASN" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASN),
            "k_EGCMsgGetIPASNResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASNResponse),
            "k_EGCMsgGetAppFriendsList" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsList),
            "k_EGCMsgGetAppFriendsListResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse),
            "k_EGCMsgVacVerificationChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            "k_EGCMsgAccountPhoneNumberChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            "k_EGCMsgAccountTwoFactorChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTwoFactorChange),
            "k_EGCMsgCheckClanMembership" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembership),
            "k_EGCMsgCheckClanMembershipResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse),
            "k_EGCMsgInviteUserToLobby" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            "k_EGCMsgGetGamePersonalDataCategoriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            "k_EGCMsgGetGamePersonalDataCategoriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            "k_EGCMsgGetGamePersonalDataEntriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            "k_EGCMsgGetGamePersonalDataEntriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            "k_EGCMsgTerminateGamePersonalDataEntriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            "k_EGCMsgTerminateGamePersonalDataEntriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCSystemMsg] = &[
        EGCSystemMsg::k_EGCMsgInvalid,
        EGCSystemMsg::k_EGCMsgMulti,
        EGCSystemMsg::k_EGCMsgGenericReply,
        EGCSystemMsg::k_EGCMsgSystemBase,
        EGCSystemMsg::k_EGCMsgAchievementAwarded,
        EGCSystemMsg::k_EGCMsgConCommand,
        EGCSystemMsg::k_EGCMsgStartPlaying,
        EGCSystemMsg::k_EGCMsgStopPlaying,
        EGCSystemMsg::k_EGCMsgStartGameserver,
        EGCSystemMsg::k_EGCMsgStopGameserver,
        EGCSystemMsg::k_EGCMsgWGRequest,
        EGCSystemMsg::k_EGCMsgWGResponse,
        EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema,
        EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse,
        EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED,
        EGCSystemMsg::k_EGCMsgGetUserStatsResponse,
        EGCSystemMsg::k_EGCMsgAppInfoUpdated,
        EGCSystemMsg::k_EGCMsgValidateSession,
        EGCSystemMsg::k_EGCMsgValidateSessionResponse,
        EGCSystemMsg::k_EGCMsgLookupAccountFromInput,
        EGCSystemMsg::k_EGCMsgSendHTTPRequest,
        EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse,
        EGCSystemMsg::k_EGCMsgPreTestSetup,
        EGCSystemMsg::k_EGCMsgRecordSupportAction,
        EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED,
        EGCSystemMsg::k_EGCMsgReceiveInterAppMessage,
        EGCSystemMsg::k_EGCMsgFindAccounts,
        EGCSystemMsg::k_EGCMsgPostAlert,
        EGCSystemMsg::k_EGCMsgGetLicenses,
        EGCSystemMsg::k_EGCMsgGetUserStats,
        EGCSystemMsg::k_EGCMsgGetCommands,
        EGCSystemMsg::k_EGCMsgGetCommandsResponse,
        EGCSystemMsg::k_EGCMsgAddFreeLicense,
        EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse,
        EGCSystemMsg::k_EGCMsgGetIPLocation,
        EGCSystemMsg::k_EGCMsgGetIPLocationResponse,
        EGCSystemMsg::k_EGCMsgSystemStatsSchema,
        EGCSystemMsg::k_EGCMsgGetSystemStats,
        EGCSystemMsg::k_EGCMsgGetSystemStatsResponse,
        EGCSystemMsg::k_EGCMsgSendEmail,
        EGCSystemMsg::k_EGCMsgSendEmailResponse,
        EGCSystemMsg::k_EGCMsgGetEmailTemplate,
        EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse,
        EGCSystemMsg::k_EGCMsgGrantGuestPass,
        EGCSystemMsg::k_EGCMsgGrantGuestPassResponse,
        EGCSystemMsg::k_EGCMsgGetAccountDetails,
        EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse,
        EGCSystemMsg::k_EGCMsgGetPersonaNames,
        EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse,
        EGCSystemMsg::k_EGCMsgMultiplexMsg,
        EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequest,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse,
        EGCSystemMsg::k_EGCMsgMemCachedGet,
        EGCSystemMsg::k_EGCMsgMemCachedGetResponse,
        EGCSystemMsg::k_EGCMsgMemCachedSet,
        EGCSystemMsg::k_EGCMsgMemCachedDelete,
        EGCSystemMsg::k_EGCMsgMemCachedStats,
        EGCSystemMsg::k_EGCMsgMemCachedStatsResponse,
        EGCSystemMsg::k_EGCMsgSQLStats,
        EGCSystemMsg::k_EGCMsgSQLStatsResponse,
        EGCSystemMsg::k_EGCMsgMasterSetDirectory,
        EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse,
        EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting,
        EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse,
        EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting,
        EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse,
        EGCSystemMsg::k_EGCMsgSetOptions,
        EGCSystemMsg::k_EGCMsgSetOptionsResponse,
        EGCSystemMsg::k_EGCMsgSystemBase2,
        EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus,
        EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse,
        EGCSystemMsg::k_EGCMsgUpdateSession,
        EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange,
        EGCSystemMsg::k_EGCMsgCheckFriendship,
        EGCSystemMsg::k_EGCMsgCheckFriendshipResponse,
        EGCSystemMsg::k_EGCMsgGetPartnerAccountLink,
        EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse,
        EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity,
        EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange,
        EGCSystemMsg::k_EGCMsgAccountLockStatusChange,
        EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns,
        EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse,
        EGCSystemMsg::k_EGCMsgGetIPASN,
        EGCSystemMsg::k_EGCMsgGetIPASNResponse,
        EGCSystemMsg::k_EGCMsgGetAppFriendsList,
        EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse,
        EGCSystemMsg::k_EGCMsgVacVerificationChange,
        EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange,
        EGCSystemMsg::k_EGCMsgAccountTwoFactorChange,
        EGCSystemMsg::k_EGCMsgCheckClanMembership,
        EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse,
        EGCSystemMsg::k_EGCMsgInviteUserToLobby,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse,
        EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest,
        EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse,
    ];
}

impl ::std::default::Default for EGCSystemMsg {
    fn default() -> Self {
        EGCSystemMsg::k_EGCMsgInvalid
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESOMsg)
pub enum ESOMsg {
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Create)
    k_ESOMsg_Create = 21,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Update)
    k_ESOMsg_Update = 22,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Destroy)
    k_ESOMsg_Destroy = 23,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscribed)
    k_ESOMsg_CacheSubscribed = 24,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheUnsubscribed)
    k_ESOMsg_CacheUnsubscribed = 25,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_UpdateMultiple)
    k_ESOMsg_UpdateMultiple = 26,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscriptionCheck)
    k_ESOMsg_CacheSubscriptionCheck = 27,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscriptionRefresh)
    k_ESOMsg_CacheSubscriptionRefresh = 28,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscribedUpToDate)
    k_ESOMsg_CacheSubscribedUpToDate = 29,
}

impl ::steam_vent_proto_common::protobuf::Enum for ESOMsg {
    const NAME: &'static str = "ESOMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESOMsg> {
        match value {
            21 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            22 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            23 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            24 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            25 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            26 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            27 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            28 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            29 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribedUpToDate),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESOMsg> {
        match str {
            "k_ESOMsg_Create" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            "k_ESOMsg_Update" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            "k_ESOMsg_Destroy" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            "k_ESOMsg_CacheSubscribed" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            "k_ESOMsg_CacheUnsubscribed" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            "k_ESOMsg_UpdateMultiple" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            "k_ESOMsg_CacheSubscriptionCheck" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            "k_ESOMsg_CacheSubscriptionRefresh" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            "k_ESOMsg_CacheSubscribedUpToDate" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribedUpToDate),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESOMsg] = &[
        ESOMsg::k_ESOMsg_Create,
        ESOMsg::k_ESOMsg_Update,
        ESOMsg::k_ESOMsg_Destroy,
        ESOMsg::k_ESOMsg_CacheSubscribed,
        ESOMsg::k_ESOMsg_CacheUnsubscribed,
        ESOMsg::k_ESOMsg_UpdateMultiple,
        ESOMsg::k_ESOMsg_CacheSubscriptionCheck,
        ESOMsg::k_ESOMsg_CacheSubscriptionRefresh,
        ESOMsg::k_ESOMsg_CacheSubscribedUpToDate,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESOMsg {
    fn default() -> Self {
        ESOMsg::k_ESOMsg_Create
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCBaseClientMsg)
pub enum EGCBaseClientMsg {
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCPingRequest)
    k_EMsgGCPingRequest = 3001,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCPingResponse)
    k_EMsgGCPingResponse = 3002,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientWelcome)
    k_EMsgGCClientWelcome = 4004,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerWelcome)
    k_EMsgGCServerWelcome = 4005,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHello)
    k_EMsgGCClientHello = 4006,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerHello)
    k_EMsgGCServerHello = 4007,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientGoodbye)
    k_EMsgGCClientGoodbye = 4008,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerGoodbye)
    k_EMsgGCServerGoodbye = 4009,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCBaseClientMsg {
    const NAME: &'static str = "EGCBaseClientMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCBaseClientMsg> {
        match value {
            3001 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingRequest),
            3002 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingResponse),
            4004 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            4005 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            4006 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            4007 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            4008 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientGoodbye),
            4009 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerGoodbye),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCBaseClientMsg> {
        match str {
            "k_EMsgGCPingRequest" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingRequest),
            "k_EMsgGCPingResponse" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingResponse),
            "k_EMsgGCClientWelcome" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            "k_EMsgGCServerWelcome" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            "k_EMsgGCClientHello" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            "k_EMsgGCServerHello" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            "k_EMsgGCClientGoodbye" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientGoodbye),
            "k_EMsgGCServerGoodbye" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerGoodbye),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCBaseClientMsg] = &[
        EGCBaseClientMsg::k_EMsgGCPingRequest,
        EGCBaseClientMsg::k_EMsgGCPingResponse,
        EGCBaseClientMsg::k_EMsgGCClientWelcome,
        EGCBaseClientMsg::k_EMsgGCServerWelcome,
        EGCBaseClientMsg::k_EMsgGCClientHello,
        EGCBaseClientMsg::k_EMsgGCServerHello,
        EGCBaseClientMsg::k_EMsgGCClientGoodbye,
        EGCBaseClientMsg::k_EMsgGCServerGoodbye,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCBaseClientMsg {
    fn default() -> Self {
        EGCBaseClientMsg::k_EMsgGCPingRequest
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCToGCMsg)
pub enum EGCToGCMsg {
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterAck)
    k_EGCToGCMsgMasterAck = 150,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterAckResponse)
    k_EGCToGCMsgMasterAckResponse = 151,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgRouted)
    k_EGCToGCMsgRouted = 152,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgRoutedReply)
    k_EGCToGCMsgRoutedReply = 153,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCUpdateSubGCSessionInfo)
    k_EMsgGCUpdateSubGCSessionInfo = 154,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCRequestSubGCSessionInfo)
    k_EMsgGCRequestSubGCSessionInfo = 155,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCRequestSubGCSessionInfoResponse)
    k_EMsgGCRequestSubGCSessionInfoResponse = 156,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterStartupComplete)
    k_EGCToGCMsgMasterStartupComplete = 157,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCToGCSOCacheSubscribe)
    k_EMsgGCToGCSOCacheSubscribe = 158,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCToGCSOCacheUnsubscribe)
    k_EMsgGCToGCSOCacheUnsubscribe = 159,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCToGCMsg {
    const NAME: &'static str = "EGCToGCMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCToGCMsg> {
        match value {
            150 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            151 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            152 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            153 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            154 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo),
            155 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo),
            156 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse),
            157 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            158 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe),
            159 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCToGCMsg> {
        match str {
            "k_EGCToGCMsgMasterAck" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            "k_EGCToGCMsgMasterAckResponse" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            "k_EGCToGCMsgRouted" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            "k_EGCToGCMsgRoutedReply" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            "k_EMsgGCUpdateSubGCSessionInfo" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo),
            "k_EMsgGCRequestSubGCSessionInfo" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo),
            "k_EMsgGCRequestSubGCSessionInfoResponse" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse),
            "k_EGCToGCMsgMasterStartupComplete" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            "k_EMsgGCToGCSOCacheSubscribe" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe),
            "k_EMsgGCToGCSOCacheUnsubscribe" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCToGCMsg] = &[
        EGCToGCMsg::k_EGCToGCMsgMasterAck,
        EGCToGCMsg::k_EGCToGCMsgMasterAckResponse,
        EGCToGCMsg::k_EGCToGCMsgRouted,
        EGCToGCMsg::k_EGCToGCMsgRoutedReply,
        EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo,
        EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo,
        EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse,
        EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete,
        EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe,
        EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCToGCMsg {
    fn default() -> Self {
        EGCToGCMsg::k_EGCToGCMsgMasterAck
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

impl ::steam_vent_proto_common::RpcMessage for CCommunity_GamePersonalDataCategoryInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CCommunity_GetGamePersonalDataCategories_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CCommunity_GetGamePersonalDataCategories_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CCommunity_GetGamePersonalDataEntries_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CCommunity_GetGamePersonalDataEntries_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
