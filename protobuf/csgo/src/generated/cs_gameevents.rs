// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cs_gameevents.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgTEPlayerAnimEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTEPlayerAnimEvent {
    // message fields
    // @@protoc_insertion_point(field:CMsgTEPlayerAnimEvent.player)
    pub player: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEPlayerAnimEvent.event)
    pub event: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEPlayerAnimEvent.data)
    pub data: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTEPlayerAnimEvent.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTEPlayerAnimEvent {
    fn default() -> &'a CMsgTEPlayerAnimEvent {
        <CMsgTEPlayerAnimEvent as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgTEPlayerAnimEvent {
    pub fn new() -> CMsgTEPlayerAnimEvent {
        ::std::default::Default::default()
    }

    // optional fixed32 player = 1;

    pub fn player(&self) -> u32 {
        self.player.unwrap_or(16777215u32)
    }

    pub fn clear_player(&mut self) {
        self.player = ::std::option::Option::None;
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: u32) {
        self.player = ::std::option::Option::Some(v);
    }

    // optional uint32 event = 2;

    pub fn event(&self) -> u32 {
        self.event.unwrap_or(0)
    }

    pub fn clear_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: u32) {
        self.event = ::std::option::Option::Some(v);
    }

    // optional int32 data = 3;

    pub fn data(&self) -> i32 {
        self.data.unwrap_or(0)
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: i32) {
        self.data = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgTEPlayerAnimEvent {
    const NAME: &'static str = "CMsgTEPlayerAnimEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.player = ::std::option::Option::Some(is.read_fixed32()?);
                },
                16 => {
                    self.event = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.data = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player {
            my_size += 1 + 4;
        }
        if let Some(v) = self.event {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.data {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.player {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.event {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.data {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTEPlayerAnimEvent {
        CMsgTEPlayerAnimEvent::new()
    }

    fn clear(&mut self) {
        self.player = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTEPlayerAnimEvent {
        static instance: CMsgTEPlayerAnimEvent = CMsgTEPlayerAnimEvent {
            player: ::std::option::Option::None,
            event: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgTERadioIcon)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTERadioIcon {
    // message fields
    // @@protoc_insertion_point(field:CMsgTERadioIcon.player)
    pub player: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTERadioIcon.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTERadioIcon {
    fn default() -> &'a CMsgTERadioIcon {
        <CMsgTERadioIcon as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgTERadioIcon {
    pub fn new() -> CMsgTERadioIcon {
        ::std::default::Default::default()
    }

    // optional fixed32 player = 1;

    pub fn player(&self) -> u32 {
        self.player.unwrap_or(16777215u32)
    }

    pub fn clear_player(&mut self) {
        self.player = ::std::option::Option::None;
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: u32) {
        self.player = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgTERadioIcon {
    const NAME: &'static str = "CMsgTERadioIcon";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.player = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player {
            my_size += 1 + 4;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.player {
            os.write_fixed32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTERadioIcon {
        CMsgTERadioIcon::new()
    }

    fn clear(&mut self) {
        self.player = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTERadioIcon {
        static instance: CMsgTERadioIcon = CMsgTERadioIcon {
            player: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgTEFireBullets)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTEFireBullets {
    // message fields
    // @@protoc_insertion_point(field:CMsgTEFireBullets.origin)
    pub origin: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.angles)
    pub angles: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgQAngle>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.weapon_id)
    pub weapon_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.mode)
    pub mode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.seed)
    pub seed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.player)
    pub player: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.inaccuracy)
    pub inaccuracy: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.recoil_index)
    pub recoil_index: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.spread)
    pub spread: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.sound_type)
    pub sound_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.item_def_index)
    pub item_def_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.sound_dsp_effect)
    pub sound_dsp_effect: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.ent_origin)
    pub ent_origin: ::steam_vent_proto_common::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.num_bullets_remaining)
    pub num_bullets_remaining: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgTEFireBullets.attack_type)
    pub attack_type: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTEFireBullets.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTEFireBullets {
    fn default() -> &'a CMsgTEFireBullets {
        <CMsgTEFireBullets as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgTEFireBullets {
    pub fn new() -> CMsgTEFireBullets {
        ::std::default::Default::default()
    }

    // optional uint32 weapon_id = 3;

    pub fn weapon_id(&self) -> u32 {
        self.weapon_id.unwrap_or(16777215u32)
    }

    pub fn clear_weapon_id(&mut self) {
        self.weapon_id = ::std::option::Option::None;
    }

    pub fn has_weapon_id(&self) -> bool {
        self.weapon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weapon_id(&mut self, v: u32) {
        self.weapon_id = ::std::option::Option::Some(v);
    }

    // optional uint32 mode = 4;

    pub fn mode(&self) -> u32 {
        self.mode.unwrap_or(0)
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: u32) {
        self.mode = ::std::option::Option::Some(v);
    }

    // optional uint32 seed = 5;

    pub fn seed(&self) -> u32 {
        self.seed.unwrap_or(0)
    }

    pub fn clear_seed(&mut self) {
        self.seed = ::std::option::Option::None;
    }

    pub fn has_seed(&self) -> bool {
        self.seed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seed(&mut self, v: u32) {
        self.seed = ::std::option::Option::Some(v);
    }

    // optional fixed32 player = 6;

    pub fn player(&self) -> u32 {
        self.player.unwrap_or(16777215u32)
    }

    pub fn clear_player(&mut self) {
        self.player = ::std::option::Option::None;
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: u32) {
        self.player = ::std::option::Option::Some(v);
    }

    // optional float inaccuracy = 7;

    pub fn inaccuracy(&self) -> f32 {
        self.inaccuracy.unwrap_or(0.)
    }

    pub fn clear_inaccuracy(&mut self) {
        self.inaccuracy = ::std::option::Option::None;
    }

    pub fn has_inaccuracy(&self) -> bool {
        self.inaccuracy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inaccuracy(&mut self, v: f32) {
        self.inaccuracy = ::std::option::Option::Some(v);
    }

    // optional float recoil_index = 8;

    pub fn recoil_index(&self) -> f32 {
        self.recoil_index.unwrap_or(0.)
    }

    pub fn clear_recoil_index(&mut self) {
        self.recoil_index = ::std::option::Option::None;
    }

    pub fn has_recoil_index(&self) -> bool {
        self.recoil_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recoil_index(&mut self, v: f32) {
        self.recoil_index = ::std::option::Option::Some(v);
    }

    // optional float spread = 9;

    pub fn spread(&self) -> f32 {
        self.spread.unwrap_or(0.)
    }

    pub fn clear_spread(&mut self) {
        self.spread = ::std::option::Option::None;
    }

    pub fn has_spread(&self) -> bool {
        self.spread.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f32) {
        self.spread = ::std::option::Option::Some(v);
    }

    // optional int32 sound_type = 10;

    pub fn sound_type(&self) -> i32 {
        self.sound_type.unwrap_or(0)
    }

    pub fn clear_sound_type(&mut self) {
        self.sound_type = ::std::option::Option::None;
    }

    pub fn has_sound_type(&self) -> bool {
        self.sound_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sound_type(&mut self, v: i32) {
        self.sound_type = ::std::option::Option::Some(v);
    }

    // optional uint32 item_def_index = 11;

    pub fn item_def_index(&self) -> u32 {
        self.item_def_index.unwrap_or(0)
    }

    pub fn clear_item_def_index(&mut self) {
        self.item_def_index = ::std::option::Option::None;
    }

    pub fn has_item_def_index(&self) -> bool {
        self.item_def_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_def_index(&mut self, v: u32) {
        self.item_def_index = ::std::option::Option::Some(v);
    }

    // optional fixed32 sound_dsp_effect = 12;

    pub fn sound_dsp_effect(&self) -> u32 {
        self.sound_dsp_effect.unwrap_or(0)
    }

    pub fn clear_sound_dsp_effect(&mut self) {
        self.sound_dsp_effect = ::std::option::Option::None;
    }

    pub fn has_sound_dsp_effect(&self) -> bool {
        self.sound_dsp_effect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sound_dsp_effect(&mut self, v: u32) {
        self.sound_dsp_effect = ::std::option::Option::Some(v);
    }

    // optional uint32 num_bullets_remaining = 14;

    pub fn num_bullets_remaining(&self) -> u32 {
        self.num_bullets_remaining.unwrap_or(0)
    }

    pub fn clear_num_bullets_remaining(&mut self) {
        self.num_bullets_remaining = ::std::option::Option::None;
    }

    pub fn has_num_bullets_remaining(&self) -> bool {
        self.num_bullets_remaining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_bullets_remaining(&mut self, v: u32) {
        self.num_bullets_remaining = ::std::option::Option::Some(v);
    }

    // optional uint32 attack_type = 15;

    pub fn attack_type(&self) -> u32 {
        self.attack_type.unwrap_or(0)
    }

    pub fn clear_attack_type(&mut self) {
        self.attack_type = ::std::option::Option::None;
    }

    pub fn has_attack_type(&self) -> bool {
        self.attack_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attack_type(&mut self, v: u32) {
        self.attack_type = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgTEFireBullets {
    const NAME: &'static str = "CMsgTEFireBullets";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.origin)?;
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.angles)?;
                },
                24 => {
                    self.weapon_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.mode = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.seed = ::std::option::Option::Some(is.read_uint32()?);
                },
                53 => {
                    self.player = ::std::option::Option::Some(is.read_fixed32()?);
                },
                61 => {
                    self.inaccuracy = ::std::option::Option::Some(is.read_float()?);
                },
                69 => {
                    self.recoil_index = ::std::option::Option::Some(is.read_float()?);
                },
                77 => {
                    self.spread = ::std::option::Option::Some(is.read_float()?);
                },
                80 => {
                    self.sound_type = ::std::option::Option::Some(is.read_int32()?);
                },
                88 => {
                    self.item_def_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                101 => {
                    self.sound_dsp_effect = ::std::option::Option::Some(is.read_fixed32()?);
                },
                106 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.ent_origin)?;
                },
                112 => {
                    self.num_bullets_remaining = ::std::option::Option::Some(is.read_uint32()?);
                },
                120 => {
                    self.attack_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.origin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.angles.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.weapon_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.mode {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.seed {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.player {
            my_size += 1 + 4;
        }
        if let Some(v) = self.inaccuracy {
            my_size += 1 + 4;
        }
        if let Some(v) = self.recoil_index {
            my_size += 1 + 4;
        }
        if let Some(v) = self.spread {
            my_size += 1 + 4;
        }
        if let Some(v) = self.sound_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(10, v);
        }
        if let Some(v) = self.item_def_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.sound_dsp_effect {
            my_size += 1 + 4;
        }
        if let Some(v) = self.ent_origin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.num_bullets_remaining {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(14, v);
        }
        if let Some(v) = self.attack_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(15, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.origin.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.angles.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.weapon_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.mode {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.seed {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.player {
            os.write_fixed32(6, v)?;
        }
        if let Some(v) = self.inaccuracy {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.recoil_index {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.spread {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.sound_type {
            os.write_int32(10, v)?;
        }
        if let Some(v) = self.item_def_index {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.sound_dsp_effect {
            os.write_fixed32(12, v)?;
        }
        if let Some(v) = self.ent_origin.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.num_bullets_remaining {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.attack_type {
            os.write_uint32(15, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTEFireBullets {
        CMsgTEFireBullets::new()
    }

    fn clear(&mut self) {
        self.origin.clear();
        self.angles.clear();
        self.weapon_id = ::std::option::Option::None;
        self.mode = ::std::option::Option::None;
        self.seed = ::std::option::Option::None;
        self.player = ::std::option::Option::None;
        self.inaccuracy = ::std::option::Option::None;
        self.recoil_index = ::std::option::Option::None;
        self.spread = ::std::option::Option::None;
        self.sound_type = ::std::option::Option::None;
        self.item_def_index = ::std::option::Option::None;
        self.sound_dsp_effect = ::std::option::Option::None;
        self.ent_origin.clear();
        self.num_bullets_remaining = ::std::option::Option::None;
        self.attack_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTEFireBullets {
        static instance: CMsgTEFireBullets = CMsgTEFireBullets {
            origin: ::steam_vent_proto_common::protobuf::MessageField::none(),
            angles: ::steam_vent_proto_common::protobuf::MessageField::none(),
            weapon_id: ::std::option::Option::None,
            mode: ::std::option::Option::None,
            seed: ::std::option::Option::None,
            player: ::std::option::Option::None,
            inaccuracy: ::std::option::Option::None,
            recoil_index: ::std::option::Option::None,
            spread: ::std::option::Option::None,
            sound_type: ::std::option::Option::None,
            item_def_index: ::std::option::Option::None,
            sound_dsp_effect: ::std::option::Option::None,
            ent_origin: ::steam_vent_proto_common::protobuf::MessageField::none(),
            num_bullets_remaining: ::std::option::Option::None,
            attack_type: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ECsgoGameEvents)
pub enum ECsgoGameEvents {
    // @@protoc_insertion_point(enum_value:ECsgoGameEvents.GE_PlayerAnimEventId)
    GE_PlayerAnimEventId = 450,
    // @@protoc_insertion_point(enum_value:ECsgoGameEvents.GE_RadioIconEventId)
    GE_RadioIconEventId = 451,
    // @@protoc_insertion_point(enum_value:ECsgoGameEvents.GE_FireBulletsId)
    GE_FireBulletsId = 452,
}

impl ::steam_vent_proto_common::protobuf::Enum for ECsgoGameEvents {
    const NAME: &'static str = "ECsgoGameEvents";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECsgoGameEvents> {
        match value {
            450 => ::std::option::Option::Some(ECsgoGameEvents::GE_PlayerAnimEventId),
            451 => ::std::option::Option::Some(ECsgoGameEvents::GE_RadioIconEventId),
            452 => ::std::option::Option::Some(ECsgoGameEvents::GE_FireBulletsId),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ECsgoGameEvents> {
        match str {
            "GE_PlayerAnimEventId" => ::std::option::Option::Some(ECsgoGameEvents::GE_PlayerAnimEventId),
            "GE_RadioIconEventId" => ::std::option::Option::Some(ECsgoGameEvents::GE_RadioIconEventId),
            "GE_FireBulletsId" => ::std::option::Option::Some(ECsgoGameEvents::GE_FireBulletsId),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ECsgoGameEvents] = &[
        ECsgoGameEvents::GE_PlayerAnimEventId,
        ECsgoGameEvents::GE_RadioIconEventId,
        ECsgoGameEvents::GE_FireBulletsId,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ECsgoGameEvents {
    fn default() -> Self {
        ECsgoGameEvents::GE_PlayerAnimEventId
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::networkbasetypes::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgTEPlayerAnimEvent {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgTERadioIcon {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgTEFireBullets {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
