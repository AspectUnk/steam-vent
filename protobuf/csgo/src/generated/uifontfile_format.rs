// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `uifontfile_format.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CUIFontFilePB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUIFontFilePB {
    // message fields
    // @@protoc_insertion_point(field:CUIFontFilePB.font_file_name)
    pub font_file_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUIFontFilePB.opentype_font_data)
    pub opentype_font_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CUIFontFilePB.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUIFontFilePB {
    fn default() -> &'a CUIFontFilePB {
        <CUIFontFilePB as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CUIFontFilePB {
    pub fn new() -> CUIFontFilePB {
        ::std::default::Default::default()
    }

    // optional string font_file_name = 1;

    pub fn font_file_name(&self) -> &str {
        match self.font_file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_font_file_name(&mut self) {
        self.font_file_name = ::std::option::Option::None;
    }

    pub fn has_font_file_name(&self) -> bool {
        self.font_file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_font_file_name(&mut self, v: ::std::string::String) {
        self.font_file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_font_file_name(&mut self) -> &mut ::std::string::String {
        if self.font_file_name.is_none() {
            self.font_file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.font_file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_font_file_name(&mut self) -> ::std::string::String {
        self.font_file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes opentype_font_data = 2;

    pub fn opentype_font_data(&self) -> &[u8] {
        match self.opentype_font_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_opentype_font_data(&mut self) {
        self.opentype_font_data = ::std::option::Option::None;
    }

    pub fn has_opentype_font_data(&self) -> bool {
        self.opentype_font_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_opentype_font_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.opentype_font_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_opentype_font_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.opentype_font_data.is_none() {
            self.opentype_font_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.opentype_font_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_opentype_font_data(&mut self) -> ::std::vec::Vec<u8> {
        self.opentype_font_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CUIFontFilePB {
    const NAME: &'static str = "CUIFontFilePB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.font_file_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.opentype_font_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.font_file_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.opentype_font_data.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.font_file_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.opentype_font_data.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUIFontFilePB {
        CUIFontFilePB::new()
    }

    fn clear(&mut self) {
        self.font_file_name = ::std::option::Option::None;
        self.opentype_font_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUIFontFilePB {
        static instance: CUIFontFilePB = CUIFontFilePB {
            font_file_name: ::std::option::Option::None,
            opentype_font_data: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUIFontFilePackagePB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUIFontFilePackagePB {
    // message fields
    // @@protoc_insertion_point(field:CUIFontFilePackagePB.package_version)
    pub package_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUIFontFilePackagePB.encrypted_font_files)
    pub encrypted_font_files: ::std::vec::Vec<cuifont_file_package_pb::CUIEncryptedFontFilePB>,
    // special fields
    // @@protoc_insertion_point(special_field:CUIFontFilePackagePB.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUIFontFilePackagePB {
    fn default() -> &'a CUIFontFilePackagePB {
        <CUIFontFilePackagePB as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CUIFontFilePackagePB {
    pub fn new() -> CUIFontFilePackagePB {
        ::std::default::Default::default()
    }

    // required uint32 package_version = 1;

    pub fn package_version(&self) -> u32 {
        self.package_version.unwrap_or(0)
    }

    pub fn clear_package_version(&mut self) {
        self.package_version = ::std::option::Option::None;
    }

    pub fn has_package_version(&self) -> bool {
        self.package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package_version(&mut self, v: u32) {
        self.package_version = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CUIFontFilePackagePB {
    const NAME: &'static str = "CUIFontFilePackagePB";

    fn is_initialized(&self) -> bool {
        if self.package_version.is_none() {
            return false;
        }
        for v in &self.encrypted_font_files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.package_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.encrypted_font_files.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.package_version {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.encrypted_font_files {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.package_version {
            os.write_uint32(1, v)?;
        }
        for v in &self.encrypted_font_files {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUIFontFilePackagePB {
        CUIFontFilePackagePB::new()
    }

    fn clear(&mut self) {
        self.package_version = ::std::option::Option::None;
        self.encrypted_font_files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUIFontFilePackagePB {
        static instance: CUIFontFilePackagePB = CUIFontFilePackagePB {
            package_version: ::std::option::Option::None,
            encrypted_font_files: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CUIFontFilePackagePB`
pub mod cuifont_file_package_pb {
    // @@protoc_insertion_point(message:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CUIEncryptedFontFilePB {
        // message fields
        // @@protoc_insertion_point(field:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
        pub encrypted_contents: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CUIFontFilePackagePB.CUIEncryptedFontFilePB.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CUIEncryptedFontFilePB {
        fn default() -> &'a CUIEncryptedFontFilePB {
            <CUIEncryptedFontFilePB as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl CUIEncryptedFontFilePB {
        pub fn new() -> CUIEncryptedFontFilePB {
            ::std::default::Default::default()
        }

        // optional bytes encrypted_contents = 1;

        pub fn encrypted_contents(&self) -> &[u8] {
            match self.encrypted_contents.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_encrypted_contents(&mut self) {
            self.encrypted_contents = ::std::option::Option::None;
        }

        pub fn has_encrypted_contents(&self) -> bool {
            self.encrypted_contents.is_some()
        }

        // Param is passed by value, moved
        pub fn set_encrypted_contents(&mut self, v: ::std::vec::Vec<u8>) {
            self.encrypted_contents = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_encrypted_contents(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.encrypted_contents.is_none() {
                self.encrypted_contents = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.encrypted_contents.as_mut().unwrap()
        }

        // Take field
        pub fn take_encrypted_contents(&mut self) -> ::std::vec::Vec<u8> {
            self.encrypted_contents.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for CUIEncryptedFontFilePB {
        const NAME: &'static str = "CUIEncryptedFontFilePB";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.encrypted_contents = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.encrypted_contents.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(1, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.encrypted_contents.as_ref() {
                os.write_bytes(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CUIEncryptedFontFilePB {
            CUIEncryptedFontFilePB::new()
        }

        fn clear(&mut self) {
            self.encrypted_contents = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CUIEncryptedFontFilePB {
            static instance: CUIEncryptedFontFilePB = CUIEncryptedFontFilePB {
                encrypted_contents: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

impl ::steam_vent_proto_common::RpcMessage for CUIFontFilePB {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CUIFontFilePackagePB {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
