// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `econ_gcmessages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgGCGiftedItems)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGiftedItems {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.giftdefindex)
    pub giftdefindex: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.max_gifts_possible)
    pub max_gifts_possible: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.num_eligible_recipients)
    pub num_eligible_recipients: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.recipients_accountids)
    pub recipients_accountids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGiftedItems.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGiftedItems {
    fn default() -> &'a CMsgGCGiftedItems {
        <CMsgGCGiftedItems as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGiftedItems {
    pub fn new() -> CMsgGCGiftedItems {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional uint32 giftdefindex = 2;

    pub fn giftdefindex(&self) -> u32 {
        self.giftdefindex.unwrap_or(0)
    }

    pub fn clear_giftdefindex(&mut self) {
        self.giftdefindex = ::std::option::Option::None;
    }

    pub fn has_giftdefindex(&self) -> bool {
        self.giftdefindex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_giftdefindex(&mut self, v: u32) {
        self.giftdefindex = ::std::option::Option::Some(v);
    }

    // optional uint32 max_gifts_possible = 3;

    pub fn max_gifts_possible(&self) -> u32 {
        self.max_gifts_possible.unwrap_or(0)
    }

    pub fn clear_max_gifts_possible(&mut self) {
        self.max_gifts_possible = ::std::option::Option::None;
    }

    pub fn has_max_gifts_possible(&self) -> bool {
        self.max_gifts_possible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_gifts_possible(&mut self, v: u32) {
        self.max_gifts_possible = ::std::option::Option::Some(v);
    }

    // optional uint32 num_eligible_recipients = 4;

    pub fn num_eligible_recipients(&self) -> u32 {
        self.num_eligible_recipients.unwrap_or(0)
    }

    pub fn clear_num_eligible_recipients(&mut self) {
        self.num_eligible_recipients = ::std::option::Option::None;
    }

    pub fn has_num_eligible_recipients(&self) -> bool {
        self.num_eligible_recipients.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_eligible_recipients(&mut self, v: u32) {
        self.num_eligible_recipients = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCGiftedItems {
    const NAME: &'static str = "CMsgGCGiftedItems";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.giftdefindex = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.max_gifts_possible = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.num_eligible_recipients = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.recipients_accountids)?;
                },
                40 => {
                    self.recipients_accountids.push(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.giftdefindex {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.max_gifts_possible {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.num_eligible_recipients {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        for value in &self.recipients_accountids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.giftdefindex {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.max_gifts_possible {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.num_eligible_recipients {
            os.write_uint32(4, v)?;
        }
        for v in &self.recipients_accountids {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGiftedItems {
        CMsgGCGiftedItems::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.giftdefindex = ::std::option::Option::None;
        self.max_gifts_possible = ::std::option::Option::None;
        self.num_eligible_recipients = ::std::option::Option::None;
        self.recipients_accountids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGiftedItems {
        static instance: CMsgGCGiftedItems = CMsgGCGiftedItems {
            accountid: ::std::option::Option::None,
            giftdefindex: ::std::option::Option::None,
            max_gifts_possible: ::std::option::Option::None,
            num_eligible_recipients: ::std::option::Option::None,
            recipients_accountids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCDev_SchemaReservationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCDev_SchemaReservationRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCDev_SchemaReservationRequest.schema_typename)
    pub schema_typename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGCDev_SchemaReservationRequest.instance_name)
    pub instance_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGCDev_SchemaReservationRequest.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCDev_SchemaReservationRequest.id)
    pub id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCDev_SchemaReservationRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCDev_SchemaReservationRequest {
    fn default() -> &'a CMsgGCDev_SchemaReservationRequest {
        <CMsgGCDev_SchemaReservationRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCDev_SchemaReservationRequest {
    pub fn new() -> CMsgGCDev_SchemaReservationRequest {
        ::std::default::Default::default()
    }

    // optional string schema_typename = 1;

    pub fn schema_typename(&self) -> &str {
        match self.schema_typename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_schema_typename(&mut self) {
        self.schema_typename = ::std::option::Option::None;
    }

    pub fn has_schema_typename(&self) -> bool {
        self.schema_typename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_typename(&mut self, v: ::std::string::String) {
        self.schema_typename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema_typename(&mut self) -> &mut ::std::string::String {
        if self.schema_typename.is_none() {
            self.schema_typename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.schema_typename.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema_typename(&mut self) -> ::std::string::String {
        self.schema_typename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string instance_name = 2;

    pub fn instance_name(&self) -> &str {
        match self.instance_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_instance_name(&mut self) {
        self.instance_name = ::std::option::Option::None;
    }

    pub fn has_instance_name(&self) -> bool {
        self.instance_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance_name(&mut self, v: ::std::string::String) {
        self.instance_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_name(&mut self) -> &mut ::std::string::String {
        if self.instance_name.is_none() {
            self.instance_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.instance_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance_name(&mut self) -> ::std::string::String {
        self.instance_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 context = 3;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional uint64 id = 4;

    pub fn id(&self) -> u64 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCDev_SchemaReservationRequest {
    const NAME: &'static str = "CMsgGCDev_SchemaReservationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schema_typename = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.instance_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema_typename.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.instance_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.context {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.schema_typename.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.instance_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.id {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCDev_SchemaReservationRequest {
        CMsgGCDev_SchemaReservationRequest::new()
    }

    fn clear(&mut self) {
        self.schema_typename = ::std::option::Option::None;
        self.instance_name = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCDev_SchemaReservationRequest {
        static instance: CMsgGCDev_SchemaReservationRequest = CMsgGCDev_SchemaReservationRequest {
            schema_typename: ::std::option::Option::None,
            instance_name: ::std::option::Option::None,
            context: ::std::option::Option::None,
            id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCasketItem)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCasketItem {
    // message fields
    // @@protoc_insertion_point(field:CMsgCasketItem.casket_item_id)
    pub casket_item_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgCasketItem.item_item_id)
    pub item_item_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCasketItem.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCasketItem {
    fn default() -> &'a CMsgCasketItem {
        <CMsgCasketItem as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCasketItem {
    pub fn new() -> CMsgCasketItem {
        ::std::default::Default::default()
    }

    // optional uint64 casket_item_id = 1;

    pub fn casket_item_id(&self) -> u64 {
        self.casket_item_id.unwrap_or(0)
    }

    pub fn clear_casket_item_id(&mut self) {
        self.casket_item_id = ::std::option::Option::None;
    }

    pub fn has_casket_item_id(&self) -> bool {
        self.casket_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_casket_item_id(&mut self, v: u64) {
        self.casket_item_id = ::std::option::Option::Some(v);
    }

    // optional uint64 item_item_id = 2;

    pub fn item_item_id(&self) -> u64 {
        self.item_item_id.unwrap_or(0)
    }

    pub fn clear_item_item_id(&mut self) {
        self.item_item_id = ::std::option::Option::None;
    }

    pub fn has_item_item_id(&self) -> bool {
        self.item_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_item_id(&mut self, v: u64) {
        self.item_item_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCasketItem {
    const NAME: &'static str = "CMsgCasketItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.casket_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.item_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.casket_item_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.item_item_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.casket_item_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.item_item_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCasketItem {
        CMsgCasketItem::new()
    }

    fn clear(&mut self) {
        self.casket_item_id = ::std::option::Option::None;
        self.item_item_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCasketItem {
        static instance: CMsgCasketItem = CMsgCasketItem {
            casket_item_id: ::std::option::Option::None,
            item_item_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCUserTrackTimePlayedConsecutively)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCUserTrackTimePlayedConsecutively {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCUserTrackTimePlayedConsecutively.state)
    pub state: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCUserTrackTimePlayedConsecutively.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCUserTrackTimePlayedConsecutively {
    fn default() -> &'a CMsgGCUserTrackTimePlayedConsecutively {
        <CMsgGCUserTrackTimePlayedConsecutively as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCUserTrackTimePlayedConsecutively {
    pub fn new() -> CMsgGCUserTrackTimePlayedConsecutively {
        ::std::default::Default::default()
    }

    // optional uint32 state = 1;

    pub fn state(&self) -> u32 {
        self.state.unwrap_or(0)
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: u32) {
        self.state = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCUserTrackTimePlayedConsecutively {
    const NAME: &'static str = "CMsgGCUserTrackTimePlayedConsecutively";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.state {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCUserTrackTimePlayedConsecutively {
        CMsgGCUserTrackTimePlayedConsecutively::new()
    }

    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCUserTrackTimePlayedConsecutively {
        static instance: CMsgGCUserTrackTimePlayedConsecutively = CMsgGCUserTrackTimePlayedConsecutively {
            state: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCItemCustomizationNotification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCItemCustomizationNotification {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCItemCustomizationNotification.item_id)
    pub item_id: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CMsgGCItemCustomizationNotification.request)
    pub request: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCItemCustomizationNotification.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCItemCustomizationNotification {
    fn default() -> &'a CMsgGCItemCustomizationNotification {
        <CMsgGCItemCustomizationNotification as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCItemCustomizationNotification {
    pub fn new() -> CMsgGCItemCustomizationNotification {
        ::std::default::Default::default()
    }

    // optional uint32 request = 2;

    pub fn request(&self) -> u32 {
        self.request.unwrap_or(0)
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: u32) {
        self.request = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCItemCustomizationNotification {
    const NAME: &'static str = "CMsgGCItemCustomizationNotification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.item_id)?;
                },
                8 => {
                    self.item_id.push(is.read_uint64()?);
                },
                16 => {
                    self.request = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.item_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, *value);
        };
        if let Some(v) = self.request {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.item_id {
            os.write_uint64(1, *v)?;
        };
        if let Some(v) = self.request {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCItemCustomizationNotification {
        CMsgGCItemCustomizationNotification::new()
    }

    fn clear(&mut self) {
        self.item_id.clear();
        self.request = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCItemCustomizationNotification {
        static instance: CMsgGCItemCustomizationNotification = CMsgGCItemCustomizationNotification {
            item_id: ::std::vec::Vec::new(),
            request: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCItemMsg)
pub enum EGCItemMsg {
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBase)
    k_EMsgGCBase = 1000,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSetItemPosition)
    k_EMsgGCSetItemPosition = 1001,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCraft)
    k_EMsgGCCraft = 1002,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCraftResponse)
    k_EMsgGCCraftResponse = 1003,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDelete)
    k_EMsgGCDelete = 1004,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCVerifyCacheSubscription)
    k_EMsgGCVerifyCacheSubscription = 1005,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameItem)
    k_EMsgGCNameItem = 1006,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockCrate)
    k_EMsgGCUnlockCrate = 1007,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockCrateResponse)
    k_EMsgGCUnlockCrateResponse = 1008,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintItem)
    k_EMsgGCPaintItem = 1009,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintItemResponse)
    k_EMsgGCPaintItemResponse = 1010,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGoldenWrenchBroadcast)
    k_EMsgGCGoldenWrenchBroadcast = 1011,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCMOTDRequest)
    k_EMsgGCMOTDRequest = 1012,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCMOTDRequestResponse)
    k_EMsgGCMOTDRequestResponse = 1013,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddItemToSocket_DEPRECATED)
    k_EMsgGCAddItemToSocket_DEPRECATED = 1014,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddItemToSocketResponse_DEPRECATED)
    k_EMsgGCAddItemToSocketResponse_DEPRECATED = 1015,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddSocketToBaseItem_DEPRECATED)
    k_EMsgGCAddSocketToBaseItem_DEPRECATED = 1016,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddSocketToItem_DEPRECATED)
    k_EMsgGCAddSocketToItem_DEPRECATED = 1017,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddSocketToItemResponse_DEPRECATED)
    k_EMsgGCAddSocketToItemResponse_DEPRECATED = 1018,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameBaseItem)
    k_EMsgGCNameBaseItem = 1019,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameBaseItemResponse)
    k_EMsgGCNameBaseItemResponse = 1020,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveSocketItem_DEPRECATED)
    k_EMsgGCRemoveSocketItem_DEPRECATED = 1021,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveSocketItemResponse_DEPRECATED)
    k_EMsgGCRemoveSocketItemResponse_DEPRECATED = 1022,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCustomizeItemTexture)
    k_EMsgGCCustomizeItemTexture = 1023,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCustomizeItemTextureResponse)
    k_EMsgGCCustomizeItemTextureResponse = 1024,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUseItemRequest)
    k_EMsgGCUseItemRequest = 1025,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUseItemResponse)
    k_EMsgGCUseItemResponse = 1026,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftedItems_DEPRECATED)
    k_EMsgGCGiftedItems_DEPRECATED = 1027,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveItemName)
    k_EMsgGCRemoveItemName = 1030,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveItemPaint)
    k_EMsgGCRemoveItemPaint = 1031,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftWrapItem)
    k_EMsgGCGiftWrapItem = 1032,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftWrapItemResponse)
    k_EMsgGCGiftWrapItemResponse = 1033,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDeliverGift)
    k_EMsgGCDeliverGift = 1034,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDeliverGiftResponseGiver)
    k_EMsgGCDeliverGiftResponseGiver = 1035,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDeliverGiftResponseReceiver)
    k_EMsgGCDeliverGiftResponseReceiver = 1036,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnwrapGiftRequest)
    k_EMsgGCUnwrapGiftRequest = 1037,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnwrapGiftResponse)
    k_EMsgGCUnwrapGiftResponse = 1038,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSetItemStyle)
    k_EMsgGCSetItemStyle = 1039,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUsedClaimCodeItem)
    k_EMsgGCUsedClaimCodeItem = 1040,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSortItems)
    k_EMsgGCSortItems = 1041,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_RevolvingLootList_DEPRECATED)
    k_EMsgGC_RevolvingLootList_DEPRECATED = 1042,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccount)
    k_EMsgGCLookupAccount = 1043,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccountResponse)
    k_EMsgGCLookupAccountResponse = 1044,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccountName)
    k_EMsgGCLookupAccountName = 1045,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccountNameResponse)
    k_EMsgGCLookupAccountNameResponse = 1046,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUpdateItemSchema)
    k_EMsgGCUpdateItemSchema = 1049,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveCustomTexture)
    k_EMsgGCRemoveCustomTexture = 1051,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveCustomTextureResponse)
    k_EMsgGCRemoveCustomTextureResponse = 1052,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveMakersMark)
    k_EMsgGCRemoveMakersMark = 1053,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveMakersMarkResponse)
    k_EMsgGCRemoveMakersMarkResponse = 1054,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveUniqueCraftIndex)
    k_EMsgGCRemoveUniqueCraftIndex = 1055,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveUniqueCraftIndexResponse)
    k_EMsgGCRemoveUniqueCraftIndexResponse = 1056,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSaxxyBroadcast)
    k_EMsgGCSaxxyBroadcast = 1057,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBackpackSortFinished)
    k_EMsgGCBackpackSortFinished = 1058,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustItemEquippedState)
    k_EMsgGCAdjustItemEquippedState = 1059,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCollectItem)
    k_EMsgGCCollectItem = 1061,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemAcknowledged__DEPRECATED)
    k_EMsgGCItemAcknowledged__DEPRECATED = 1062,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_ReportAbuse)
    k_EMsgGC_ReportAbuse = 1065,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_ReportAbuseResponse)
    k_EMsgGC_ReportAbuseResponse = 1066,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameItemNotification)
    k_EMsgGCNameItemNotification = 1068,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyConsumableEffects)
    k_EMsgGCApplyConsumableEffects = 1069,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCConsumableExhausted)
    k_EMsgGCConsumableExhausted = 1070,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCShowItemsPickedUp)
    k_EMsgGCShowItemsPickedUp = 1071,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCClientDisplayNotification)
    k_EMsgGCClientDisplayNotification = 1072,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyStrangePart)
    k_EMsgGCApplyStrangePart = 1073,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_IncrementKillCountAttribute)
    k_EMsgGC_IncrementKillCountAttribute = 1074,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_IncrementKillCountResponse)
    k_EMsgGC_IncrementKillCountResponse = 1075,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyPennantUpgrade)
    k_EMsgGCApplyPennantUpgrade = 1076,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSetItemPositions)
    k_EMsgGCSetItemPositions = 1077,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyEggEssence)
    k_EMsgGCApplyEggEssence = 1078,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameEggEssenceResponse)
    k_EMsgGCNameEggEssenceResponse = 1079,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintKitItem)
    k_EMsgGCPaintKitItem = 1080,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintKitBaseItem)
    k_EMsgGCPaintKitBaseItem = 1081,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintKitItemResponse)
    k_EMsgGCPaintKitItemResponse = 1082,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftedItems)
    k_EMsgGCGiftedItems = 1083,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockItemStyle)
    k_EMsgGCUnlockItemStyle = 1084,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockItemStyleResponse)
    k_EMsgGCUnlockItemStyleResponse = 1085,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplySticker)
    k_EMsgGCApplySticker = 1086,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemAcknowledged)
    k_EMsgGCItemAcknowledged = 1087,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStatTrakSwap)
    k_EMsgGCStatTrakSwap = 1088,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUserTrackTimePlayedConsecutively)
    k_EMsgGCUserTrackTimePlayedConsecutively = 1089,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemCustomizationNotification)
    k_EMsgGCItemCustomizationNotification = 1090,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCModifyItemAttribute)
    k_EMsgGCModifyItemAttribute = 1091,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCasketItemAdd)
    k_EMsgGCCasketItemAdd = 1092,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCasketItemExtract)
    k_EMsgGCCasketItemExtract = 1093,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCasketItemLoadContents)
    k_EMsgGCCasketItemLoadContents = 1094,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTradingBase)
    k_EMsgGCTradingBase = 1500,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_InitiateTradeRequest)
    k_EMsgGCTrading_InitiateTradeRequest = 1501,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_InitiateTradeResponse)
    k_EMsgGCTrading_InitiateTradeResponse = 1502,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_StartSession)
    k_EMsgGCTrading_StartSession = 1503,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_SetItem)
    k_EMsgGCTrading_SetItem = 1504,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_RemoveItem)
    k_EMsgGCTrading_RemoveItem = 1505,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_UpdateTradeInfo)
    k_EMsgGCTrading_UpdateTradeInfo = 1506,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_SetReadiness)
    k_EMsgGCTrading_SetReadiness = 1507,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_ReadinessResponse)
    k_EMsgGCTrading_ReadinessResponse = 1508,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_SessionClosed)
    k_EMsgGCTrading_SessionClosed = 1509,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_CancelSession)
    k_EMsgGCTrading_CancelSession = 1510,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_TradeChatMsg)
    k_EMsgGCTrading_TradeChatMsg = 1511,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_ConfirmOffer)
    k_EMsgGCTrading_ConfirmOffer = 1512,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_TradeTypingChatMsg)
    k_EMsgGCTrading_TradeTypingChatMsg = 1513,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerBrowser_FavoriteServer)
    k_EMsgGCServerBrowser_FavoriteServer = 1601,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerBrowser_BlacklistServer)
    k_EMsgGCServerBrowser_BlacklistServer = 1602,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerRentalsBase)
    k_EMsgGCServerRentalsBase = 1700,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewCheckStatus)
    k_EMsgGCItemPreviewCheckStatus = 1701,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewStatusResponse)
    k_EMsgGCItemPreviewStatusResponse = 1702,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewRequest)
    k_EMsgGCItemPreviewRequest = 1703,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewRequestResponse)
    k_EMsgGCItemPreviewRequestResponse = 1704,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewExpire)
    k_EMsgGCItemPreviewExpire = 1705,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewExpireNotification)
    k_EMsgGCItemPreviewExpireNotification = 1706,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewItemBoughtNotification)
    k_EMsgGCItemPreviewItemBoughtNotification = 1707,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_NewItemRequest)
    k_EMsgGCDev_NewItemRequest = 2001,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_NewItemRequestResponse)
    k_EMsgGCDev_NewItemRequestResponse = 2002,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_PaintKitDropItem)
    k_EMsgGCDev_PaintKitDropItem = 2003,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_SchemaReservationRequest)
    k_EMsgGCDev_SchemaReservationRequest = 2004,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStoreGetUserData)
    k_EMsgGCStoreGetUserData = 2500,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStoreGetUserDataResponse)
    k_EMsgGCStoreGetUserDataResponse = 2501,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInit_DEPRECATED)
    k_EMsgGCStorePurchaseInit_DEPRECATED = 2502,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInitResponse_DEPRECATED)
    k_EMsgGCStorePurchaseInitResponse_DEPRECATED = 2503,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseFinalize)
    k_EMsgGCStorePurchaseFinalize = 2504,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseFinalizeResponse)
    k_EMsgGCStorePurchaseFinalizeResponse = 2505,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseCancel)
    k_EMsgGCStorePurchaseCancel = 2506,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseCancelResponse)
    k_EMsgGCStorePurchaseCancelResponse = 2507,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseQueryTxn)
    k_EMsgGCStorePurchaseQueryTxn = 2508,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseQueryTxnResponse)
    k_EMsgGCStorePurchaseQueryTxnResponse = 2509,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInit)
    k_EMsgGCStorePurchaseInit = 2510,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInitResponse)
    k_EMsgGCStorePurchaseInitResponse = 2511,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBannedWordListRequest)
    k_EMsgGCBannedWordListRequest = 2512,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBannedWordListResponse)
    k_EMsgGCBannedWordListResponse = 2513,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCBannedWordListBroadcast)
    k_EMsgGCToGCBannedWordListBroadcast = 2514,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCBannedWordListUpdated)
    k_EMsgGCToGCBannedWordListUpdated = 2515,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCDirtySDOCache)
    k_EMsgGCToGCDirtySDOCache = 2516,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCDirtyMultipleSDOCache)
    k_EMsgGCToGCDirtyMultipleSDOCache = 2517,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCUpdateSQLKeyValue)
    k_EMsgGCToGCUpdateSQLKeyValue = 2518,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCIsTrustedServer)
    k_EMsgGCToGCIsTrustedServer = 2519,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCIsTrustedServerResponse)
    k_EMsgGCToGCIsTrustedServerResponse = 2520,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCBroadcastConsoleCommand)
    k_EMsgGCToGCBroadcastConsoleCommand = 2521,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerVersionUpdated)
    k_EMsgGCServerVersionUpdated = 2522,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCWebAPIAccountChanged)
    k_EMsgGCToGCWebAPIAccountChanged = 2524,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRequestAnnouncements)
    k_EMsgGCRequestAnnouncements = 2525,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRequestAnnouncementsResponse)
    k_EMsgGCRequestAnnouncementsResponse = 2526,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRequestPassportItemGrant)
    k_EMsgGCRequestPassportItemGrant = 2527,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCClientVersionUpdated)
    k_EMsgGCClientVersionUpdated = 2528,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustItemEquippedStateMulti)
    k_EMsgGCAdjustItemEquippedStateMulti = 2529,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRecurringSubscriptionStatus)
    k_EMsgGCRecurringSubscriptionStatus = 2530,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustEquipSlotsManual)
    k_EMsgGCAdjustEquipSlotsManual = 2531,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustEquipSlotsShuffle)
    k_EMsgGCAdjustEquipSlotsShuffle = 2532,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameItemAndEquip)
    k_EMsgGCNameItemAndEquip = 2533,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCOpenCrate)
    k_EMsgGCOpenCrate = 2534,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAcknowledgeRentalExpiration)
    k_EMsgGCAcknowledgeRentalExpiration = 2535,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCItemMsg {
    const NAME: &'static str = "EGCItemMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCItemMsg> {
        match value {
            1000 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBase),
            1001 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemPosition),
            1002 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCraft),
            1003 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCraftResponse),
            1004 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDelete),
            1005 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCVerifyCacheSubscription),
            1006 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItem),
            1007 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockCrate),
            1008 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockCrateResponse),
            1009 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintItem),
            1010 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintItemResponse),
            1011 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGoldenWrenchBroadcast),
            1012 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCMOTDRequest),
            1013 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCMOTDRequestResponse),
            1014 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddItemToSocket_DEPRECATED),
            1015 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddItemToSocketResponse_DEPRECATED),
            1016 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToBaseItem_DEPRECATED),
            1017 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToItem_DEPRECATED),
            1018 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToItemResponse_DEPRECATED),
            1019 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameBaseItem),
            1020 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameBaseItemResponse),
            1021 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveSocketItem_DEPRECATED),
            1022 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveSocketItemResponse_DEPRECATED),
            1023 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCustomizeItemTexture),
            1024 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCustomizeItemTextureResponse),
            1025 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUseItemRequest),
            1026 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUseItemResponse),
            1027 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftedItems_DEPRECATED),
            1030 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveItemName),
            1031 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveItemPaint),
            1032 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftWrapItem),
            1033 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftWrapItemResponse),
            1034 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGift),
            1035 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGiftResponseGiver),
            1036 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGiftResponseReceiver),
            1037 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnwrapGiftRequest),
            1038 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnwrapGiftResponse),
            1039 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemStyle),
            1040 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUsedClaimCodeItem),
            1041 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSortItems),
            1042 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_RevolvingLootList_DEPRECATED),
            1043 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccount),
            1044 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountResponse),
            1045 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountName),
            1046 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountNameResponse),
            1049 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUpdateItemSchema),
            1051 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveCustomTexture),
            1052 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveCustomTextureResponse),
            1053 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveMakersMark),
            1054 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveMakersMarkResponse),
            1055 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndex),
            1056 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndexResponse),
            1057 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSaxxyBroadcast),
            1058 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBackpackSortFinished),
            1059 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustItemEquippedState),
            1061 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCollectItem),
            1062 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemAcknowledged__DEPRECATED),
            1065 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_ReportAbuse),
            1066 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_ReportAbuseResponse),
            1068 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItemNotification),
            1069 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyConsumableEffects),
            1070 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCConsumableExhausted),
            1071 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCShowItemsPickedUp),
            1072 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCClientDisplayNotification),
            1073 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyStrangePart),
            1074 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_IncrementKillCountAttribute),
            1075 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_IncrementKillCountResponse),
            1076 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyPennantUpgrade),
            1077 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemPositions),
            1078 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyEggEssence),
            1079 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameEggEssenceResponse),
            1080 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitItem),
            1081 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitBaseItem),
            1082 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitItemResponse),
            1083 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftedItems),
            1084 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockItemStyle),
            1085 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockItemStyleResponse),
            1086 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplySticker),
            1087 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemAcknowledged),
            1088 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStatTrakSwap),
            1089 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively),
            1090 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemCustomizationNotification),
            1091 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCModifyItemAttribute),
            1092 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemAdd),
            1093 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemExtract),
            1094 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemLoadContents),
            1500 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTradingBase),
            1501 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_InitiateTradeRequest),
            1502 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_InitiateTradeResponse),
            1503 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_StartSession),
            1504 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SetItem),
            1505 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_RemoveItem),
            1506 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_UpdateTradeInfo),
            1507 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SetReadiness),
            1508 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_ReadinessResponse),
            1509 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SessionClosed),
            1510 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_CancelSession),
            1511 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_TradeChatMsg),
            1512 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_ConfirmOffer),
            1513 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_TradeTypingChatMsg),
            1601 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerBrowser_FavoriteServer),
            1602 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerBrowser_BlacklistServer),
            1700 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerRentalsBase),
            1701 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewCheckStatus),
            1702 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewStatusResponse),
            1703 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewRequest),
            1704 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewRequestResponse),
            1705 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewExpire),
            1706 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewExpireNotification),
            1707 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewItemBoughtNotification),
            2001 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_NewItemRequest),
            2002 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_NewItemRequestResponse),
            2003 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_PaintKitDropItem),
            2004 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_SchemaReservationRequest),
            2500 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStoreGetUserData),
            2501 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStoreGetUserDataResponse),
            2502 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInit_DEPRECATED),
            2503 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInitResponse_DEPRECATED),
            2504 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseFinalize),
            2505 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseFinalizeResponse),
            2506 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseCancel),
            2507 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseCancelResponse),
            2508 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseQueryTxn),
            2509 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseQueryTxnResponse),
            2510 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInit),
            2511 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInitResponse),
            2512 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBannedWordListRequest),
            2513 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBannedWordListResponse),
            2514 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBannedWordListBroadcast),
            2515 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBannedWordListUpdated),
            2516 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCDirtySDOCache),
            2517 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCDirtyMultipleSDOCache),
            2518 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCUpdateSQLKeyValue),
            2519 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCIsTrustedServer),
            2520 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCIsTrustedServerResponse),
            2521 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBroadcastConsoleCommand),
            2522 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerVersionUpdated),
            2524 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCWebAPIAccountChanged),
            2525 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestAnnouncements),
            2526 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestAnnouncementsResponse),
            2527 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestPassportItemGrant),
            2528 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCClientVersionUpdated),
            2529 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustItemEquippedStateMulti),
            2530 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRecurringSubscriptionStatus),
            2531 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustEquipSlotsManual),
            2532 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustEquipSlotsShuffle),
            2533 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItemAndEquip),
            2534 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCOpenCrate),
            2535 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAcknowledgeRentalExpiration),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCItemMsg> {
        match str {
            "k_EMsgGCBase" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBase),
            "k_EMsgGCSetItemPosition" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemPosition),
            "k_EMsgGCCraft" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCraft),
            "k_EMsgGCCraftResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCraftResponse),
            "k_EMsgGCDelete" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDelete),
            "k_EMsgGCVerifyCacheSubscription" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCVerifyCacheSubscription),
            "k_EMsgGCNameItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItem),
            "k_EMsgGCUnlockCrate" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockCrate),
            "k_EMsgGCUnlockCrateResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockCrateResponse),
            "k_EMsgGCPaintItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintItem),
            "k_EMsgGCPaintItemResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintItemResponse),
            "k_EMsgGCGoldenWrenchBroadcast" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGoldenWrenchBroadcast),
            "k_EMsgGCMOTDRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCMOTDRequest),
            "k_EMsgGCMOTDRequestResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCMOTDRequestResponse),
            "k_EMsgGCAddItemToSocket_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddItemToSocket_DEPRECATED),
            "k_EMsgGCAddItemToSocketResponse_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddItemToSocketResponse_DEPRECATED),
            "k_EMsgGCAddSocketToBaseItem_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToBaseItem_DEPRECATED),
            "k_EMsgGCAddSocketToItem_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToItem_DEPRECATED),
            "k_EMsgGCAddSocketToItemResponse_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToItemResponse_DEPRECATED),
            "k_EMsgGCNameBaseItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameBaseItem),
            "k_EMsgGCNameBaseItemResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameBaseItemResponse),
            "k_EMsgGCRemoveSocketItem_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveSocketItem_DEPRECATED),
            "k_EMsgGCRemoveSocketItemResponse_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveSocketItemResponse_DEPRECATED),
            "k_EMsgGCCustomizeItemTexture" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCustomizeItemTexture),
            "k_EMsgGCCustomizeItemTextureResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCustomizeItemTextureResponse),
            "k_EMsgGCUseItemRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUseItemRequest),
            "k_EMsgGCUseItemResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUseItemResponse),
            "k_EMsgGCGiftedItems_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftedItems_DEPRECATED),
            "k_EMsgGCRemoveItemName" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveItemName),
            "k_EMsgGCRemoveItemPaint" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveItemPaint),
            "k_EMsgGCGiftWrapItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftWrapItem),
            "k_EMsgGCGiftWrapItemResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftWrapItemResponse),
            "k_EMsgGCDeliverGift" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGift),
            "k_EMsgGCDeliverGiftResponseGiver" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGiftResponseGiver),
            "k_EMsgGCDeliverGiftResponseReceiver" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGiftResponseReceiver),
            "k_EMsgGCUnwrapGiftRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnwrapGiftRequest),
            "k_EMsgGCUnwrapGiftResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnwrapGiftResponse),
            "k_EMsgGCSetItemStyle" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemStyle),
            "k_EMsgGCUsedClaimCodeItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUsedClaimCodeItem),
            "k_EMsgGCSortItems" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSortItems),
            "k_EMsgGC_RevolvingLootList_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_RevolvingLootList_DEPRECATED),
            "k_EMsgGCLookupAccount" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccount),
            "k_EMsgGCLookupAccountResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountResponse),
            "k_EMsgGCLookupAccountName" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountName),
            "k_EMsgGCLookupAccountNameResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountNameResponse),
            "k_EMsgGCUpdateItemSchema" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUpdateItemSchema),
            "k_EMsgGCRemoveCustomTexture" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveCustomTexture),
            "k_EMsgGCRemoveCustomTextureResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveCustomTextureResponse),
            "k_EMsgGCRemoveMakersMark" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveMakersMark),
            "k_EMsgGCRemoveMakersMarkResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveMakersMarkResponse),
            "k_EMsgGCRemoveUniqueCraftIndex" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndex),
            "k_EMsgGCRemoveUniqueCraftIndexResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndexResponse),
            "k_EMsgGCSaxxyBroadcast" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSaxxyBroadcast),
            "k_EMsgGCBackpackSortFinished" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBackpackSortFinished),
            "k_EMsgGCAdjustItemEquippedState" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustItemEquippedState),
            "k_EMsgGCCollectItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCollectItem),
            "k_EMsgGCItemAcknowledged__DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemAcknowledged__DEPRECATED),
            "k_EMsgGC_ReportAbuse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_ReportAbuse),
            "k_EMsgGC_ReportAbuseResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_ReportAbuseResponse),
            "k_EMsgGCNameItemNotification" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItemNotification),
            "k_EMsgGCApplyConsumableEffects" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyConsumableEffects),
            "k_EMsgGCConsumableExhausted" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCConsumableExhausted),
            "k_EMsgGCShowItemsPickedUp" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCShowItemsPickedUp),
            "k_EMsgGCClientDisplayNotification" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCClientDisplayNotification),
            "k_EMsgGCApplyStrangePart" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyStrangePart),
            "k_EMsgGC_IncrementKillCountAttribute" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_IncrementKillCountAttribute),
            "k_EMsgGC_IncrementKillCountResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_IncrementKillCountResponse),
            "k_EMsgGCApplyPennantUpgrade" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyPennantUpgrade),
            "k_EMsgGCSetItemPositions" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemPositions),
            "k_EMsgGCApplyEggEssence" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyEggEssence),
            "k_EMsgGCNameEggEssenceResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameEggEssenceResponse),
            "k_EMsgGCPaintKitItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitItem),
            "k_EMsgGCPaintKitBaseItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitBaseItem),
            "k_EMsgGCPaintKitItemResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitItemResponse),
            "k_EMsgGCGiftedItems" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftedItems),
            "k_EMsgGCUnlockItemStyle" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockItemStyle),
            "k_EMsgGCUnlockItemStyleResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockItemStyleResponse),
            "k_EMsgGCApplySticker" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplySticker),
            "k_EMsgGCItemAcknowledged" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemAcknowledged),
            "k_EMsgGCStatTrakSwap" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStatTrakSwap),
            "k_EMsgGCUserTrackTimePlayedConsecutively" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively),
            "k_EMsgGCItemCustomizationNotification" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemCustomizationNotification),
            "k_EMsgGCModifyItemAttribute" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCModifyItemAttribute),
            "k_EMsgGCCasketItemAdd" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemAdd),
            "k_EMsgGCCasketItemExtract" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemExtract),
            "k_EMsgGCCasketItemLoadContents" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemLoadContents),
            "k_EMsgGCTradingBase" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTradingBase),
            "k_EMsgGCTrading_InitiateTradeRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_InitiateTradeRequest),
            "k_EMsgGCTrading_InitiateTradeResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_InitiateTradeResponse),
            "k_EMsgGCTrading_StartSession" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_StartSession),
            "k_EMsgGCTrading_SetItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SetItem),
            "k_EMsgGCTrading_RemoveItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_RemoveItem),
            "k_EMsgGCTrading_UpdateTradeInfo" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_UpdateTradeInfo),
            "k_EMsgGCTrading_SetReadiness" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SetReadiness),
            "k_EMsgGCTrading_ReadinessResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_ReadinessResponse),
            "k_EMsgGCTrading_SessionClosed" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SessionClosed),
            "k_EMsgGCTrading_CancelSession" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_CancelSession),
            "k_EMsgGCTrading_TradeChatMsg" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_TradeChatMsg),
            "k_EMsgGCTrading_ConfirmOffer" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_ConfirmOffer),
            "k_EMsgGCTrading_TradeTypingChatMsg" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_TradeTypingChatMsg),
            "k_EMsgGCServerBrowser_FavoriteServer" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerBrowser_FavoriteServer),
            "k_EMsgGCServerBrowser_BlacklistServer" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerBrowser_BlacklistServer),
            "k_EMsgGCServerRentalsBase" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerRentalsBase),
            "k_EMsgGCItemPreviewCheckStatus" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewCheckStatus),
            "k_EMsgGCItemPreviewStatusResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewStatusResponse),
            "k_EMsgGCItemPreviewRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewRequest),
            "k_EMsgGCItemPreviewRequestResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewRequestResponse),
            "k_EMsgGCItemPreviewExpire" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewExpire),
            "k_EMsgGCItemPreviewExpireNotification" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewExpireNotification),
            "k_EMsgGCItemPreviewItemBoughtNotification" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewItemBoughtNotification),
            "k_EMsgGCDev_NewItemRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_NewItemRequest),
            "k_EMsgGCDev_NewItemRequestResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_NewItemRequestResponse),
            "k_EMsgGCDev_PaintKitDropItem" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_PaintKitDropItem),
            "k_EMsgGCDev_SchemaReservationRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_SchemaReservationRequest),
            "k_EMsgGCStoreGetUserData" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStoreGetUserData),
            "k_EMsgGCStoreGetUserDataResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStoreGetUserDataResponse),
            "k_EMsgGCStorePurchaseInit_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInit_DEPRECATED),
            "k_EMsgGCStorePurchaseInitResponse_DEPRECATED" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInitResponse_DEPRECATED),
            "k_EMsgGCStorePurchaseFinalize" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseFinalize),
            "k_EMsgGCStorePurchaseFinalizeResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseFinalizeResponse),
            "k_EMsgGCStorePurchaseCancel" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseCancel),
            "k_EMsgGCStorePurchaseCancelResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseCancelResponse),
            "k_EMsgGCStorePurchaseQueryTxn" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseQueryTxn),
            "k_EMsgGCStorePurchaseQueryTxnResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseQueryTxnResponse),
            "k_EMsgGCStorePurchaseInit" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInit),
            "k_EMsgGCStorePurchaseInitResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInitResponse),
            "k_EMsgGCBannedWordListRequest" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBannedWordListRequest),
            "k_EMsgGCBannedWordListResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBannedWordListResponse),
            "k_EMsgGCToGCBannedWordListBroadcast" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBannedWordListBroadcast),
            "k_EMsgGCToGCBannedWordListUpdated" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBannedWordListUpdated),
            "k_EMsgGCToGCDirtySDOCache" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCDirtySDOCache),
            "k_EMsgGCToGCDirtyMultipleSDOCache" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCDirtyMultipleSDOCache),
            "k_EMsgGCToGCUpdateSQLKeyValue" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCUpdateSQLKeyValue),
            "k_EMsgGCToGCIsTrustedServer" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCIsTrustedServer),
            "k_EMsgGCToGCIsTrustedServerResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCIsTrustedServerResponse),
            "k_EMsgGCToGCBroadcastConsoleCommand" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBroadcastConsoleCommand),
            "k_EMsgGCServerVersionUpdated" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerVersionUpdated),
            "k_EMsgGCToGCWebAPIAccountChanged" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCWebAPIAccountChanged),
            "k_EMsgGCRequestAnnouncements" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestAnnouncements),
            "k_EMsgGCRequestAnnouncementsResponse" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestAnnouncementsResponse),
            "k_EMsgGCRequestPassportItemGrant" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestPassportItemGrant),
            "k_EMsgGCClientVersionUpdated" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCClientVersionUpdated),
            "k_EMsgGCAdjustItemEquippedStateMulti" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustItemEquippedStateMulti),
            "k_EMsgGCRecurringSubscriptionStatus" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRecurringSubscriptionStatus),
            "k_EMsgGCAdjustEquipSlotsManual" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustEquipSlotsManual),
            "k_EMsgGCAdjustEquipSlotsShuffle" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustEquipSlotsShuffle),
            "k_EMsgGCNameItemAndEquip" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItemAndEquip),
            "k_EMsgGCOpenCrate" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCOpenCrate),
            "k_EMsgGCAcknowledgeRentalExpiration" => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAcknowledgeRentalExpiration),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCItemMsg] = &[
        EGCItemMsg::k_EMsgGCBase,
        EGCItemMsg::k_EMsgGCSetItemPosition,
        EGCItemMsg::k_EMsgGCCraft,
        EGCItemMsg::k_EMsgGCCraftResponse,
        EGCItemMsg::k_EMsgGCDelete,
        EGCItemMsg::k_EMsgGCVerifyCacheSubscription,
        EGCItemMsg::k_EMsgGCNameItem,
        EGCItemMsg::k_EMsgGCUnlockCrate,
        EGCItemMsg::k_EMsgGCUnlockCrateResponse,
        EGCItemMsg::k_EMsgGCPaintItem,
        EGCItemMsg::k_EMsgGCPaintItemResponse,
        EGCItemMsg::k_EMsgGCGoldenWrenchBroadcast,
        EGCItemMsg::k_EMsgGCMOTDRequest,
        EGCItemMsg::k_EMsgGCMOTDRequestResponse,
        EGCItemMsg::k_EMsgGCAddItemToSocket_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddItemToSocketResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddSocketToBaseItem_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddSocketToItem_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddSocketToItemResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCNameBaseItem,
        EGCItemMsg::k_EMsgGCNameBaseItemResponse,
        EGCItemMsg::k_EMsgGCRemoveSocketItem_DEPRECATED,
        EGCItemMsg::k_EMsgGCRemoveSocketItemResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCCustomizeItemTexture,
        EGCItemMsg::k_EMsgGCCustomizeItemTextureResponse,
        EGCItemMsg::k_EMsgGCUseItemRequest,
        EGCItemMsg::k_EMsgGCUseItemResponse,
        EGCItemMsg::k_EMsgGCGiftedItems_DEPRECATED,
        EGCItemMsg::k_EMsgGCRemoveItemName,
        EGCItemMsg::k_EMsgGCRemoveItemPaint,
        EGCItemMsg::k_EMsgGCGiftWrapItem,
        EGCItemMsg::k_EMsgGCGiftWrapItemResponse,
        EGCItemMsg::k_EMsgGCDeliverGift,
        EGCItemMsg::k_EMsgGCDeliverGiftResponseGiver,
        EGCItemMsg::k_EMsgGCDeliverGiftResponseReceiver,
        EGCItemMsg::k_EMsgGCUnwrapGiftRequest,
        EGCItemMsg::k_EMsgGCUnwrapGiftResponse,
        EGCItemMsg::k_EMsgGCSetItemStyle,
        EGCItemMsg::k_EMsgGCUsedClaimCodeItem,
        EGCItemMsg::k_EMsgGCSortItems,
        EGCItemMsg::k_EMsgGC_RevolvingLootList_DEPRECATED,
        EGCItemMsg::k_EMsgGCLookupAccount,
        EGCItemMsg::k_EMsgGCLookupAccountResponse,
        EGCItemMsg::k_EMsgGCLookupAccountName,
        EGCItemMsg::k_EMsgGCLookupAccountNameResponse,
        EGCItemMsg::k_EMsgGCUpdateItemSchema,
        EGCItemMsg::k_EMsgGCRemoveCustomTexture,
        EGCItemMsg::k_EMsgGCRemoveCustomTextureResponse,
        EGCItemMsg::k_EMsgGCRemoveMakersMark,
        EGCItemMsg::k_EMsgGCRemoveMakersMarkResponse,
        EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndex,
        EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndexResponse,
        EGCItemMsg::k_EMsgGCSaxxyBroadcast,
        EGCItemMsg::k_EMsgGCBackpackSortFinished,
        EGCItemMsg::k_EMsgGCAdjustItemEquippedState,
        EGCItemMsg::k_EMsgGCCollectItem,
        EGCItemMsg::k_EMsgGCItemAcknowledged__DEPRECATED,
        EGCItemMsg::k_EMsgGC_ReportAbuse,
        EGCItemMsg::k_EMsgGC_ReportAbuseResponse,
        EGCItemMsg::k_EMsgGCNameItemNotification,
        EGCItemMsg::k_EMsgGCApplyConsumableEffects,
        EGCItemMsg::k_EMsgGCConsumableExhausted,
        EGCItemMsg::k_EMsgGCShowItemsPickedUp,
        EGCItemMsg::k_EMsgGCClientDisplayNotification,
        EGCItemMsg::k_EMsgGCApplyStrangePart,
        EGCItemMsg::k_EMsgGC_IncrementKillCountAttribute,
        EGCItemMsg::k_EMsgGC_IncrementKillCountResponse,
        EGCItemMsg::k_EMsgGCApplyPennantUpgrade,
        EGCItemMsg::k_EMsgGCSetItemPositions,
        EGCItemMsg::k_EMsgGCApplyEggEssence,
        EGCItemMsg::k_EMsgGCNameEggEssenceResponse,
        EGCItemMsg::k_EMsgGCPaintKitItem,
        EGCItemMsg::k_EMsgGCPaintKitBaseItem,
        EGCItemMsg::k_EMsgGCPaintKitItemResponse,
        EGCItemMsg::k_EMsgGCGiftedItems,
        EGCItemMsg::k_EMsgGCUnlockItemStyle,
        EGCItemMsg::k_EMsgGCUnlockItemStyleResponse,
        EGCItemMsg::k_EMsgGCApplySticker,
        EGCItemMsg::k_EMsgGCItemAcknowledged,
        EGCItemMsg::k_EMsgGCStatTrakSwap,
        EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively,
        EGCItemMsg::k_EMsgGCItemCustomizationNotification,
        EGCItemMsg::k_EMsgGCModifyItemAttribute,
        EGCItemMsg::k_EMsgGCCasketItemAdd,
        EGCItemMsg::k_EMsgGCCasketItemExtract,
        EGCItemMsg::k_EMsgGCCasketItemLoadContents,
        EGCItemMsg::k_EMsgGCTradingBase,
        EGCItemMsg::k_EMsgGCTrading_InitiateTradeRequest,
        EGCItemMsg::k_EMsgGCTrading_InitiateTradeResponse,
        EGCItemMsg::k_EMsgGCTrading_StartSession,
        EGCItemMsg::k_EMsgGCTrading_SetItem,
        EGCItemMsg::k_EMsgGCTrading_RemoveItem,
        EGCItemMsg::k_EMsgGCTrading_UpdateTradeInfo,
        EGCItemMsg::k_EMsgGCTrading_SetReadiness,
        EGCItemMsg::k_EMsgGCTrading_ReadinessResponse,
        EGCItemMsg::k_EMsgGCTrading_SessionClosed,
        EGCItemMsg::k_EMsgGCTrading_CancelSession,
        EGCItemMsg::k_EMsgGCTrading_TradeChatMsg,
        EGCItemMsg::k_EMsgGCTrading_ConfirmOffer,
        EGCItemMsg::k_EMsgGCTrading_TradeTypingChatMsg,
        EGCItemMsg::k_EMsgGCServerBrowser_FavoriteServer,
        EGCItemMsg::k_EMsgGCServerBrowser_BlacklistServer,
        EGCItemMsg::k_EMsgGCServerRentalsBase,
        EGCItemMsg::k_EMsgGCItemPreviewCheckStatus,
        EGCItemMsg::k_EMsgGCItemPreviewStatusResponse,
        EGCItemMsg::k_EMsgGCItemPreviewRequest,
        EGCItemMsg::k_EMsgGCItemPreviewRequestResponse,
        EGCItemMsg::k_EMsgGCItemPreviewExpire,
        EGCItemMsg::k_EMsgGCItemPreviewExpireNotification,
        EGCItemMsg::k_EMsgGCItemPreviewItemBoughtNotification,
        EGCItemMsg::k_EMsgGCDev_NewItemRequest,
        EGCItemMsg::k_EMsgGCDev_NewItemRequestResponse,
        EGCItemMsg::k_EMsgGCDev_PaintKitDropItem,
        EGCItemMsg::k_EMsgGCDev_SchemaReservationRequest,
        EGCItemMsg::k_EMsgGCStoreGetUserData,
        EGCItemMsg::k_EMsgGCStoreGetUserDataResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseInit_DEPRECATED,
        EGCItemMsg::k_EMsgGCStorePurchaseInitResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCStorePurchaseFinalize,
        EGCItemMsg::k_EMsgGCStorePurchaseFinalizeResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseCancel,
        EGCItemMsg::k_EMsgGCStorePurchaseCancelResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseQueryTxn,
        EGCItemMsg::k_EMsgGCStorePurchaseQueryTxnResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseInit,
        EGCItemMsg::k_EMsgGCStorePurchaseInitResponse,
        EGCItemMsg::k_EMsgGCBannedWordListRequest,
        EGCItemMsg::k_EMsgGCBannedWordListResponse,
        EGCItemMsg::k_EMsgGCToGCBannedWordListBroadcast,
        EGCItemMsg::k_EMsgGCToGCBannedWordListUpdated,
        EGCItemMsg::k_EMsgGCToGCDirtySDOCache,
        EGCItemMsg::k_EMsgGCToGCDirtyMultipleSDOCache,
        EGCItemMsg::k_EMsgGCToGCUpdateSQLKeyValue,
        EGCItemMsg::k_EMsgGCToGCIsTrustedServer,
        EGCItemMsg::k_EMsgGCToGCIsTrustedServerResponse,
        EGCItemMsg::k_EMsgGCToGCBroadcastConsoleCommand,
        EGCItemMsg::k_EMsgGCServerVersionUpdated,
        EGCItemMsg::k_EMsgGCToGCWebAPIAccountChanged,
        EGCItemMsg::k_EMsgGCRequestAnnouncements,
        EGCItemMsg::k_EMsgGCRequestAnnouncementsResponse,
        EGCItemMsg::k_EMsgGCRequestPassportItemGrant,
        EGCItemMsg::k_EMsgGCClientVersionUpdated,
        EGCItemMsg::k_EMsgGCAdjustItemEquippedStateMulti,
        EGCItemMsg::k_EMsgGCRecurringSubscriptionStatus,
        EGCItemMsg::k_EMsgGCAdjustEquipSlotsManual,
        EGCItemMsg::k_EMsgGCAdjustEquipSlotsShuffle,
        EGCItemMsg::k_EMsgGCNameItemAndEquip,
        EGCItemMsg::k_EMsgGCOpenCrate,
        EGCItemMsg::k_EMsgGCAcknowledgeRentalExpiration,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCItemMsg {
    fn default() -> Self {
        EGCItemMsg::k_EMsgGCBase
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCMsgResponse)
pub enum EGCMsgResponse {
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseOK)
    k_EGCMsgResponseOK = 0,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseDenied)
    k_EGCMsgResponseDenied = 1,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseServerError)
    k_EGCMsgResponseServerError = 2,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseTimeout)
    k_EGCMsgResponseTimeout = 3,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseInvalid)
    k_EGCMsgResponseInvalid = 4,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseNoMatch)
    k_EGCMsgResponseNoMatch = 5,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseUnknownError)
    k_EGCMsgResponseUnknownError = 6,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseNotLoggedOn)
    k_EGCMsgResponseNotLoggedOn = 7,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgFailedToCreate)
    k_EGCMsgFailedToCreate = 8,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgLimitExceeded)
    k_EGCMsgLimitExceeded = 9,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgCommitUnfinalized)
    k_EGCMsgCommitUnfinalized = 10,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCMsgResponse {
    const NAME: &'static str = "EGCMsgResponse";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCMsgResponse> {
        match value {
            0 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseOK),
            1 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseDenied),
            2 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseServerError),
            3 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseTimeout),
            4 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseInvalid),
            5 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNoMatch),
            6 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseUnknownError),
            7 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNotLoggedOn),
            8 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgFailedToCreate),
            9 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgLimitExceeded),
            10 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgCommitUnfinalized),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCMsgResponse> {
        match str {
            "k_EGCMsgResponseOK" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseOK),
            "k_EGCMsgResponseDenied" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseDenied),
            "k_EGCMsgResponseServerError" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseServerError),
            "k_EGCMsgResponseTimeout" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseTimeout),
            "k_EGCMsgResponseInvalid" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseInvalid),
            "k_EGCMsgResponseNoMatch" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNoMatch),
            "k_EGCMsgResponseUnknownError" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseUnknownError),
            "k_EGCMsgResponseNotLoggedOn" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNotLoggedOn),
            "k_EGCMsgFailedToCreate" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgFailedToCreate),
            "k_EGCMsgLimitExceeded" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgLimitExceeded),
            "k_EGCMsgCommitUnfinalized" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgCommitUnfinalized),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCMsgResponse] = &[
        EGCMsgResponse::k_EGCMsgResponseOK,
        EGCMsgResponse::k_EGCMsgResponseDenied,
        EGCMsgResponse::k_EGCMsgResponseServerError,
        EGCMsgResponse::k_EGCMsgResponseTimeout,
        EGCMsgResponse::k_EGCMsgResponseInvalid,
        EGCMsgResponse::k_EGCMsgResponseNoMatch,
        EGCMsgResponse::k_EGCMsgResponseUnknownError,
        EGCMsgResponse::k_EGCMsgResponseNotLoggedOn,
        EGCMsgResponse::k_EGCMsgFailedToCreate,
        EGCMsgResponse::k_EGCMsgLimitExceeded,
        EGCMsgResponse::k_EGCMsgCommitUnfinalized,
    ];
}

impl ::std::default::Default for EGCMsgResponse {
    fn default() -> Self {
        EGCMsgResponse::k_EGCMsgResponseOK
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EUnlockStyle)
pub enum EUnlockStyle {
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Succeeded)
    k_UnlockStyle_Succeeded = 0,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_PreReq)
    k_UnlockStyle_Failed_PreReq = 1,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantAfford)
    k_UnlockStyle_Failed_CantAfford = 2,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantCommit)
    k_UnlockStyle_Failed_CantCommit = 3,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantLockCache)
    k_UnlockStyle_Failed_CantLockCache = 4,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantAffordAttrib)
    k_UnlockStyle_Failed_CantAffordAttrib = 5,
}

impl ::steam_vent_proto_common::protobuf::Enum for EUnlockStyle {
    const NAME: &'static str = "EUnlockStyle";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EUnlockStyle> {
        match value {
            0 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Succeeded),
            1 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_PreReq),
            2 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantAfford),
            3 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantCommit),
            4 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantLockCache),
            5 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantAffordAttrib),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EUnlockStyle> {
        match str {
            "k_UnlockStyle_Succeeded" => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Succeeded),
            "k_UnlockStyle_Failed_PreReq" => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_PreReq),
            "k_UnlockStyle_Failed_CantAfford" => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantAfford),
            "k_UnlockStyle_Failed_CantCommit" => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantCommit),
            "k_UnlockStyle_Failed_CantLockCache" => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantLockCache),
            "k_UnlockStyle_Failed_CantAffordAttrib" => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantAffordAttrib),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EUnlockStyle] = &[
        EUnlockStyle::k_UnlockStyle_Succeeded,
        EUnlockStyle::k_UnlockStyle_Failed_PreReq,
        EUnlockStyle::k_UnlockStyle_Failed_CantAfford,
        EUnlockStyle::k_UnlockStyle_Failed_CantCommit,
        EUnlockStyle::k_UnlockStyle_Failed_CantLockCache,
        EUnlockStyle::k_UnlockStyle_Failed_CantAffordAttrib,
    ];
}

impl ::std::default::Default for EUnlockStyle {
    fn default() -> Self {
        EUnlockStyle::k_UnlockStyle_Succeeded
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCItemCustomizationNotification)
pub enum EGCItemCustomizationNotification {
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_NameItem)
    k_EGCItemCustomizationNotification_NameItem = 1006,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_UnlockCrate)
    k_EGCItemCustomizationNotification_UnlockCrate = 1007,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_XRayItemReveal)
    k_EGCItemCustomizationNotification_XRayItemReveal = 1008,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_XRayItemClaim)
    k_EGCItemCustomizationNotification_XRayItemClaim = 1009,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketTooFull)
    k_EGCItemCustomizationNotification_CasketTooFull = 1011,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketContents)
    k_EGCItemCustomizationNotification_CasketContents = 1012,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketAdded)
    k_EGCItemCustomizationNotification_CasketAdded = 1013,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketRemoved)
    k_EGCItemCustomizationNotification_CasketRemoved = 1014,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketInvFull)
    k_EGCItemCustomizationNotification_CasketInvFull = 1015,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_NameBaseItem)
    k_EGCItemCustomizationNotification_NameBaseItem = 1019,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_RemoveItemName)
    k_EGCItemCustomizationNotification_RemoveItemName = 1030,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_RemoveSticker)
    k_EGCItemCustomizationNotification_RemoveSticker = 1053,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ApplySticker)
    k_EGCItemCustomizationNotification_ApplySticker = 1086,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_StatTrakSwap)
    k_EGCItemCustomizationNotification_StatTrakSwap = 1088,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_RemovePatch)
    k_EGCItemCustomizationNotification_RemovePatch = 1089,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ApplyPatch)
    k_EGCItemCustomizationNotification_ApplyPatch = 1090,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ActivateFanToken)
    k_EGCItemCustomizationNotification_ActivateFanToken = 9178,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ActivateOperationCoin)
    k_EGCItemCustomizationNotification_ActivateOperationCoin = 9179,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_GraffitiUnseal)
    k_EGCItemCustomizationNotification_GraffitiUnseal = 9185,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_GenerateSouvenir)
    k_EGCItemCustomizationNotification_GenerateSouvenir = 9204,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ClientRedeemMissionReward)
    k_EGCItemCustomizationNotification_ClientRedeemMissionReward = 9209,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ClientRedeemFreeReward)
    k_EGCItemCustomizationNotification_ClientRedeemFreeReward = 9219,
}

impl ::steam_vent_proto_common::protobuf::Enum for EGCItemCustomizationNotification {
    const NAME: &'static str = "EGCItemCustomizationNotification";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCItemCustomizationNotification> {
        match value {
            1006 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem),
            1007 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_UnlockCrate),
            1008 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemReveal),
            1009 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemClaim),
            1011 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketTooFull),
            1012 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketContents),
            1013 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketAdded),
            1014 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketRemoved),
            1015 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketInvFull),
            1019 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameBaseItem),
            1030 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveItemName),
            1053 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveSticker),
            1086 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplySticker),
            1088 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_StatTrakSwap),
            1089 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemovePatch),
            1090 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplyPatch),
            9178 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateFanToken),
            9179 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateOperationCoin),
            9185 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GraffitiUnseal),
            9204 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GenerateSouvenir),
            9209 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemMissionReward),
            9219 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemFreeReward),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCItemCustomizationNotification> {
        match str {
            "k_EGCItemCustomizationNotification_NameItem" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem),
            "k_EGCItemCustomizationNotification_UnlockCrate" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_UnlockCrate),
            "k_EGCItemCustomizationNotification_XRayItemReveal" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemReveal),
            "k_EGCItemCustomizationNotification_XRayItemClaim" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemClaim),
            "k_EGCItemCustomizationNotification_CasketTooFull" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketTooFull),
            "k_EGCItemCustomizationNotification_CasketContents" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketContents),
            "k_EGCItemCustomizationNotification_CasketAdded" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketAdded),
            "k_EGCItemCustomizationNotification_CasketRemoved" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketRemoved),
            "k_EGCItemCustomizationNotification_CasketInvFull" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketInvFull),
            "k_EGCItemCustomizationNotification_NameBaseItem" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameBaseItem),
            "k_EGCItemCustomizationNotification_RemoveItemName" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveItemName),
            "k_EGCItemCustomizationNotification_RemoveSticker" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveSticker),
            "k_EGCItemCustomizationNotification_ApplySticker" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplySticker),
            "k_EGCItemCustomizationNotification_StatTrakSwap" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_StatTrakSwap),
            "k_EGCItemCustomizationNotification_RemovePatch" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemovePatch),
            "k_EGCItemCustomizationNotification_ApplyPatch" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplyPatch),
            "k_EGCItemCustomizationNotification_ActivateFanToken" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateFanToken),
            "k_EGCItemCustomizationNotification_ActivateOperationCoin" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateOperationCoin),
            "k_EGCItemCustomizationNotification_GraffitiUnseal" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GraffitiUnseal),
            "k_EGCItemCustomizationNotification_GenerateSouvenir" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GenerateSouvenir),
            "k_EGCItemCustomizationNotification_ClientRedeemMissionReward" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemMissionReward),
            "k_EGCItemCustomizationNotification_ClientRedeemFreeReward" => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemFreeReward),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCItemCustomizationNotification] = &[
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_UnlockCrate,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemReveal,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemClaim,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketTooFull,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketContents,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketAdded,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketRemoved,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketInvFull,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameBaseItem,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveItemName,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveSticker,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplySticker,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_StatTrakSwap,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemovePatch,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplyPatch,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateFanToken,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateOperationCoin,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GraffitiUnseal,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GenerateSouvenir,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemMissionReward,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemFreeReward,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCItemCustomizationNotification {
    fn default() -> Self {
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgGCGiftedItems {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCGiftedItems {
    type KindEnum = crate::econ_gcmessages::EGCItemMsg;
    const KIND: Self::KindEnum = crate::econ_gcmessages::EGCItemMsg::k_EMsgGCGiftedItems;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCDev_SchemaReservationRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCDev_SchemaReservationRequest {
    type KindEnum = crate::econ_gcmessages::EGCItemMsg;
    const KIND: Self::KindEnum = crate::econ_gcmessages::EGCItemMsg::k_EMsgGCDev_SchemaReservationRequest;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCasketItem {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCUserTrackTimePlayedConsecutively {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCUserTrackTimePlayedConsecutively {
    type KindEnum = crate::econ_gcmessages::EGCItemMsg;
    const KIND: Self::KindEnum = crate::econ_gcmessages::EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCItemCustomizationNotification {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCItemCustomizationNotification {
    type KindEnum = crate::econ_gcmessages::EGCItemMsg;
    const KIND: Self::KindEnum = crate::econ_gcmessages::EGCItemMsg::k_EMsgGCItemCustomizationNotification;
}
impl ::steam_vent_proto_common::MsgKindEnum for EGCItemMsg {}
