// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `connectionless_netmessages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:C2S_CONNECT_Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2S_CONNECT_Message {
    // message fields
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.host_version)
    pub host_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.auth_protocol)
    pub auth_protocol: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.challenge_number)
    pub challenge_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.reservation_cookie)
    pub reservation_cookie: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.low_violence)
    pub low_violence: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.encrypted_password)
    pub encrypted_password: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.splitplayers)
    pub splitplayers: ::std::vec::Vec<super::netmessages::CCLCMsg_SplitPlayerConnect>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.auth_steam)
    pub auth_steam: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.challenge_context)
    pub challenge_context: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:C2S_CONNECT_Message.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a C2S_CONNECT_Message {
    fn default() -> &'a C2S_CONNECT_Message {
        <C2S_CONNECT_Message as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl C2S_CONNECT_Message {
    pub fn new() -> C2S_CONNECT_Message {
        ::std::default::Default::default()
    }

    // optional uint32 host_version = 1;

    pub fn host_version(&self) -> u32 {
        self.host_version.unwrap_or(0)
    }

    pub fn clear_host_version(&mut self) {
        self.host_version = ::std::option::Option::None;
    }

    pub fn has_host_version(&self) -> bool {
        self.host_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_version(&mut self, v: u32) {
        self.host_version = ::std::option::Option::Some(v);
    }

    // optional uint32 auth_protocol = 2;

    pub fn auth_protocol(&self) -> u32 {
        self.auth_protocol.unwrap_or(0)
    }

    pub fn clear_auth_protocol(&mut self) {
        self.auth_protocol = ::std::option::Option::None;
    }

    pub fn has_auth_protocol(&self) -> bool {
        self.auth_protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_protocol(&mut self, v: u32) {
        self.auth_protocol = ::std::option::Option::Some(v);
    }

    // optional uint32 challenge_number = 3;

    pub fn challenge_number(&self) -> u32 {
        self.challenge_number.unwrap_or(0)
    }

    pub fn clear_challenge_number(&mut self) {
        self.challenge_number = ::std::option::Option::None;
    }

    pub fn has_challenge_number(&self) -> bool {
        self.challenge_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_number(&mut self, v: u32) {
        self.challenge_number = ::std::option::Option::Some(v);
    }

    // optional fixed64 reservation_cookie = 4;

    pub fn reservation_cookie(&self) -> u64 {
        self.reservation_cookie.unwrap_or(0)
    }

    pub fn clear_reservation_cookie(&mut self) {
        self.reservation_cookie = ::std::option::Option::None;
    }

    pub fn has_reservation_cookie(&self) -> bool {
        self.reservation_cookie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reservation_cookie(&mut self, v: u64) {
        self.reservation_cookie = ::std::option::Option::Some(v);
    }

    // optional bool low_violence = 5;

    pub fn low_violence(&self) -> bool {
        self.low_violence.unwrap_or(false)
    }

    pub fn clear_low_violence(&mut self) {
        self.low_violence = ::std::option::Option::None;
    }

    pub fn has_low_violence(&self) -> bool {
        self.low_violence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_violence(&mut self, v: bool) {
        self.low_violence = ::std::option::Option::Some(v);
    }

    // optional bytes encrypted_password = 6;

    pub fn encrypted_password(&self) -> &[u8] {
        match self.encrypted_password.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encrypted_password(&mut self) {
        self.encrypted_password = ::std::option::Option::None;
    }

    pub fn has_encrypted_password(&self) -> bool {
        self.encrypted_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_password(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_password(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_password.is_none() {
            self.encrypted_password = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encrypted_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_password(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_password.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes auth_steam = 8;

    pub fn auth_steam(&self) -> &[u8] {
        match self.auth_steam.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_auth_steam(&mut self) {
        self.auth_steam = ::std::option::Option::None;
    }

    pub fn has_auth_steam(&self) -> bool {
        self.auth_steam.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_steam(&mut self, v: ::std::vec::Vec<u8>) {
        self.auth_steam = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_steam(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.auth_steam.is_none() {
            self.auth_steam = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.auth_steam.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_steam(&mut self) -> ::std::vec::Vec<u8> {
        self.auth_steam.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string challenge_context = 9;

    pub fn challenge_context(&self) -> &str {
        match self.challenge_context.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_challenge_context(&mut self) {
        self.challenge_context = ::std::option::Option::None;
    }

    pub fn has_challenge_context(&self) -> bool {
        self.challenge_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_context(&mut self, v: ::std::string::String) {
        self.challenge_context = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge_context(&mut self) -> &mut ::std::string::String {
        if self.challenge_context.is_none() {
            self.challenge_context = ::std::option::Option::Some(::std::string::String::new());
        }
        self.challenge_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge_context(&mut self) -> ::std::string::String {
        self.challenge_context.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for C2S_CONNECT_Message {
    const NAME: &'static str = "C2S_CONNECT_Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.host_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.auth_protocol = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.challenge_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                33 => {
                    self.reservation_cookie = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.low_violence = ::std::option::Option::Some(is.read_bool()?);
                },
                50 => {
                    self.encrypted_password = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    self.splitplayers.push(is.read_message()?);
                },
                66 => {
                    self.auth_steam = ::std::option::Option::Some(is.read_bytes()?);
                },
                74 => {
                    self.challenge_context = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.host_version {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.auth_protocol {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.challenge_number {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.reservation_cookie {
            my_size += 1 + 8;
        }
        if let Some(v) = self.low_violence {
            my_size += 1 + 1;
        }
        if let Some(v) = self.encrypted_password.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(6, &v);
        }
        for value in &self.splitplayers {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.auth_steam.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.challenge_context.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(9, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.host_version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.auth_protocol {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.challenge_number {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.reservation_cookie {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.low_violence {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.encrypted_password.as_ref() {
            os.write_bytes(6, v)?;
        }
        for v in &self.splitplayers {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.auth_steam.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.challenge_context.as_ref() {
            os.write_string(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> C2S_CONNECT_Message {
        C2S_CONNECT_Message::new()
    }

    fn clear(&mut self) {
        self.host_version = ::std::option::Option::None;
        self.auth_protocol = ::std::option::Option::None;
        self.challenge_number = ::std::option::Option::None;
        self.reservation_cookie = ::std::option::Option::None;
        self.low_violence = ::std::option::Option::None;
        self.encrypted_password = ::std::option::Option::None;
        self.splitplayers.clear();
        self.auth_steam = ::std::option::Option::None;
        self.challenge_context = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static C2S_CONNECT_Message {
        static instance: C2S_CONNECT_Message = C2S_CONNECT_Message {
            host_version: ::std::option::Option::None,
            auth_protocol: ::std::option::Option::None,
            challenge_number: ::std::option::Option::None,
            reservation_cookie: ::std::option::Option::None,
            low_violence: ::std::option::Option::None,
            encrypted_password: ::std::option::Option::None,
            splitplayers: ::std::vec::Vec::new(),
            auth_steam: ::std::option::Option::None,
            challenge_context: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:C2S_CONNECTION_Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2S_CONNECTION_Message {
    // message fields
    // @@protoc_insertion_point(field:C2S_CONNECTION_Message.addon_name)
    pub addon_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:C2S_CONNECTION_Message.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a C2S_CONNECTION_Message {
    fn default() -> &'a C2S_CONNECTION_Message {
        <C2S_CONNECTION_Message as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl C2S_CONNECTION_Message {
    pub fn new() -> C2S_CONNECTION_Message {
        ::std::default::Default::default()
    }

    // optional string addon_name = 1;

    pub fn addon_name(&self) -> &str {
        match self.addon_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_addon_name(&mut self) {
        self.addon_name = ::std::option::Option::None;
    }

    pub fn has_addon_name(&self) -> bool {
        self.addon_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addon_name(&mut self, v: ::std::string::String) {
        self.addon_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addon_name(&mut self) -> &mut ::std::string::String {
        if self.addon_name.is_none() {
            self.addon_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.addon_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_addon_name(&mut self) -> ::std::string::String {
        self.addon_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for C2S_CONNECTION_Message {
    const NAME: &'static str = "C2S_CONNECTION_Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.addon_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.addon_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.addon_name.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> C2S_CONNECTION_Message {
        C2S_CONNECTION_Message::new()
    }

    fn clear(&mut self) {
        self.addon_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static C2S_CONNECTION_Message {
        static instance: C2S_CONNECTION_Message = C2S_CONNECTION_Message {
            addon_name: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::netmessages::*;
impl ::steam_vent_proto_common::RpcMessage for C2S_CONNECT_Message {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for C2S_CONNECTION_Message {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
