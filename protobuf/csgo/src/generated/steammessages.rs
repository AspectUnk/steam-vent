// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CMsgProtoBufHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgProtoBufHeader {
    // message fields
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.client_session_id)
    pub client_session_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.source_app_id)
    pub source_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.job_id_source)
    pub job_id_source: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.job_id_target)
    pub job_id_target: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.target_job_name)
    pub target_job_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.error_message)
    pub error_message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.ip)
    pub ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.gc_msg_src)
    pub gc_msg_src: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<GCProtoBufMsgSrc>>,
    // @@protoc_insertion_point(field:CMsgProtoBufHeader.gc_dir_index_source)
    pub gc_dir_index_source: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgProtoBufHeader.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgProtoBufHeader {
    fn default() -> &'a CMsgProtoBufHeader {
        <CMsgProtoBufHeader as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgProtoBufHeader {
    pub fn new() -> CMsgProtoBufHeader {
        ::std::default::Default::default()
    }

    // optional fixed64 client_steam_id = 1;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional int32 client_session_id = 2;

    pub fn client_session_id(&self) -> i32 {
        self.client_session_id.unwrap_or(0)
    }

    pub fn clear_client_session_id(&mut self) {
        self.client_session_id = ::std::option::Option::None;
    }

    pub fn has_client_session_id(&self) -> bool {
        self.client_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_session_id(&mut self, v: i32) {
        self.client_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 source_app_id = 3;

    pub fn source_app_id(&self) -> u32 {
        self.source_app_id.unwrap_or(0)
    }

    pub fn clear_source_app_id(&mut self) {
        self.source_app_id = ::std::option::Option::None;
    }

    pub fn has_source_app_id(&self) -> bool {
        self.source_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_app_id(&mut self, v: u32) {
        self.source_app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 job_id_source = 10;

    pub fn job_id_source(&self) -> u64 {
        self.job_id_source.unwrap_or(18446744073709551615u64)
    }

    pub fn clear_job_id_source(&mut self) {
        self.job_id_source = ::std::option::Option::None;
    }

    pub fn has_job_id_source(&self) -> bool {
        self.job_id_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id_source(&mut self, v: u64) {
        self.job_id_source = ::std::option::Option::Some(v);
    }

    // optional fixed64 job_id_target = 11;

    pub fn job_id_target(&self) -> u64 {
        self.job_id_target.unwrap_or(18446744073709551615u64)
    }

    pub fn clear_job_id_target(&mut self) {
        self.job_id_target = ::std::option::Option::None;
    }

    pub fn has_job_id_target(&self) -> bool {
        self.job_id_target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id_target(&mut self, v: u64) {
        self.job_id_target = ::std::option::Option::Some(v);
    }

    // optional string target_job_name = 12;

    pub fn target_job_name(&self) -> &str {
        match self.target_job_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_target_job_name(&mut self) {
        self.target_job_name = ::std::option::Option::None;
    }

    pub fn has_target_job_name(&self) -> bool {
        self.target_job_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_job_name(&mut self, v: ::std::string::String) {
        self.target_job_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_job_name(&mut self) -> &mut ::std::string::String {
        if self.target_job_name.is_none() {
            self.target_job_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.target_job_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_target_job_name(&mut self) -> ::std::string::String {
        self.target_job_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 eresult = 13;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string error_message = 14;

    pub fn error_message(&self) -> &str {
        match self.error_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_message(&mut self) {
        self.error_message = ::std::option::Option::None;
    }

    pub fn has_error_message(&self) -> bool {
        self.error_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        if self.error_message.is_none() {
            self.error_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        self.error_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 ip = 15;

    pub fn ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional .GCProtoBufMsgSrc gc_msg_src = 200;

    pub fn gc_msg_src(&self) -> GCProtoBufMsgSrc {
        match self.gc_msg_src {
            Some(e) => e.enum_value_or(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            None => GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified,
        }
    }

    pub fn clear_gc_msg_src(&mut self) {
        self.gc_msg_src = ::std::option::Option::None;
    }

    pub fn has_gc_msg_src(&self) -> bool {
        self.gc_msg_src.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_msg_src(&mut self, v: GCProtoBufMsgSrc) {
        self.gc_msg_src = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 gc_dir_index_source = 201;

    pub fn gc_dir_index_source(&self) -> u32 {
        self.gc_dir_index_source.unwrap_or(0)
    }

    pub fn clear_gc_dir_index_source(&mut self) {
        self.gc_dir_index_source = ::std::option::Option::None;
    }

    pub fn has_gc_dir_index_source(&self) -> bool {
        self.gc_dir_index_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_dir_index_source(&mut self, v: u32) {
        self.gc_dir_index_source = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgProtoBufHeader {
    const NAME: &'static str = "CMsgProtoBufHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.client_session_id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.source_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.job_id_source = ::std::option::Option::Some(is.read_fixed64()?);
                },
                89 => {
                    self.job_id_target = ::std::option::Option::Some(is.read_fixed64()?);
                },
                98 => {
                    self.target_job_name = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                114 => {
                    self.error_message = ::std::option::Option::Some(is.read_string()?);
                },
                120 => {
                    self.ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                1600 => {
                    self.gc_msg_src = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                1608 => {
                    self.gc_dir_index_source = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_session_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.source_app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.job_id_source {
            my_size += 1 + 8;
        }
        if let Some(v) = self.job_id_target {
            my_size += 1 + 8;
        }
        if let Some(v) = self.target_job_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.eresult {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(13, v);
        }
        if let Some(v) = self.error_message.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.ip {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.gc_msg_src {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(200, v.value());
        }
        if let Some(v) = self.gc_dir_index_source {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(201, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_session_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.source_app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.job_id_source {
            os.write_fixed64(10, v)?;
        }
        if let Some(v) = self.job_id_target {
            os.write_fixed64(11, v)?;
        }
        if let Some(v) = self.target_job_name.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.error_message.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.ip {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.gc_msg_src {
            os.write_enum(200, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gc_dir_index_source {
            os.write_uint32(201, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgProtoBufHeader {
        CMsgProtoBufHeader::new()
    }

    fn clear(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
        self.client_session_id = ::std::option::Option::None;
        self.source_app_id = ::std::option::Option::None;
        self.job_id_source = ::std::option::Option::None;
        self.job_id_target = ::std::option::Option::None;
        self.target_job_name = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.error_message = ::std::option::Option::None;
        self.ip = ::std::option::Option::None;
        self.gc_msg_src = ::std::option::Option::None;
        self.gc_dir_index_source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgProtoBufHeader {
        static instance: CMsgProtoBufHeader = CMsgProtoBufHeader {
            client_steam_id: ::std::option::Option::None,
            client_session_id: ::std::option::Option::None,
            source_app_id: ::std::option::Option::None,
            job_id_source: ::std::option::Option::None,
            job_id_target: ::std::option::Option::None,
            target_job_name: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            error_message: ::std::option::Option::None,
            ip: ::std::option::Option::None,
            gc_msg_src: ::std::option::Option::None,
            gc_dir_index_source: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CChinaAgreementSessions_StartAgreementSessionInGame_Request {
    // message fields
    // @@protoc_insertion_point(field:CChinaAgreementSessions_StartAgreementSessionInGame_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CChinaAgreementSessions_StartAgreementSessionInGame_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress)
    pub client_ipaddress: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CChinaAgreementSessions_StartAgreementSessionInGame_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CChinaAgreementSessions_StartAgreementSessionInGame_Request {
    fn default() -> &'a CChinaAgreementSessions_StartAgreementSessionInGame_Request {
        <CChinaAgreementSessions_StartAgreementSessionInGame_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CChinaAgreementSessions_StartAgreementSessionInGame_Request {
    pub fn new() -> CChinaAgreementSessions_StartAgreementSessionInGame_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string client_ipaddress = 3;

    pub fn client_ipaddress(&self) -> &str {
        match self.client_ipaddress.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_client_ipaddress(&mut self) {
        self.client_ipaddress = ::std::option::Option::None;
    }

    pub fn has_client_ipaddress(&self) -> bool {
        self.client_ipaddress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_ipaddress(&mut self, v: ::std::string::String) {
        self.client_ipaddress = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_ipaddress(&mut self) -> &mut ::std::string::String {
        if self.client_ipaddress.is_none() {
            self.client_ipaddress = ::std::option::Option::Some(::std::string::String::new());
        }
        self.client_ipaddress.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_ipaddress(&mut self) -> ::std::string::String {
        self.client_ipaddress.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CChinaAgreementSessions_StartAgreementSessionInGame_Request {
    const NAME: &'static str = "CChinaAgreementSessions_StartAgreementSessionInGame_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.client_ipaddress = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_ipaddress.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.client_ipaddress.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CChinaAgreementSessions_StartAgreementSessionInGame_Request {
        CChinaAgreementSessions_StartAgreementSessionInGame_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.client_ipaddress = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CChinaAgreementSessions_StartAgreementSessionInGame_Request {
        static instance: CChinaAgreementSessions_StartAgreementSessionInGame_Request = CChinaAgreementSessions_StartAgreementSessionInGame_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            client_ipaddress: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CChinaAgreementSessions_StartAgreementSessionInGame_Response {
    // message fields
    // @@protoc_insertion_point(field:CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url)
    pub agreement_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CChinaAgreementSessions_StartAgreementSessionInGame_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CChinaAgreementSessions_StartAgreementSessionInGame_Response {
    fn default() -> &'a CChinaAgreementSessions_StartAgreementSessionInGame_Response {
        <CChinaAgreementSessions_StartAgreementSessionInGame_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CChinaAgreementSessions_StartAgreementSessionInGame_Response {
    pub fn new() -> CChinaAgreementSessions_StartAgreementSessionInGame_Response {
        ::std::default::Default::default()
    }

    // optional string agreement_url = 1;

    pub fn agreement_url(&self) -> &str {
        match self.agreement_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_agreement_url(&mut self) {
        self.agreement_url = ::std::option::Option::None;
    }

    pub fn has_agreement_url(&self) -> bool {
        self.agreement_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_url(&mut self, v: ::std::string::String) {
        self.agreement_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_url.is_none() {
            self.agreement_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.agreement_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_url(&mut self) -> ::std::string::String {
        self.agreement_url.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CChinaAgreementSessions_StartAgreementSessionInGame_Response {
    const NAME: &'static str = "CChinaAgreementSessions_StartAgreementSessionInGame_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.agreement_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.agreement_url.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.agreement_url.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CChinaAgreementSessions_StartAgreementSessionInGame_Response {
        CChinaAgreementSessions_StartAgreementSessionInGame_Response::new()
    }

    fn clear(&mut self) {
        self.agreement_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CChinaAgreementSessions_StartAgreementSessionInGame_Response {
        static instance: CChinaAgreementSessions_StartAgreementSessionInGame_Response = CChinaAgreementSessions_StartAgreementSessionInGame_Response {
            agreement_url: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:GCProtoBufMsgSrc)
pub enum GCProtoBufMsgSrc {
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_Unspecified)
    GCProtoBufMsgSrc_Unspecified = 0,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromSystem)
    GCProtoBufMsgSrc_FromSystem = 1,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromSteamID)
    GCProtoBufMsgSrc_FromSteamID = 2,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromGC)
    GCProtoBufMsgSrc_FromGC = 3,
    // @@protoc_insertion_point(enum_value:GCProtoBufMsgSrc.GCProtoBufMsgSrc_ReplySystem)
    GCProtoBufMsgSrc_ReplySystem = 4,
}

impl ::steam_vent_proto_common::protobuf::Enum for GCProtoBufMsgSrc {
    const NAME: &'static str = "GCProtoBufMsgSrc";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GCProtoBufMsgSrc> {
        match value {
            0 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            1 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem),
            2 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID),
            3 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC),
            4 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<GCProtoBufMsgSrc> {
        match str {
            "GCProtoBufMsgSrc_Unspecified" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            "GCProtoBufMsgSrc_FromSystem" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem),
            "GCProtoBufMsgSrc_FromSteamID" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID),
            "GCProtoBufMsgSrc_FromGC" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC),
            "GCProtoBufMsgSrc_ReplySystem" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [GCProtoBufMsgSrc] = &[
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem,
    ];
}

impl ::std::default::Default for GCProtoBufMsgSrc {
    fn default() -> Self {
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified
    }
}


// Extension generation with lite runtime is not supported


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

impl ::steam_vent_proto_common::RpcMessage for CMsgProtoBufHeader {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CChinaAgreementSessions_StartAgreementSessionInGame_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CChinaAgreementSessions_StartAgreementSessionInGame_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
